"""Celery –∑–∞–¥–∞—á–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è SAC –∞–≥–µ–Ω—Ç–æ–≤."""

from __future__ import annotations

import os
import random
import time
import uuid
from datetime import datetime
from typing import Any, Dict, List

import pandas as pd

from tasks import celery
from utils.db_utils import db_get_or_fetch_ohlcv, load_latest_candles_from_csv_to_db
from utils.parser import parser_download_and_combine_with_library
from utils.redis_utils import get_redis_client
from utils.seed import set_global_seed

from agents.sac.agents.config import SacConfig
from agents.sac.agents.trainer import SacTrainer
from envs.dqn_model.gym.gconfig import GymConfig


@celery.task(bind=True, autoretry_for=(Exception,), retry_kwargs={'max_retries': 0}, queue='train')
def train_sac_symbol(
    self,
    symbol: str,
    episodes: int | None = None,
    seed: int | None = None,
    episode_length: int | None = None,
) -> Dict[str, Any]:
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –æ–±—É—á–µ–Ω–∏—è SAC –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞."""

    symbol = (symbol or "BTCUSDT").upper()
    redis_client = get_redis_client()
    running_key = f"celery:train:sac:task:{symbol}"
    logs: List[str] = []

    def push_log(message: str) -> None:
        timestamp = datetime.utcnow().strftime("%H:%M:%S")
        entry = f"[{timestamp}] {message}"
        logs.append(entry)
        self.update_state(state="PROGRESS", meta={"logs": list(logs), "symbol": symbol})

    try:
        push_log(f"üöÄ –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è SAC –¥–ª—è {symbol}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å –ª–∏ –æ–±—É—á–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–æ —É—Å–ø–µ—à–Ω–æ (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)
        try:
            last_run_key = f"sac:last_run:{symbol}"
            last_run_time = redis_client.get(last_run_key)
            if last_run_time:
                current_time = time.time()
                # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω–µ–µ 5 –º–∏–Ω—É—Ç —Å –º–æ–º–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                if current_time - float(last_run_time) < 300:  # 5 –º–∏–Ω—É—Ç
                    push_log(f"‚è≠Ô∏è –û–±—É—á–µ–Ω–∏–µ {symbol} –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å –Ω–µ–¥–∞–≤–Ω–æ ({current_time - float(last_run_time):.1f} —Å–µ–∫ –Ω–∞–∑–∞–¥), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫")
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –∑–∞–ø—É—Å–∫–µ
                    result_dir = f"result/sac/{symbol.lower()}/runs/sac-{str(uuid.uuid4())[:4].lower()}"
                    info = {
                        'success': True,
                        'symbol': symbol,
                        'run_name': f"sac-{str(uuid.uuid4())[:4].lower()}",
                        'result_dir': result_dir,
                        'model_path': f"{result_dir}/model.pth",
                        'metrics_path': f"{result_dir}/metrics.json",
                        'skipped': True,
                        'reason': 'recently_completed'
                    }
                    self.update_state(state="SUCCESS", meta={"logs": list(logs), "symbol": symbol, "result": info})
                    return info
        except Exception as e:
            push_log(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞: {e}")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
        try:
            redis_client.setex("sac:training:global_lock", 3600, "1")  # –ë–ª–æ–∫–∏—Ä—É–µ–º –Ω–∞ 1 —á–∞—Å
        except Exception:
            pass

        # –°–∏–¥: —Å–ª—É—á–∞–π–Ω—ã–π, –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
        if seed is None:
            seed = random.randint(1, 2**31 - 1)
            push_log(f"üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å–∏–¥ {seed}")
        set_global_seed(int(seed))

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        push_log("üì• –ó–∞–≥—Ä—É–∑–∫–∞ 5m —Å–≤–µ—á–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        df_5min = db_get_or_fetch_ohlcv(
            symbol_name=symbol,
            timeframe='5m',
            limit_candles=100_000,
            exchange_id='bybit'
        )

        if df_5min is None or df_5min.empty:
            push_log("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ë–î, –≤—ã–ø–æ–ª–Ω—è—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ...")
            try:
                csv_path = parser_download_and_combine_with_library(
                    symbol=symbol,
                    interval='5m',
                    months_to_fetch=12,
                    desired_candles=100_000
                )
                if csv_path:
                    loaded = load_latest_candles_from_csv_to_db(
                        file_path=csv_path,
                        symbol_name=symbol,
                        timeframe='5m'
                    )
                    push_log(f"‚úÖ –í –ë–î –∑–∞–≥—Ä—É–∂–µ–Ω–æ {loaded} —Å–≤–µ—á–µ–π")
                df_5min = db_get_or_fetch_ohlcv(
                    symbol_name=symbol,
                    timeframe='5m',
                    limit_candles=100_000,
                    exchange_id='bybit'
                )
            except Exception as exc:  # noqa: BLE001
                push_log(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: {exc}")
                df_5min = None

        if df_5min is None or df_5min.empty:
            error_msg = f"–î–∞–Ω–Ω—ã–µ –¥–ª—è {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            push_log(f"‚ùå {error_msg}")
            raise RuntimeError(error_msg)

        df_5min = df_5min.copy()
        df_5min['datetime'] = pd.to_datetime(df_5min['timestamp'], unit='ms')
        df_5min.set_index('datetime', inplace=True)

        df_15min = df_5min.resample('15min').agg({
            'open': 'first',
            'high': 'max',
            'low': 'min',
            'close': 'last',
            'volume': 'sum',
        }).dropna().reset_index()

        df_1h = df_5min.resample('1h').agg({
            'open': 'first',
            'high': 'max',
            'low': 'min',
            'close': 'last',
            'volume': 'sum',
        }).dropna().reset_index()

        push_log(
            f"üìä –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ —Å–≤–µ—á–µ–π: 5m={len(df_5min)}, 15m={len(df_15min)}, 1h={len(df_1h)}"
        )

        cfg = SacConfig()
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π UUID –∫–∞–∫ –≤ DQN: sac-{4_chars}
        short_id = str(uuid.uuid4())[:4].lower()
        cfg.run_name = f"sac-{short_id}"
        cfg.train_episodes = int(episodes) if episodes else cfg.train_episodes
        cfg.seed = int(seed)
        if episode_length:
            cfg.max_episode_steps = int(episode_length)

        gym_cfg = GymConfig()
        if episode_length:
            gym_cfg.episode_length = int(episode_length)

        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–Ω–µ—Ä (—ç—Ç–æ –≤—ã–∑–æ–≤–µ—Ç __post_init__ –∏ _ensure_result_paths)
        trainer = SacTrainer(
            cfg=cfg,
            progress_callback=push_log,
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏–º–≤–æ–ª –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–∞, —á—Ç–æ–±—ã –ø—É—Ç–∏ —Å–æ–∑–¥–∞–ª–∏—Å—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        cfg.extra = cfg.extra.copy() if cfg.extra else {}
        cfg.extra['symbol'] = symbol
        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—É—Ç–∏ —Å –Ω–æ–≤—ã–º —Å–∏–º–≤–æ–ª–æ–º
        cfg.update_result_paths()

        push_log(
            f"üéØ –°—Ç–∞—Ä—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: —ç–ø–∏–∑–æ–¥–æ–≤={cfg.train_episodes}, –¥–ª–∏–Ω–∞ —ç–ø–∏–∑–æ–¥–∞={gym_cfg.episode_length}"
        )

        dfs = {
            'df_5min': df_5min.reset_index(),
            'df_15min': df_15min,
            'df_1h': df_1h,
        }

        trainer.train(dfs=dfs, gym_cfg=gym_cfg)

        push_log("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—É—á–µ–Ω–∏—è")

        metrics_path = os.path.join(cfg.result_dir, 'metrics.json')
        info: Dict[str, Any] = {
            'success': True,
            'symbol': symbol,
            'run_name': cfg.run_name,
            'result_dir': cfg.result_dir,
            'model_path': cfg.model_path,
            'metrics_path': metrics_path if os.path.exists(metrics_path) else None,
        }

        push_log("‚úÖ –û–±—É—á–µ–Ω–∏–µ SAC –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—É—Å–∫–æ–≤
        try:
            current_time = time.time()
            redis_client.setex(f"sac:last_run:{symbol}", 3600, current_time)  # –•—Ä–∞–Ω–∏–º 1 —á–∞—Å
            # –°–Ω–∏–º–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            redis_client.delete("sac:training:global_lock")

            # –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—É—Å–∫–æ–≤
            # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏ ui:tasks –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            try:
                # –ò—â–µ–º –∏ —É–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É –∏–∑ —Å–ø–∏—Å–∫–∞ UI –∑–∞–¥–∞—á
                ui_tasks_key = "ui:tasks"
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –∏ —É–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â—É—é
                task_ids = redis_client.lrange(ui_tasks_key, 0, -1)
                current_task_id = self.request.id
                for i, task_id_bytes in enumerate(task_ids):
                    try:
                        task_id = task_id_bytes.decode('utf-8')
                        if task_id == current_task_id:
                            redis_client.lrem(ui_tasks_key, 0, task_id)
                            push_log(f"üóëÔ∏è –ó–∞–¥–∞—á–∞ {current_task_id} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ UI –∑–∞–¥–∞—á")
                            break
                    except:
                        continue
            except Exception as e:
                push_log(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å UI –∑–∞–¥–∞—á: {e}")

        except Exception as e:
            push_log(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {e}")

        self.update_state(state="SUCCESS", meta={"logs": list(logs), "symbol": symbol, "result": info})
        return info

    except Exception:
        push_log("‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è SAC, –ø–æ–¥—Ä–æ–±–Ω–µ–µ —Å–º. traceback –≤ Celery")
        raise
    finally:
        try:
            redis_client.delete(running_key)
            # –°–Ω–∏–º–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            redis_client.delete("sac:training:global_lock")
        except Exception:
            pass


