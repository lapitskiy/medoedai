from agents.vdqn.v_train_model import train_model
from agents.vdqn.v_train_model_optimized import train_model_optimized
from celery import Celery
import time
import os

import pandas as pd

import json

from utils.db_utils import db_get_or_fetch_ohlcv  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
from datetime import datetime
from celery.schedules import crontab

# API –∫–ª—é—á–∏ Bybit
BYBIT_API_KEY = os.getenv('BYBIT_API_KEY', 'your_bybit_api_key_here')
BYBIT_SECRET_KEY = os.getenv('BYBIT_SECRET_KEY', 'your_bybit_secret_key_here')

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–µ–π
if BYBIT_API_KEY == 'your_bybit_api_key_here' or BYBIT_SECRET_KEY == 'your_bybit_secret_key_here':
    print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: API –∫–ª—é—á–∏ Bybit –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è BYBIT_API_KEY –∏ BYBIT_SECRET_KEY")
else:
    print("‚úÖ API –∫–ª—é—á–∏ Bybit –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Celery —Å Redis –∫–∞–∫ –±—Ä–æ–∫–µ—Ä–æ–º –∏ –±–µ–∫–µ–Ω–¥–æ–º
celery = Celery(
    "tasks",
    broker="redis://redis:6379/0",
    backend="redis://redis:6379/0"
)

@celery.task(bind=True, autoretry_for=(Exception,), retry_kwargs={'max_retries': 0})
def search_lstm_task(self, query):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–æ–ª–≥–æ"""
    self.update_state(state="IN_PROGRESS", meta={"progress": 0})

    for i in range(5):  # –ò–º–∏—Ç–∞—Ü–∏—è –¥–æ–ª–≥–æ–≥–æ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
        time.sleep(2)
        self.update_state(state="IN_PROGRESS", meta={"progress": (i + 1) * 20})

    return {"message": "Task completed!", "query": query}

@celery.task(bind=True, autoretry_for=(Exception,), retry_kwargs={'max_retries': 0})
def train_dqn(self):
    
    self.update_state(state="IN_PROGRESS", meta={"progress": 0})
    
    print("üöÄ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è...")
    
    # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
    crypto_symbols = [
        'BTCUSDT',  # –ë–∏—Ç–∫–æ–∏–Ω
        'TONUSDT',  # TON
        'ETHUSDT',  # –≠—Ñ–∏—Ä–∏—É–º
        'SOLUSDT',  # Solana
        'ADAUSDT',  # Cardano
        'BNBUSDT'   # Binance Coin
    ]
    
    all_dfs = {}
    
    for symbol in crypto_symbols:
        try:
            print(f"üì• –ó–∞–≥—Ä—É–∂–∞—é {symbol}...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
            df_5min = db_get_or_fetch_ohlcv(
                symbol_name=symbol, 
                timeframe='5m', 
                limit_candles=100000,
                exchange_id='bybit'
            )
            
            if df_5min is not None and not df_5min.empty:
                print(f"  ‚úÖ {symbol}: {len(df_5min)} —Å–≤–µ—á–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
                df_5min['datetime'] = pd.to_datetime(df_5min['timestamp'], unit='ms')
                df_5min.set_index('datetime', inplace=True)
                
                # –°–æ–∑–¥–∞–µ–º 15-–º–∏–Ω—É—Ç–Ω—ã–µ –∏ 1-—á–∞—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                df_15min = df_5min.resample('15min').agg({
                    'open': 'first',
                    'high': 'max',
                    'low': 'min',
                    'close': 'last',
                    'volume': 'sum',
                }).dropna().reset_index()
                
                df_1h = df_5min.resample('1h').agg({
                    'open': 'first',
                    'high': 'max',
                    'low': 'min',
                    'close': 'last',
                    'volume': 'sum',
                }).dropna().reset_index()
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ–±—â–∏–π —Å–ª–æ–≤–∞—Ä—å
                all_dfs[symbol] = {
                    'df_5min': df_5min,
                    'df_15min': df_15min,
                    'df_1h': df_1h,
                    'symbol': symbol,
                    'candle_count': len(df_5min)
                }
                
            else:
                print(f"  ‚ö†Ô∏è {symbol}: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                
        except Exception as e:
            print(f"  ‚ùå {symbol}: –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ - {e}")
            continue
    
    if not all_dfs:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∏ –¥–ª—è –æ–¥–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã")
        return {"message": "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã"}
    
    print(f"\nüìà –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(all_dfs)} –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π
    for symbol, data in all_dfs.items():
        print(f"  ‚Ä¢ {symbol}: {data['candle_count']} —Å–≤–µ—á–µ–π")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ç–µ–∫—É—â–∏–º –∫–æ–¥–æ–º
    # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –º—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
    first_symbol = list(all_dfs.keys())[0]
    df = {
        'df_5min': all_dfs[first_symbol]['df_5min'],
        'df_15min': all_dfs[first_symbol]['df_15min'],
        'df_1h': all_dfs[first_symbol]['df_1h']
    }
    
    # –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ df –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
    for key, value in df.items():
        records = value[:2].copy()
        if 'timestamp' in records.columns:
            records['timestamp'] = records['timestamp'].astype(str)
        else:
            for col in records.columns:
                if records[col].dtype.name == 'datetime64[ns]':
                    records[col] = records[col].astype(str)
        print(f"{key}: {json.dumps(records.to_dict(orient='records'), ensure_ascii=False, indent=2)}")
    
    print(f"\nüéØ –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ {first_symbol}...")
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–∏–∑–æ–¥–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    episodes = int(os.getenv('DEFAULT_EPISODES', 10000))
    print(f"üéØ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–∏–∑–æ–¥–æ–≤: {episodes}")
    
    result = train_model_optimized(dfs=df, episodes=episodes)
    return {"message": result}

@celery.task(bind=True, autoretry_for=(Exception,), retry_kwargs={'max_retries': 0})
def train_dqn_symbol(self, symbol: str, episodes: int = None):
    """–û–±—É—á–µ–Ω–∏–µ DQN –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ (BTCUSDT/ETHUSDT/...)

    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î, –≥–æ—Ç–æ–≤–∏—Ç 5m/15m/1h, –∑–∞–ø—É—Å–∫–∞–µ—Ç train_model_optimized.
    """
    self.update_state(state="IN_PROGRESS", meta={"progress": 0, "symbol": symbol})

    try:
        print(f"\nüöÄ –°—Ç–∞—Ä—Ç –æ–±—É—á–µ–Ω–∏—è –¥–ª—è {symbol} [{datetime.now()}]")
        df_5min = db_get_or_fetch_ohlcv(
            symbol_name=symbol,
            timeframe='5m',
            limit_candles=100000,
            exchange_id='bybit'
        )

        if df_5min is None or df_5min.empty:
            return {"message": f"‚ùå –î–∞–Ω–Ω—ã–µ –¥–ª—è {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"}

        import pandas as pd
        df_5min['datetime'] = pd.to_datetime(df_5min['timestamp'], unit='ms')
        df_5min.set_index('datetime', inplace=True)

        df_15min = df_5min.resample('15min').agg({
            'open': 'first', 'high': 'max', 'low': 'min', 'close': 'last', 'volume': 'sum',
        }).dropna().reset_index()

        df_1h = df_5min.resample('1h').agg({
            'open': 'first', 'high': 'max', 'low': 'min', 'close': 'last', 'volume': 'sum',
        }).dropna().reset_index()

        dfs = {
            'df_5min': df_5min,
            'df_15min': df_15min,
            'df_1h': df_1h,
            'symbol': symbol,
        }

        print(f"üìà {symbol}: 5m={len(df_5min)}, 15m={len(df_15min)}, 1h={len(df_1h)}")

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–∏–∑–æ–¥–æ–≤ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
        if episodes is None:
            episodes = int(os.getenv('DEFAULT_EPISODES', 5))
        print(f"üéØ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–∏–∑–æ–¥–æ–≤: {episodes}")

        result = train_model_optimized(dfs=dfs, episodes=episodes)
        return {"message": f"‚úÖ –û–±—É—á–µ–Ω–∏–µ {symbol} –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {result}"}
    except Exception as e:
        import traceback
        traceback.print_exc()
        return {"message": f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è {symbol}: {str(e)}"}

@celery.task(bind=True, autoretry_for=(Exception,), retry_kwargs={'max_retries': 0})
def train_dqn_multi_crypto(self):
    """–ó–∞–¥–∞—á–∞ –¥–ª—è –º—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è DQN"""
    self.update_state(state="IN_PROGRESS", meta={"progress": 0})
    print("üöÄ –ù–∞—á–∏–Ω–∞—é –º—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ DQN...")
    try:
        # –ù–æ–≤—ã–π –º–æ–¥—É–ª—å –¥–ª—è –º—É–ª—å—Ç–∏-–æ–±—É—á–µ–Ω–∏—è
        from agents.multi.v_train_multi import train_multi
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–∏–∑–æ–¥–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
        episodes = int(os.getenv('DEFAULT_EPISODES', 10001))
        print(f"üéØ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–∏–∑–æ–¥–æ–≤ –¥–ª—è –º—É–ª—å—Ç–∏-–æ–±—É—á–µ–Ω–∏—è: {episodes}")
        
        result = train_multi(symbols=[
            'BTCUSDT','TONUSDT','ETHUSDT','SOLUSDT','ADAUSDT','BNBUSDT'
        ], episodes=episodes)
        return {"message": f"–ú—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {result}"}
    except Exception as e:
        import traceback
        traceback.print_exc()
        return {"message": f"–û—à–∏–±–∫–∞ –º—É–ª—å—Ç–∏-–æ–±—É—á–µ–Ω–∏—è: {str(e)}"}

@celery.task(bind=True, autoretry_for=(Exception,), retry_kwargs={'max_retries': 0})
def trade_step():
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–∏–Ω —Ç–æ—Ä–≥–æ–≤—ã–π —à–∞–≥ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º API Bybit
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–µ–π
        if BYBIT_API_KEY == 'your_bybit_api_key_here' or BYBIT_SECRET_KEY == 'your_bybit_secret_key_here':
            return {"error": "API –∫–ª—é—á–∏ Bybit –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"}
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä—ã–Ω–∫–∞ (–∑–∞–º–µ–Ω–∏ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
        state = get_current_market_state()  # —Ä–µ–∞–ª–∏–∑—É–π —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è

        action = trade_once(state)

        # –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –æ—Ä–¥–µ—Ä —á–µ—Ä–µ–∑ API –±–∏—Ä–∂–∏
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º API –∫–ª—é—á–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bybit
        import ccxt
        exchange = ccxt.bybit({
            'apiKey': BYBIT_API_KEY,
            'secret': BYBIT_SECRET_KEY,
            'sandbox': False,  # True –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
            'enableRateLimit': True
        })

        return f"–¢–æ—Ä–≥–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action} (API –ø–æ–¥–∫–ª—é—á–µ–Ω)"
        
    except Exception as e:
        return {"error": f"–û—à–∏–±–∫–∞ –≤ trade_step: {str(e)}"}

@celery.task(bind=True, autoretry_for=(Exception,), retry_kwargs={'max_retries': 0})
def start_trading_task(self, symbols, model_path=None):
    """
    Task to start trading in the trading_agent container every 5 minutes.
    """
    import docker
    import os

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–ª–∂–Ω–∞ –ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—è
    trading_enabled = os.environ.get('ENABLE_TRADING_BEAT', '1') in ('1', 'true', 'True')
    if not trading_enabled:
        return {"success": False, "skipped": True, "reason": "ENABLE_TRADING_BEAT=0"}
    
    print(f"üöÄ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è —Å–∏–º–≤–æ–ª–æ–≤: {symbols}")
    
    self.update_state(state="IN_PROGRESS", meta={"progress": 0})
    
    # Connect to Docker
    client = docker.from_env()
    
    try:
        # Get the medoedai container
        container = client.containers.get('medoedai')
        
        # Check if the container is running
        if container.status != 'running':
            return {"success": False, "error": f'Container medoedai is not running. Status: {container.status}'}
        
        # Start trading via exec with API keys
        if model_path:
            cmd = f'python -c "import json; import os; os.environ[\'BYBIT_API_KEY\'] = \'{BYBIT_API_KEY}\'; os.environ[\'BYBIT_SECRET_KEY\'] = \'{BYBIT_SECRET_KEY}\'; from trading_agent.trading_agent import TradingAgent; agent = TradingAgent(model_path=\\"{model_path}\\"); start_result = agent.start_trading(symbols={symbols}); status_result = agent.get_trading_status(); print(\\"RESULT: \\" + json.dumps({{**start_result, **status_result}}, default=str))"'
        else:
            cmd = f'python -c "import json; import os; os.environ[\'BYBIT_API_KEY\'] = \'{BYBIT_API_KEY}\'; os.environ[\'BYBIT_SECRET_KEY\'] = \'{BYBIT_SECRET_KEY}\'; from trading_agent.trading_agent import TradingAgent; agent = TradingAgent(); start_result = agent.start_trading(symbols={symbols}); status_result = agent.get_trading_status(); print(\\"RESULT: \\" + json.dumps({{**start_result, **status_result}}, default=str))"'
        
        exec_result = container.exec_run(cmd, tty=True)
        
        # Log the execution result
        print(f"üöÄ Start trading - Command: {cmd}")
        print(f"üìä Start trading - Exit code: {exec_result.exit_code}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º output_str
        output_str = ""
        if exec_result.output:
            output_str = exec_result.output.decode('utf-8')
            print(f"üìù Start trading - Output: {output_str}")
            
            # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if 'RESULT:' in output_str:
                try:
                    result_str = output_str.split('RESULT:')[1].strip()
                    result = json.loads(result_str)
                    print(f"‚úÖ Parsed result: {result}")
                except Exception as parse_error:
                    print(f"‚ùå Error parsing result: {parse_error}")
                    print(f"Raw result string: {result_str}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ Redis –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        try:
            from redis import Redis
            
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
            redis_client = Redis(host='redis', port=6379, db=0, decode_responses=True)
            
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            result_data = {
                'timestamp': datetime.now().isoformat(),
                'symbols': symbols,
                'model_path': model_path,
                'command': cmd,
                'exit_code': exec_result.exit_code,
                'output': output_str
            }
            
            # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –≤—ã–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã
            if 'RESULT:' in output_str:
                try:
                    result_str = output_str.split('RESULT:')[1].strip()
                    parsed_result = json.loads(result_str)
                    result_data['parsed_result'] = parsed_result
                except Exception as parse_error:
                    print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {parse_error}")
                    result_data['parse_error'] = str(parse_error)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)
            redis_key = f'trading:latest_result_{datetime.now().strftime("%Y%m%d_%H%M%S")}'
            redis_client.setex(redis_key, 3600, json.dumps(result_data, default=str))  # –•—Ä–∞–Ω–∏–º 1 —á–∞—Å
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10)
            all_keys = redis_client.keys('trading:latest_result_*')
            if len(all_keys) > 20:
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ
                sorted_keys = sorted(all_keys)
                for old_key in sorted_keys[:-10]:
                    redis_client.delete(old_key)
                    
        except Exception as redis_error:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Redis: {redis_error}")
        
        if exec_result.exit_code == 0:
            if exec_result.output:
                output = exec_result.output.decode('utf-8')
                # Log the result
                if 'RESULT:' in output:
                    result_str = output.split('RESULT:')[1].strip()
                    try:
                        result = json.loads(result_str)
                        return result
                    except:                    
                        return {"success": True, "message": f'Trading started for {symbols}', "output": output}
                else:
                    return {"success": True, "message": f'Trading started for {symbols}', "output": output}
            else:
                return {"success": True, "message": f'Trading started for {symbols}', "output": "No output"}
        else:
            error_output = exec_result.output.decode("utf-8") if exec_result.output else "No output"
            return {"success": False, "error": f'Command execution error: {error_output}'}
        
    except docker.errors.NotFound:
        return {"success": False, "error": 'Container medoedai not found. Start it with docker-compose up medoedai'}
    except Exception as e:
        return {"success": False, "error": f'Docker error: {str(e)}'}

# –í–∫–ª—é—á–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–ª–∏
import os
# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ENABLE_TRADING_BEAT=0 –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
if os.environ.get('ENABLE_TRADING_BEAT') is None:
    os.environ['ENABLE_TRADING_BEAT'] = '0'
    print("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω ENABLE_TRADING_BEAT=0")

if os.environ.get('ENABLE_TRADING_BEAT', '0') in ('1', 'true', 'True'):
    celery.conf.beat_schedule = {
        'start-trading-every-5-minutes': {
            'task': 'tasks.celery_tasks.start_trading_task',
            'schedule': crontab(minute='*/5'),
            'args': ([], None)  # –°–∏–º–≤–æ–ª—ã –∏ –ø—É—Ç—å –∫ –º–æ–¥–µ–ª–∏ –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è –∏–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        },
    }
    celery.conf.timezone = 'UTC'
    print("‚úÖ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è –≤–∫–ª—é—á–µ–Ω–∞ (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)")
else:
    print("‚ö†Ô∏è –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ (ENABLE_TRADING_BEAT=0)")

   
