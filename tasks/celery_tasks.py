from agents.vdqn.v_train_model import train_model
from agents.vdqn.v_train_model_optimized import train_model_optimized
from celery import Celery
import time

import pandas as pd

import json

from utils.db_utils import db_get_or_fetch_ohlcv  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Celery —Å Redis –∫–∞–∫ –±—Ä–æ–∫–µ—Ä–æ–º –∏ –±–µ–∫–µ–Ω–¥–æ–º
celery = Celery(
    "tasks",
    broker="redis://redis:6379/0",
    backend="redis://redis:6379/0"
)

@celery.task(bind=True, autoretry_for=(Exception,), retry_kwargs={'max_retries': 0})
def search_lstm_task(self, query):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–æ–ª–≥–æ"""
    self.update_state(state="IN_PROGRESS", meta={"progress": 0})

    for i in range(5):  # –ò–º–∏—Ç–∞—Ü–∏—è –¥–æ–ª–≥–æ–≥–æ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
        time.sleep(2)
        self.update_state(state="IN_PROGRESS", meta={"progress": (i + 1) * 20})

    return {"message": "Task completed!", "query": query}

@celery.task(bind=True, autoretry_for=(Exception,), retry_kwargs={'max_retries': 0})
def train_dqn(self):
    
    self.update_state(state="IN_PROGRESS", meta={"progress": 0})
    
    print("üöÄ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è...")
    
    # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
    crypto_symbols = [
        'BTCUSDT',  # –ë–∏—Ç–∫–æ–∏–Ω
        'TONUSDT',  # TON
        'ETHUSDT',  # –≠—Ñ–∏—Ä–∏—É–º
        'SOLUSDT',  # Solana
        'ADAUSDT',  # Cardano
        'BNBUSDT'   # Binance Coin
    ]
    
    all_dfs = {}
    
    for symbol in crypto_symbols:
        try:
            print(f"üì• –ó–∞–≥—Ä—É–∂–∞—é {symbol}...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
            df_5min = db_get_or_fetch_ohlcv(
                symbol_name=symbol, 
                timeframe='5m', 
                limit_candles=100000
            )
            
            if df_5min is not None and not df_5min.empty:
                print(f"  ‚úÖ {symbol}: {len(df_5min)} —Å–≤–µ—á–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
                df_5min['datetime'] = pd.to_datetime(df_5min['timestamp'], unit='ms')
                df_5min.set_index('datetime', inplace=True)
                
                # –°–æ–∑–¥–∞–µ–º 15-–º–∏–Ω—É—Ç–Ω—ã–µ –∏ 1-—á–∞—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                df_15min = df_5min.resample('15min').agg({
                    'open': 'first',
                    'high': 'max',
                    'low': 'min',
                    'close': 'last',
                    'volume': 'sum',
                }).dropna().reset_index()
                
                df_1h = df_5min.resample('1h').agg({
                    'open': 'first',
                    'high': 'max',
                    'low': 'min',
                    'close': 'last',
                    'volume': 'sum',
                }).dropna().reset_index()
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ–±—â–∏–π —Å–ª–æ–≤–∞—Ä—å
                all_dfs[symbol] = {
                    'df_5min': df_5min,
                    'df_15min': df_15min,
                    'df_1h': df_1h,
                    'symbol': symbol,
                    'candle_count': len(df_5min)
                }
                
            else:
                print(f"  ‚ö†Ô∏è {symbol}: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                
        except Exception as e:
            print(f"  ‚ùå {symbol}: –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ - {e}")
            continue
    
    if not all_dfs:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∏ –¥–ª—è –æ–¥–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã")
        return {"message": "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã"}
    
    print(f"\nüìà –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(all_dfs)} –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π
    for symbol, data in all_dfs.items():
        print(f"  ‚Ä¢ {symbol}: {data['candle_count']} —Å–≤–µ—á–µ–π")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ç–µ–∫—É—â–∏–º –∫–æ–¥–æ–º
    # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –º—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
    first_symbol = list(all_dfs.keys())[0]
    df = {
        'df_5min': all_dfs[first_symbol]['df_5min'],
        'df_15min': all_dfs[first_symbol]['df_15min'],
        'df_1h': all_dfs[first_symbol]['df_1h']
    }
    
    # –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ df –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
    for key, value in df.items():
        records = value[:2].copy()
        if 'timestamp' in records.columns:
            records['timestamp'] = records['timestamp'].astype(str)
        else:
            for col in records.columns:
                if records[col].dtype.name == 'datetime64[ns]':
                    records[col] = records[col].astype(str)
        print(f"{key}: {json.dumps(records.to_dict(orient='records'), ensure_ascii=False, indent=2)}")
    
    print(f"\nüéØ –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ {first_symbol}...")
    result = train_model_optimized(dfs=df, episodes=10000)
    return {"message": result}

@celery.task(bind=True, autoretry_for=(Exception,), retry_kwargs={'max_retries': 0})
def train_dqn_multi_crypto(self):
    """–ó–∞–¥–∞—á–∞ –¥–ª—è –º—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è DQN"""
    
    self.update_state(state="IN_PROGRESS", meta={"progress": 0})
    
    print("üöÄ –ù–∞—á–∏–Ω–∞—é –º—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ DQN...")
    
    # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
    crypto_symbols = [
        'BTCUSDT',  # –ë–∏—Ç–∫–æ–∏–Ω
        'TONUSDT',  # TON
        'ETHUSDT',  # –≠—Ñ–∏—Ä–∏—É–º
        'SOLUSDT',  # Solana
        'ADAUSDT',  # Cardano
        'BNBUSDT'   # Binance Coin
    ]
    
    all_dfs = {}
    
    for symbol in crypto_symbols:
        try:
            print(f"üì• –ó–∞–≥—Ä—É–∂–∞—é {symbol}...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
            df_5min = db_get_or_fetch_ohlcv(
                symbol_name=symbol, 
                timeframe='5m', 
                limit_candles=100000
            )
            
            if df_5min is not None and not df_5min.empty:
                print(f"  ‚úÖ {symbol}: {len(df_5min)} —Å–≤–µ—á–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
                df_5min['datetime'] = pd.to_datetime(df_5min['timestamp'], unit='ms')
                df_5min.set_index('datetime', inplace=True)
                
                # –°–æ–∑–¥–∞–µ–º 15-–º–∏–Ω—É—Ç–Ω—ã–µ –∏ 1-—á–∞—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                df_15min = df_5min.resample('15min').agg({
                    'open': 'first',
                    'high': 'max',
                    'low': 'min',
                    'close': 'last',
                    'volume': 'sum',
                }).dropna().reset_index()
                
                df_1h = df_5min.resample('1h').agg({
                    'open': 'first',
                    'high': 'max',
                    'low': 'min',
                    'close': 'last',
                    'volume': 'sum',
                }).dropna().reset_index()
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ–±—â–∏–π —Å–ª–æ–≤–∞—Ä—å
                all_dfs[symbol] = {
                    'df_5min': df_5min,
                    'df_15min': df_15min,
                    'df_1h': df_1h,
                    'symbol': symbol,
                    'candle_count': len(df_5min)
                }
                
            else:
                print(f"  ‚ö†Ô∏è {symbol}: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                
        except Exception as e:
            print(f"  ‚ùå {symbol}: –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ - {e}")
            continue
    
    if not all_dfs:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∏ –¥–ª—è –æ–¥–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã")
        return {"message": "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã"}
    
    print(f"\nüìà –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(all_dfs)} –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π
    for symbol, data in all_dfs.items():
        print(f"  ‚Ä¢ {symbol}: {data['candle_count']} —Å–≤–µ—á–µ–π")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
    print(f"\nüéØ –ó–∞–ø—É—Å–∫ –º—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–¥–∞—á–µ–π
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö:")
    for symbol, data in all_dfs.items():
        print(f"  {symbol}:")
        print(f"    df_5min: {type(data['df_5min'])} - {len(data['df_5min'])} —Å—Ç—Ä–æ–∫")
        print(f"    df_15min: {type(data['df_15min'])} - {len(data['df_15min'])} —Å—Ç—Ä–æ–∫")
        print(f"    df_1h: {type(data['df_1h'])} - {len(data['df_1h'])} —Å—Ç—Ä–æ–∫")
        print(f"    symbol: {data['symbol']}")
        print(f"    candle_count: {data['candle_count']}")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –º—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
        from agents.vdqn.v_train_model_optimized import train_model_optimized
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º –í–°–ï –¥–∞–Ω–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –¥–ª—è –º—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
        print(f"üéØ –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö {len(all_dfs)} –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –¥–ª—è –º—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è")
        print(f"üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è:")
        for symbol, data in all_dfs.items():
            print(f"  ‚Ä¢ {symbol}: {data['candle_count']} —Å–≤–µ—á–µ–π")
        
        print(f"üöÄ –ó–∞–ø—É—Å–∫ –ú–£–õ–¨–¢–ò–í–ê–õ–Æ–¢–ù–û–ì–û –æ–±—É—á–µ–Ω–∏—è:")
        print(f"  ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ø–∏–∑–æ–¥–∞")
        print(f"  ‚Ä¢ –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –ø—Ä–∏ –∫–∞–∂–¥–æ–º reset()")
        print(f"  ‚Ä¢ –û–±—É—á–µ–Ω–∏–µ –Ω–∞ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö")
        print(f"  ‚Ä¢ –ë–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –±–ª–∞–≥–æ–¥–∞—Ä—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—é –¥–∞–Ω–Ω—ã—Ö")
        
        # –ü–µ—Ä–µ–¥–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –≤ –º—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
        result = train_model_optimized(dfs=all_dfs, episodes=10001, use_wandb=False)
        return {"message": f"–ú—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {result}"}
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏: {str(e)}"
        print(f"‚ùå {error_msg}")
        import traceback
        print(f"üîç –ü–æ–ª–Ω—ã–π traceback:")
        traceback.print_exc()
        return {"message": error_msg}

@celery.task(bind=True, autoretry_for=(Exception,), retry_kwargs={'max_retries': 0})
def trade_step():
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä—ã–Ω–∫–∞ (–∑–∞–º–µ–Ω–∏ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
    state = get_current_market_state()  # —Ä–µ–∞–ª–∏–∑—É–π —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è

    action = trade_once(state)

    # –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –æ—Ä–¥–µ—Ä —á–µ—Ä–µ–∑ API –±–∏—Ä–∂–∏

    return f"–¢–æ—Ä–≥–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}"

   
