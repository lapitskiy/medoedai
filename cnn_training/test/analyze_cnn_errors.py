#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –æ—à–∏–±–æ–∫ CNN –º–æ–¥–µ–ª–∏
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –Ω–∞ –∫–∞–∫–∏—Ö —Ç–∏–ø–∞—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –º–æ–¥–µ–ª—å –æ—à–∏–±–∞–µ—Ç—Å—è
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from cnn_training.model_validator import validate_cnn_model
import json
import numpy as np
from datetime import datetime

def analyze_cnn_errors():
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫ CNN –º–æ–¥–µ–ª–∏"""
    
    print("üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –û–®–ò–ë–û–ö CNN –ú–û–î–ï–õ–ò")
    print("=" * 50)
    
    # –ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏
    model_path = "cnn_training/result/multi/runs/93b1/cnn_model_multi_best.pth"
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
    test_symbols = ['SOLUSDT', 'XRPUSDT', 'TONUSDT']
    
    print(f"üìä –ú–æ–¥–µ–ª—å: {model_path}")
    print(f"üéØ –¢–µ—Å—Ç–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã: {test_symbols}")
    print()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
    print("üß™ –ó–∞–ø—É—Å–∫–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é...")
    results = validate_cnn_model(
        model_path=model_path,
        test_symbols=test_symbols,
        test_period='last_year'
    )
    
    if not results['success']:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {results.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        return
    
    print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    print()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    symbol_results = results.get('symbol_results', [])
    overall_accuracy = results.get('overall_accuracy', 0)
    
    print(f"üìà –û–ë–©–ê–Ø –¢–û–ß–ù–û–°–¢–¨: {overall_accuracy:.2%}")
    print()
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
    for symbol_result in symbol_results:
        if not symbol_result.get('success', False):
            continue
            
        symbol = symbol_result['symbol']
        accuracy = symbol_result['accuracy']
        samples = symbol_result['samples_tested']
        error_analysis = symbol_result.get('error_analysis', {})
        
        print(f"üîç –ê–ù–ê–õ–ò–ó –°–ò–ú–í–û–õ–ê: {symbol}")
        print("-" * 30)
        print(f"–¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:.2%}")
        print(f"–û–±—Ä–∞–∑—Ü–æ–≤: {samples}")
        print()
        
        # –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫
        if error_analysis:
            print("üìä –ê–ù–ê–õ–ò–ó –û–®–ò–ë–û–ö:")
            
            # –ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫
            cm = error_analysis.get('confusion_matrix', [])
            if cm:
                print(f"–ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫: {cm}")
            
            # –¢–∏–ø—ã –æ—à–∏–±–æ–∫
            error_patterns = error_analysis.get('error_patterns', {})
            if error_patterns:
                print(f"–í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {error_patterns.get('total_errors', 0)}")
                print(f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {error_patterns.get('total_correct', 0)}")
                
                error_types = error_patterns.get('error_types', {})
                if error_types:
                    print("–¢–∏–ø—ã –æ—à–∏–±–æ–∫:")
                    for error_type, count in error_types.items():
                        print(f"  {error_type}: {count} —Ä–∞–∑")
                
                most_common = error_patterns.get('most_common_error')
                if most_common:
                    print(f"–°–∞–º–∞—è —á–∞—Å—Ç–∞—è –æ—à–∏–±–∫–∞: {most_common[0]} ({most_common[1]} —Ä–∞–∑)")
            
            # –ë–∞–ª–∞–Ω—Å –∫–ª–∞—Å—Å–æ–≤
            class_balance = error_analysis.get('class_balance', {})
            if class_balance:
                print("\n‚öñÔ∏è –ë–ê–õ–ê–ù–° –ö–õ–ê–°–°–û–í:")
                distribution = class_balance.get('class_distribution', {})
                for class_id, info in distribution.items():
                    print(f"  –ö–ª–∞—Å—Å {class_id}: {info['count']} ({info['percentage']:.1f}%)")
                
                is_balanced = class_balance.get('is_balanced', False)
                imbalance_ratio = class_balance.get('imbalance_ratio', 1.0)
                print(f"  –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å: {'‚úÖ –î–∞' if is_balanced else '‚ùå –ù–µ—Ç'} (—Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: {imbalance_ratio:.2f})")
            
            # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
            confidence_analysis = error_analysis.get('prediction_confidence', {})
            if confidence_analysis:
                print("\nüéØ –£–í–ï–†–ï–ù–ù–û–°–¢–¨ –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–ô:")
                dist = confidence_analysis.get('confidence_distribution', {})
                print(f"  –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {dist.get('high', 0):.1f}%")
                print(f"  –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {dist.get('medium', 0):.1f}%")
                print(f"  –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {dist.get('low', 0):.1f}%")
                print(f"  –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–∞: {confidence_analysis.get('avg_pattern_length', 0):.1f}")
        
        print()
    
    # –û–±—â–∏–µ –≤—ã–≤–æ–¥—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("üí° –í–´–í–û–î–´ –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("-" * 30)
    
    if overall_accuracy < 0.55:
        print("üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´:")
        print("  ‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å –±–ª–∏–∑–∫–∞ –∫ —Å–ª—É—á–∞–π–Ω–æ–π (50%)")
        print("  ‚Ä¢ –ú–æ–¥–µ–ª—å –Ω–µ —É–ª–∞–≤–ª–∏–≤–∞–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–∞ –Ω–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–∞—Ö")
        print("  ‚Ä¢ –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ—Å–º–æ—Ç—Ä –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –∏–ª–∏ –¥–∞–Ω–Ω—ã—Ö –æ–±—É—á–µ–Ω–∏—è")
    elif overall_accuracy < 0.65:
        print("üü° –ü–†–û–ë–õ–ï–ú–´ –°–†–ï–î–ù–ï–ô –°–ï–†–¨–ï–ó–ù–û–°–¢–ò:")
        print("  ‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å –≤—ã—à–µ —Å–ª—É—á–∞–π–Ω–æ–π, –Ω–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è")
        print("  ‚Ä¢ –ú–æ–¥–µ–ª—å —á–∞—Å—Ç–∏—á–Ω–æ —É–ª–∞–≤–ª–∏–≤–∞–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã")
        print("  ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–æ–±—É—á–µ–Ω–∏–µ –∏–ª–∏ —É–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
    else:
        print("üü¢ –•–û–†–û–®–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print("  ‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–∏–µ–º–ª–µ–º–∞—è –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏")
        print("  ‚Ä¢ –ú–æ–¥–µ–ª—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±–æ–±—â–∞—é—â—É—é —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å")
        print("  ‚Ä¢ –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å—é")
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
    symbol_accuracies = [r['accuracy'] for r in symbol_results if r.get('success', False)]
    if symbol_accuracies:
        best_symbol = max(symbol_results, key=lambda x: x.get('accuracy', 0))
        worst_symbol = min(symbol_results, key=lambda x: x.get('accuracy', 1))
        
        print(f"\nüìä –õ–£–ß–®–ò–ô –°–ò–ú–í–û–õ: {best_symbol['symbol']} ({best_symbol['accuracy']:.2%})")
        print(f"üìä –•–£–î–®–ò–ô –°–ò–ú–í–û–õ: {worst_symbol['symbol']} ({worst_symbol['accuracy']:.2%})")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
        for symbol_result in symbol_results:
            if not symbol_result.get('success', False):
                continue
                
            symbol = symbol_result['symbol']
            accuracy = symbol_result['accuracy']
            
            if accuracy < 0.5:
                print(f"  ‚Ä¢ {symbol}: –¢—Ä–µ–±—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è")
            elif accuracy < 0.6:
                print(f"  ‚Ä¢ {symbol}: –ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —É–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
            else:
                print(f"  ‚Ä¢ {symbol}: –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ö–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
    
    print("\nüöÄ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    print("  1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫–∏ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–∞—Ö")
    print("  2. –£–≤–µ–ª–∏—á–∏—Ç—å –æ–±—ä–µ–º –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
    print("  3. –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã CNN")
    print("  4. –î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
    print("  5. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–Ω—Å–∞–º–±–ª–∏ –º–æ–¥–µ–ª–µ–π")

if __name__ == "__main__":
    analyze_cnn_errors()
