#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫ CNN –º–æ–¥–µ–ª–∏ –Ω–∞ –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–∞—Ö
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

from cnn_training.test.error_analyzer import CNNErrorAnalyzer
import json
from datetime import datetime

def full_analysis():
    """–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫ –Ω–∞ –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–∞—Ö"""
    print("üîç –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –û–®–ò–ë–û–ö CNN –ú–û–î–ï–õ–ò")
    print("=" * 50)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    model_path = "cnn_training/result/multi/runs/93b1/cnn_model_multi_best.pth"
    test_symbols = ['SOLUSDT', 'XRPUSDT', 'TONUSDT']
    
    print(f"üìä –ú–æ–¥–µ–ª—å: {model_path}")
    print(f"üéØ –¢–µ—Å—Ç–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã: {test_symbols}")
    print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    analyzer = CNNErrorAnalyzer()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã
    all_results = {}
    for i, symbol in enumerate(test_symbols, 1):
        print(f"üîç [{i}/{len(test_symbols)}] –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {symbol}...")
        result = analyzer.analyze_single_symbol(model_path, symbol)
        all_results[symbol] = result
        
        if 'error' not in result:
            print(f"‚úÖ {symbol}: —Ç–æ—á–Ω–æ—Å—Ç—å {result['accuracy']:.2%}, –æ–±—Ä–∞–∑—Ü–æ–≤ {result['samples']}")
        else:
            print(f"‚ùå {symbol}: {result['error']}")
        print()
    
    # –û–±—â–∏–π –∞–Ω–∞–ª–∏–∑
    print("üìä –û–ë–©–ò–ô –ê–ù–ê–õ–ò–ó:")
    print("-" * 30)
    
    successful_results = {k: v for k, v in all_results.items() if 'error' not in v}
    
    if successful_results:
        accuracies = [r['accuracy'] for r in successful_results.values()]
        avg_accuracy = sum(accuracies) / len(accuracies)
        
        best_symbol = max(successful_results.items(), key=lambda x: x[1]['accuracy'])
        worst_symbol = min(successful_results.items(), key=lambda x: x[1]['accuracy'])
        
        print(f"–°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å: {avg_accuracy:.2%}")
        print(f"–õ—É—á—à–∏–π —Å–∏–º–≤–æ–ª: {best_symbol[0]} ({best_symbol[1]['accuracy']:.2%})")
        print(f"–•—É–¥—à–∏–π —Å–∏–º–≤–æ–ª: {worst_symbol[0]} ({worst_symbol[1]['accuracy']:.2%})")
        print(f"–£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {len(successful_results)}/{len(test_symbols)}")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ª—É—á—à–µ–≥–æ –∏ —Ö—É–¥—à–µ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤
        print(f"\nüîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –õ–£–ß–®–ï–ì–û –°–ò–ú–í–û–õ–ê ({best_symbol[0]}):")
        analyzer.print_detailed_analysis(best_symbol[1])
        
        print(f"\nüîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –•–£–î–®–ï–ì–û –°–ò–ú–í–û–õ–ê ({worst_symbol[0]}):")
        analyzer.print_detailed_analysis(worst_symbol[1])
        
        # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\nüí° –û–ë–©–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("-" * 30)
        
        if avg_accuracy < 0.55:
            print("üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´:")
            print("  ‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å –±–ª–∏–∑–∫–∞ –∫ —Å–ª—É—á–∞–π–Ω–æ–π (50%)")
            print("  ‚Ä¢ –ú–æ–¥–µ–ª—å –Ω–µ —É–ª–∞–≤–ª–∏–≤–∞–µ—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã")
            print("  ‚Ä¢ –¢—Ä–µ–±—É–µ—Ç—Å—è –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞")
            print("\nüöÄ –ü–õ–ê–ù –î–ï–ô–°–¢–í–ò–ô:")
            print("  1. –û–±—É—á–∏—Ç—å –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å —Å:")
            print("     - 10+ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏ –≤ –æ–±—É—á–µ–Ω–∏–∏")
            print("     - –£–ª—É—á—à–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π")
            print("     - –ë–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
            print("  2. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –æ–±—É—á–µ–Ω–∏—è")
            print("  3. –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ–¥—Ö–æ–¥—ã (LSTM, Transformer)")
        elif avg_accuracy < 0.65:
            print("üü° –ü–†–û–ë–õ–ï–ú–´ –°–†–ï–î–ù–ï–ô –°–ï–†–¨–ï–ó–ù–û–°–¢–ò:")
            print("  ‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å –≤—ã—à–µ —Å–ª—É—á–∞–π–Ω–æ–π, –Ω–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è")
            print("  ‚Ä¢ –ú–æ–¥–µ–ª—å —á–∞—Å—Ç–∏—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –Ω–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–∞—Ö")
            print("  ‚Ä¢ –¢—Ä–µ–±—É—é—Ç—Å—è —É–ª—É—á—à–µ–Ω–∏—è")
            print("\nüöÄ –ü–õ–ê–ù –î–ï–ô–°–¢–í–ò–ô:")
            print("  1. –£–ª—É—á—à–∏—Ç—å —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å:")
            print("     - –î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã")
            print("     - –£–≤–µ–ª–∏—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–±—É—á–µ–Ω–∏—è")
            print("     - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
            print("  2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å—é")
            print("  3. –ü–æ—Å—Ç–æ—è–Ω–Ω–æ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å")
        else:
            print("üü¢ –ü–†–ò–ï–ú–õ–ï–ú–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
            print("  ‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è")
            print("  ‚Ä¢ –ú–æ–¥–µ–ª—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±–æ–±—â–µ–Ω–∏–µ")
            print("  ‚Ä¢ –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ —Ç–æ—Ä–≥–æ–≤–ª–µ")
            print("\nüöÄ –ü–õ–ê–ù –î–ï–ô–°–¢–í–ò–ô:")
            print("  1. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ:")
            print("     - –î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –≤–∞–ª–∏–¥–∞—Ü–∏—é")
            print("     - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ä–æ–≥–∏")
            print("     - –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç")
            print("  2. –ù–∞—á–∞—Ç—å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ")
            print("  3. –ü–æ—Å—Ç–æ—è–Ω–Ω–æ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
        results_file = f"cnn_training/test/error_analysis_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(results_file, 'w', encoding='utf-8') as f:
            json.dump({
                'timestamp': datetime.now().isoformat(),
                'model_path': model_path,
                'test_symbols': test_symbols,
                'results': all_results,
                'summary': {
                    'avg_accuracy': avg_accuracy,
                    'best_symbol': best_symbol[0],
                    'worst_symbol': worst_symbol[0],
                    'successful_tests': len(successful_results),
                    'total_tests': len(test_symbols)
                }
            }, f, indent=2, ensure_ascii=False)
        
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {results_file}")
    
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞")

if __name__ == "__main__":
    full_analysis()
