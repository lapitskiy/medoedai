"""
–ú–æ–¥—É–ª—å –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ CNN –º–æ–¥–µ–ª–µ–π
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
"""

import numpy as np
import pandas as pd
from typing import Dict, List, Tuple, Any
from datetime import datetime, timedelta
import logging

logger = logging.getLogger(__name__)

class ValidationAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ CNN –º–æ–¥–µ–ª–µ–π"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
        self.accuracy_thresholds = {
            'excellent': 0.75,  # –û—Ç–ª–∏—á–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å
            'good': 0.65,       # –•–æ—Ä–æ—à–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å
            'acceptable': 0.55, # –ü—Ä–∏–µ–º–ª–µ–º–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å
            'poor': 0.45        # –ü–ª–æ—Ö–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å
        }
        
        self.confidence_thresholds = {
            'high': 0.8,        # –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            'medium': 0.6,      # –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            'low': 0.4          # –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        }
    
    def analyze_validation_results(self, validation_results: Dict[str, Any]) -> Dict[str, Any]:
        """
        –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        
        Args:
            validation_results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏
            
        Returns:
            –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
        """
        try:
            logger.info("üîç –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
            
            # –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
            basic_analysis = self._analyze_basic_metrics(validation_results)
            
            # –ê–Ω–∞–ª–∏–∑ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
            symbol_analysis = self._analyze_symbol_performance(validation_results)
            
            # –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫
            error_analysis = self._analyze_errors(validation_results)
            
            # –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
            pattern_analysis = self._analyze_patterns(validation_results)
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            recommendations = self._generate_recommendations(
                basic_analysis, symbol_analysis, error_analysis, pattern_analysis
            )
            
            # –û—Ü–µ–Ω–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É
            production_readiness = self._assess_production_readiness(
                basic_analysis, symbol_analysis
            )
            
            analysis_result = {
                'basic_analysis': basic_analysis,
                'symbol_analysis': symbol_analysis,
                'error_analysis': error_analysis,
                'pattern_analysis': pattern_analysis,
                'recommendations': recommendations,
                'production_readiness': production_readiness,
                'analysis_timestamp': datetime.now().isoformat()
            }
            
            logger.info("‚úÖ –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω")
            return analysis_result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {str(e)}")
            return {
                'error': str(e),
                'analysis_timestamp': datetime.now().isoformat()
            }
    
    def _analyze_basic_metrics(self, results: Dict[str, Any]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –±–∞–∑–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫"""
        try:
            overall_accuracy = results.get('overall_accuracy', 0)
            total_samples = results.get('total_samples', 0)
            symbol_results = results.get('symbol_results', [])
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            accuracies = [sr.get('accuracy', 0) for sr in symbol_results if sr.get('success', False)]
            confidences = [sr.get('avg_confidence', 0) for sr in symbol_results if sr.get('success', False)]
            
            analysis = {
                'overall_accuracy': overall_accuracy,
                'accuracy_grade': self._grade_accuracy(overall_accuracy),
                'total_samples': total_samples,
                'symbols_tested': len(symbol_results),
                'successful_symbols': len([sr for sr in symbol_results if sr.get('success', False)]),
                'accuracy_stats': {
                    'mean': np.mean(accuracies) if accuracies else 0,
                    'std': np.std(accuracies) if accuracies else 0,
                    'min': np.min(accuracies) if accuracies else 0,
                    'max': np.max(accuracies) if accuracies else 0
                },
                'confidence_stats': {
                    'mean': np.mean(confidences) if confidences else 0,
                    'std': np.std(confidences) if confidences else 0,
                    'min': np.min(confidences) if confidences else 0,
                    'max': np.max(confidences) if confidences else 0
                }
            }
            
            return analysis
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –±–∞–∑–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫: {str(e)}")
            return {}
    
    def _analyze_symbol_performance(self, results: Dict[str, Any]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ —Å–∏–º–≤–æ–ª–∞–º"""
        try:
            symbol_results = results.get('symbol_results', [])
            
            symbol_analysis = {
                'best_performing': None,
                'worst_performing': None,
                'consistent_performers': [],
                'inconsistent_performers': [],
                'symbol_details': {}
            }
            
            if not symbol_results:
                return symbol_analysis
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª
            for symbol_result in symbol_results:
                if not symbol_result.get('success', False):
                    continue
                
                symbol = symbol_result.get('symbol', 'Unknown')
                accuracy = symbol_result.get('accuracy', 0)
                confidence = symbol_result.get('avg_confidence', 0)
                samples = symbol_result.get('samples_tested', 0)
                
                symbol_analysis['symbol_details'][symbol] = {
                    'accuracy': accuracy,
                    'confidence': confidence,
                    'samples': samples,
                    'grade': self._grade_accuracy(accuracy),
                    'confidence_level': self._grade_confidence(confidence),
                    'reliability': self._assess_reliability(accuracy, confidence, samples)
                }
            
            # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–π –∏ —Ö—É–¥—à–∏–π —Å–∏–º–≤–æ–ª—ã
            if symbol_analysis['symbol_details']:
                best_symbol = max(
                    symbol_analysis['symbol_details'].items(),
                    key=lambda x: x[1]['accuracy']
                )
                worst_symbol = min(
                    symbol_analysis['symbol_details'].items(),
                    key=lambda x: x[1]['accuracy']
                )
                
                symbol_analysis['best_performing'] = {
                    'symbol': best_symbol[0],
                    'accuracy': best_symbol[1]['accuracy'],
                    'grade': best_symbol[1]['grade']
                }
                
                symbol_analysis['worst_performing'] = {
                    'symbol': worst_symbol[0],
                    'accuracy': worst_symbol[1]['accuracy'],
                    'grade': worst_symbol[1]['grade']
                }
                
                # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã –ø–æ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                for symbol, details in symbol_analysis['symbol_details'].items():
                    if details['reliability'] == 'high':
                        symbol_analysis['consistent_performers'].append(symbol)
                    elif details['reliability'] == 'low':
                        symbol_analysis['inconsistent_performers'].append(symbol)
            
            return symbol_analysis
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ —Å–∏–º–≤–æ–ª–∞–º: {str(e)}")
            return {}
    
    def _analyze_errors(self, results: Dict[str, Any]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫ –º–æ–¥–µ–ª–∏"""
        try:
            symbol_results = results.get('symbol_results', [])
            
            error_analysis = {
                'common_error_patterns': [],
                'error_distribution': {},
                'confidence_vs_accuracy': {},
                'samples_vs_accuracy': {}
            }
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
            for symbol_result in symbol_results:
                if not symbol_result.get('success', False):
                    continue
                
                symbol = symbol_result.get('symbol', 'Unknown')
                accuracy = symbol_result.get('accuracy', 0)
                confidence = symbol_result.get('avg_confidence', 0)
                samples = symbol_result.get('samples_tested', 0)
                error_analysis_data = symbol_result.get('error_analysis', {})
                
                # –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫
                error_rate = 1 - accuracy
                error_analysis['error_distribution'][symbol] = {
                    'error_rate': error_rate,
                    'error_type': self._classify_error_type(error_rate, confidence)
                }
                
                # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —Ç–æ—á–Ω–æ—Å—Ç–∏
                error_analysis['confidence_vs_accuracy'][symbol] = {
                    'confidence': confidence,
                    'accuracy': accuracy,
                    'correlation': self._assess_confidence_accuracy_correlation(confidence, accuracy)
                }
                
                # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–±—Ä–∞–∑—Ü–æ–≤ –∏ —Ç–æ—á–Ω–æ—Å—Ç–∏
                error_analysis['samples_vs_accuracy'][symbol] = {
                    'samples': samples,
                    'accuracy': accuracy,
                    'sufficiency': self._assess_sample_sufficiency(samples, accuracy)
                }
            
            # –í—ã—è–≤–ª—è–µ–º –æ–±—â–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –æ—à–∏–±–æ–∫
            error_analysis['common_error_patterns'] = self._identify_common_error_patterns(
                error_analysis['error_distribution']
            )
            
            return error_analysis
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ—à–∏–±–æ–∫: {str(e)}")
            return {}
    
    def _analyze_patterns(self, results: Dict[str, Any]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
        try:
            symbol_results = results.get('symbol_results', [])
            
            pattern_analysis = {
                'pattern_frequency': {},
                'pattern_effectiveness': {},
                'pattern_coverage': {},
                'recommended_patterns': []
            }
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            all_patterns = []
            for symbol_result in symbol_results:
                if not symbol_result.get('success', False):
                    continue
                
                patterns = symbol_result.get('patterns_detected', [])
                all_patterns.extend(patterns)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–∞—Å—Ç–æ—Ç—É –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
            if all_patterns:
                from collections import Counter
                pattern_counts = Counter(all_patterns)
                pattern_analysis['pattern_frequency'] = dict(pattern_counts)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∏–±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
                pattern_analysis['recommended_patterns'] = self._identify_effective_patterns(
                    pattern_counts, symbol_results
                )
            
            return pattern_analysis
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {str(e)}")
            return {}
    
    def _generate_recommendations(self, basic_analysis: Dict, symbol_analysis: Dict, 
                                error_analysis: Dict, pattern_analysis: Dict) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            recommendations = []
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—â–µ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
            overall_accuracy = basic_analysis.get('overall_accuracy', 0)
            if overall_accuracy < self.accuracy_thresholds['acceptable']:
                recommendations.append(
                    "üî¥ –ö–†–ò–¢–ò–ß–ù–û: –û–±—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ –Ω–∏–∂–µ –ø—Ä–∏–µ–º–ª–µ–º–æ–≥–æ —É—Ä–æ–≤–Ω—è. "
                    "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏."
                )
            elif overall_accuracy < self.accuracy_thresholds['good']:
                recommendations.append(
                    "üü° –í–ù–ò–ú–ê–ù–ò–ï: –¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ –ø—Ä–∏–µ–º–ª–µ–º–∞, –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–ª—É—á—à–µ–Ω–∞. "
                    "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–æ–±—É—á–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–∞—Ö."
                )
            else:
                recommendations.append(
                    "üü¢ –û–¢–õ–ò–ß–ù–û: –ú–æ–¥–µ–ª—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ö–æ—Ä–æ—à—É—é –æ–±–æ–±—â–∞—é—â—É—é —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å. "
                    "–ì–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ —Ç–æ—Ä–≥–æ–≤–ª–µ."
                )
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
            inconsistent_symbols = symbol_analysis.get('inconsistent_performers', [])
            if inconsistent_symbols:
                recommendations.append(
                    f"‚ö†Ô∏è –ù–µ—Å—Ç–∞–±–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–∞ —Å–∏–º–≤–æ–ª–∞—Ö: {', '.join(inconsistent_symbols)}. "
                    "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ —ç—Ç–∏—Ö –∞–∫—Ç–∏–≤–∞—Ö."
                )
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –æ—à–∏–±–æ–∫
            high_error_symbols = [
                symbol for symbol, data in error_analysis.get('error_distribution', {}).items()
                if data.get('error_rate', 0) > 0.4
            ]
            if high_error_symbols:
                recommendations.append(
                    f"üîß –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –æ—à–∏–±–æ–∫ –Ω–∞ —Å–∏–º–≤–æ–ª–∞—Ö: {', '.join(high_error_symbols)}. "
                    "–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è —ç—Ç–∏—Ö –∞–∫—Ç–∏–≤–æ–≤."
                )
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
            recommended_patterns = pattern_analysis.get('recommended_patterns', [])
            if recommended_patterns:
                recommendations.append(
                    f"üìà –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã: {', '.join(recommended_patterns[:3])}. "
                    "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ñ–æ–∫—É—Å –Ω–∞ —ç—Ç–∏—Ö —Ç–∏–ø–∞—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏."
                )
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –¥–∞–Ω–Ω—ã—Ö
            total_samples = basic_analysis.get('total_samples', 0)
            if total_samples < 1000:
                recommendations.append(
                    "üìä –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–≤–µ–ª–∏—á–∏—Ç—å –ø–µ—Ä–∏–æ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è "
                    "–∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–π –æ—Ü–µ–Ω–∫–∏."
                )
            
            return recommendations
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {str(e)}")
            return ["–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"]
    
    def _assess_production_readiness(self, basic_analysis: Dict, symbol_analysis: Dict) -> Dict[str, Any]:
        """–û—Ü–µ–Ω–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É"""
        try:
            overall_accuracy = basic_analysis.get('overall_accuracy', 0)
            successful_symbols = basic_analysis.get('successful_symbols', 0)
            total_symbols = basic_analysis.get('symbols_tested', 0)
            inconsistent_performers = len(symbol_analysis.get('inconsistent_performers', []))
            
            # –ö—Ä–∏—Ç–µ—Ä–∏–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
            accuracy_ready = overall_accuracy >= self.accuracy_thresholds['good']
            stability_ready = inconsistent_performers <= total_symbols * 0.3  # –ù–µ –±–æ–ª–µ–µ 30% –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö
            coverage_ready = successful_symbols >= total_symbols * 0.8  # –ù–µ –º–µ–Ω–µ–µ 80% —É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
            
            # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
            readiness_score = sum([accuracy_ready, stability_ready, coverage_ready]) / 3
            
            if readiness_score >= 0.8:
                readiness_level = "production_ready"
                readiness_message = "‚úÖ –ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ"
            elif readiness_score >= 0.6:
                readiness_level = "near_ready"
                readiness_message = "‚ö†Ô∏è –ú–æ–¥–µ–ª—å –±–ª–∏–∑–∫–∞ –∫ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏, —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–±–æ–ª—å—à–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞"
            elif readiness_score >= 0.4:
                readiness_level = "needs_improvement"
                readiness_message = "üîß –ú–æ–¥–µ–ª—å —Ç—Ä–µ–±—É–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π"
            else:
                readiness_level = "not_ready"
                readiness_message = "‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É"
            
            return {
                'readiness_level': readiness_level,
                'readiness_score': readiness_score,
                'readiness_message': readiness_message,
                'criteria': {
                    'accuracy_ready': accuracy_ready,
                    'stability_ready': stability_ready,
                    'coverage_ready': coverage_ready
                },
                'overall_accuracy': overall_accuracy,
                'inconsistent_symbols_count': inconsistent_performers,
                'success_rate': successful_symbols / total_symbols if total_symbols > 0 else 0
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É: {str(e)}")
            return {
                'readiness_level': 'unknown',
                'readiness_score': 0,
                'readiness_message': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏'
            }
    
    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    
    def _grade_accuracy(self, accuracy: float) -> str:
        """–û—Ü–µ–Ω–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏"""
        if accuracy >= self.accuracy_thresholds['excellent']:
            return 'excellent'
        elif accuracy >= self.accuracy_thresholds['good']:
            return 'good'
        elif accuracy >= self.accuracy_thresholds['acceptable']:
            return 'acceptable'
        else:
            return 'poor'
    
    def _grade_confidence(self, confidence: float) -> str:
        """–û—Ü–µ–Ω–∫–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"""
        if confidence >= self.confidence_thresholds['high']:
            return 'high'
        elif confidence >= self.confidence_thresholds['medium']:
            return 'medium'
        else:
            return 'low'
    
    def _assess_reliability(self, accuracy: float, confidence: float, samples: int) -> str:
        """–û—Ü–µ–Ω–∫–∞ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏"""
        if accuracy >= 0.7 and confidence >= 0.7 and samples >= 100:
            return 'high'
        elif accuracy >= 0.6 and confidence >= 0.6 and samples >= 50:
            return 'medium'
        else:
            return 'low'
    
    def _classify_error_type(self, error_rate: float, confidence: float) -> str:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–∏–ø–∞ –æ—à–∏–±–æ–∫"""
        if error_rate > 0.4:
            return 'high_error'
        elif error_rate > 0.3:
            return 'medium_error'
        elif confidence < 0.5:
            return 'low_confidence'
        else:
            return 'acceptable'
    
    def _assess_confidence_accuracy_correlation(self, confidence: float, accuracy: float) -> str:
        """–û—Ü–µ–Ω–∫–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —Ç–æ—á–Ω–æ—Å—Ç–∏"""
        if abs(confidence - accuracy) < 0.1:
            return 'well_calibrated'
        elif confidence > accuracy + 0.2:
            return 'overconfident'
        elif confidence < accuracy - 0.2:
            return 'underconfident'
        else:
            return 'moderate_correlation'
    
    def _assess_sample_sufficiency(self, samples: int, accuracy: float) -> str:
        """–û—Ü–µ–Ω–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ –≤—ã–±–æ—Ä–∫–∏"""
        if samples >= 500:
            return 'sufficient'
        elif samples >= 100:
            return 'moderate'
        else:
            return 'insufficient'
    
    def _identify_common_error_patterns(self, error_distribution: Dict) -> List[str]:
        """–í—ã—è–≤–ª–µ–Ω–∏–µ –æ–±—â–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –æ—à–∏–±–æ–∫"""
        patterns = []
        
        high_error_symbols = [
            symbol for symbol, data in error_distribution.items()
            if data.get('error_rate', 0) > 0.4
        ]
        
        if high_error_symbols:
            patterns.append(f"–í—ã—Å–æ–∫–∏–µ –æ—à–∏–±–∫–∏ –Ω–∞ —Å–∏–º–≤–æ–ª–∞—Ö: {', '.join(high_error_symbols)}")
        
        return patterns
    
    def _identify_effective_patterns(self, pattern_counts: Dict, symbol_results: List) -> List[str]:
        """–í—ã—è–≤–ª–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        sorted_patterns = sorted(pattern_counts.items(), key=lambda x: x[1], reverse=True)
        return [pattern for pattern, count in sorted_patterns[:5]]


def analyze_validation_results(validation_results: Dict[str, Any]) -> Dict[str, Any]:
    """
    –£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    
    Args:
        validation_results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏
        
    Returns:
        –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
    """
    analyzer = ValidationAnalyzer()
    return analyzer.analyze_validation_results(validation_results)
