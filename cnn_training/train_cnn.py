#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è CNN –º–æ–¥–µ–ª–µ–π –Ω–∞ –¥–∞–Ω–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python cnn_training/train_cnn.py --symbol BTCUSDT --timeframe 5m --model_type prediction
    python cnn_training/train_cnn.py --symbols BTCUSDT,ETHUSDT --timeframes 5m,15m,1h --model_type multiframe
"""

import argparse
import os
import sys
from typing import List

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from cnn_training.config import CNNTrainingConfig
from cnn_training.trainer import CNNTrainer


def parse_arguments():
    """–ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    parser = argparse.ArgumentParser(description="–û–±—É—á–µ–Ω–∏–µ CNN –º–æ–¥–µ–ª–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç")
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    parser.add_argument("--symbols", type=str, default="BTCUSDT,ETHUSDT,TONUSDT",
                       help="–°–∏–º–≤–æ–ª—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)")
    parser.add_argument("--timeframes", type=str, default="5m,15m,1h",
                       help="–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ—Ä–µ–π–º—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)")
    parser.add_argument("--model_type", type=str, default="prediction",
                       choices=["single", "multiframe", "prediction"],
                       help="–¢–∏–ø –º–æ–¥–µ–ª–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è
    parser.add_argument("--batch_size", type=int, default=64,
                       help="–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞")
    parser.add_argument("--learning_rate", type=float, default=0.001,
                       help="–°–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è")
    parser.add_argument("--num_epochs", type=int, default=100,
                       help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–æ—Ö")
    parser.add_argument("--sequence_length", type=int, default=50,
                       help="–î–ª–∏–Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è CNN")
    parser.add_argument("--label_scheme", type=str, default="binary", choices=["binary", "ternary"],
                       help="–°—Ö–µ–º–∞ –º–µ—Ç–æ–∫: binary (0/1) –∏–ª–∏ ternary (0/1/2)")
    parser.add_argument("--class_balance", type=str, default="auto", choices=["auto", "none"],
                       help="–ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –∫–ª–∞—Å—Å–æ–≤: auto –≤–∫–ª—é—á–∞–µ—Ç –≤–µ—Å–∞/—Å–∞–º–ø–ª–µ—Ä")
    parser.add_argument("--label_smoothing", type=float, default=0.05,
                       help="Label smoothing –¥–ª—è CrossEntropyLoss")
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    parser.add_argument("--prediction_horizon", type=int, default=1,
                       help="–ì–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π)")
    parser.add_argument("--prediction_threshold", type=float, default=0.01,
                       help="–ü–æ—Ä–æ–≥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–Ω–∞—á–∏–º–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã")
    parser.add_argument("--label_noise", type=float, default=0.0,
                       help="–î–æ–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —à—É–º–∞ –≤ –º–µ—Ç–∫–∞—Ö (0 ‚Äî –æ—Ç–∫–ª—é—á–µ–Ω–æ)")
    
    # –ü—É—Ç–∏
    parser.add_argument("--data_dir", type=str, default="temp/binance_data",
                       help="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏")
    parser.add_argument("--model_save_dir", type=str, default="cnn_training/models",
                       help="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π")
    
    # –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
    parser.add_argument("--device", type=str, default="auto",
                       choices=["auto", "cuda", "cpu"],
                       help="–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    parser.add_argument("--use_wandb", action="store_true",
                       help="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Weights & Biases –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
    parser.add_argument("--wandb_project", type=str, default="crypto-cnn-training",
                       help="–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –≤ Wandb")
    
    return parser.parse_args()


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    args = parse_arguments()
    
    # –ü–∞—Ä—Å–∏–º —Å–ø–∏—Å–∫–∏ —Å–∏–º–≤–æ–ª–æ–≤ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ—Ä–µ–π–º–æ–≤
    symbols = [s.strip() for s in args.symbols.split(",")]
    timeframes = [t.strip() for t in args.timeframes.split(",")]
    
    print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ CNN –º–æ–¥–µ–ª–∏")
    print(f"üìä –°–∏–º–≤–æ–ª—ã: {symbols}")
    print(f"‚è∞ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ—Ä–µ–π–º—ã: {timeframes}")
    print(f"ü§ñ –¢–∏–ø –º–æ–¥–µ–ª–∏: {args.model_type}")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = CNNTrainingConfig(
        symbols=symbols,
        timeframes=timeframes,
        batch_size=args.batch_size,
        learning_rate=args.learning_rate,
        num_epochs=args.num_epochs,
        sequence_length=args.sequence_length,
        label_scheme=args.label_scheme,
        class_balance=args.class_balance,
        label_smoothing=args.label_smoothing,
        prediction_horizon=args.prediction_horizon,
        prediction_threshold=args.prediction_threshold,
        label_noise=args.label_noise,
        data_dir=args.data_dir,
        model_save_dir=args.model_save_dir,
        device=args.device,
        use_wandb=args.use_wandb,
        wandb_project=args.wandb_project
    )
    
    # –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–Ω–µ—Ä
    trainer = CNNTrainer(config)
    
    try:
        if args.model_type == "single":
            # –û–±—É—á–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –∏ —Ñ—Ä–µ–π–º–∞
            for symbol in symbols:
                for timeframe in timeframes:
                    print(f"\nüéØ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è {symbol} {timeframe}")
                    result = trainer.train_single_model(symbol, timeframe, "prediction")
                    
                    if result:
                        print(f"‚úÖ –û–±—É—á–µ–Ω–∏–µ {symbol} {timeframe} –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
                        print(f"üìà –õ—É—á—à–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {result['best_val_accuracy']:.2f}%")
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è {symbol} {timeframe}")
        
        elif args.model_type == "multiframe":
            # –û–±—É—á–µ–Ω–∏–µ –º—É–ª—å—Ç–∏—Ñ—Ä–µ–π–º–æ–≤–æ–π –º–æ–¥–µ–ª–∏
            print(f"\nüéØ –û–±—É—á–µ–Ω–∏–µ –º—É–ª—å—Ç–∏—Ñ—Ä–µ–π–º–æ–≤–æ–π –º–æ–¥–µ–ª–∏")
            result = trainer.train_multiframe_model(symbols)
            
            if result:
                print(f"‚úÖ –û–±—É—á–µ–Ω–∏–µ –º—É–ª—å—Ç–∏—Ñ—Ä–µ–π–º–æ–≤–æ–π –º–æ–¥–µ–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
                print(f"üìà –õ—É—á—à–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {result['best_val_accuracy']:.2f}%")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –º—É–ª—å—Ç–∏—Ñ—Ä–µ–π–º–æ–≤–æ–π –º–æ–¥–µ–ª–∏")
        
        elif args.model_type == "prediction":
            # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
            for symbol in symbols:
                print(f"\nüéØ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è {symbol}")
                result = trainer.train_single_model(symbol, timeframes[0], "prediction")
                
                if result:
                    print(f"‚úÖ –û–±—É—á–µ–Ω–∏–µ {symbol} –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
                    print(f"üìà –õ—É—á—à–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {result['best_val_accuracy']:.2f}%")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è {symbol}")
    
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –û–±—É—á–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º Wandb –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
        if trainer.wandb:
            trainer.wandb.finish()
    
    print("\nüèÅ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


if __name__ == "__main__":
    main()
