#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è CNN Training Module

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
1. –û–±—É—á–µ–Ω–∏–µ CNN –º–æ–¥–µ–ª–∏ –Ω–∞ –¥–∞–Ω–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
2. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–∑ –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
3. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å DQN —Å—Ä–µ–¥–æ–π
"""

import numpy as np
import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from cnn_training.config import CNNTrainingConfig
from cnn_training.trainer import CNNTrainer
from cnn_training.feature_extractor import create_cnn_wrapper
from cnn_training.data_loader import CryptoDataLoader


def example_training():
    """–ü—Ä–∏–º–µ—Ä –æ–±—É—á–µ–Ω–∏—è CNN –º–æ–¥–µ–ª–∏"""
    print("üöÄ –ü—Ä–∏–º–µ—Ä –æ–±—É—á–µ–Ω–∏—è CNN –º–æ–¥–µ–ª–∏")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = CNNTrainingConfig(
        symbols=["BTCUSDT"],
        timeframes=["5m"],
        sequence_length=20,  # –£–º–µ–Ω—å—à–∞–µ–º –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        batch_size=32,
        learning_rate=0.001,
        num_epochs=5,  # –£–º–µ–Ω—å—à–∞–µ–º –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        prediction_horizon=3,
        prediction_threshold=0.01,
        output_features=32,
        validation_split=0.2
    )
    
    print(f"üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {config.symbols}, {config.timeframes}")
    print(f"üéØ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: seq_len={config.sequence_length}, epochs={config.num_epochs}")
    
    # –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–Ω–µ—Ä
    trainer = CNNTrainer(config)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
    data_loader = CryptoDataLoader(config)
    df = data_loader.load_symbol_data("BTCUSDT", "5m")
    
    if df is None:
        print("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–æ–∑–¥–∞–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏...")
        
        # –°–æ–∑–¥–∞–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        np.random.seed(42)
        n_samples = 1000
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º OHLCV –¥–∞–Ω–Ω—ã–µ
        base_price = 50000
        prices = []
        current_price = base_price
        
        for i in range(n_samples):
            # –ü—Ä–æ—Å—Ç–æ–µ —Å–ª—É—á–∞–π–Ω–æ–µ –±–ª—É–∂–¥–∞–Ω–∏–µ —Å —Ç—Ä–µ–Ω–¥–æ–º
            change = np.random.normal(0, 0.02)  # 2% –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            current_price *= (1 + change)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º OHLCV
            high = current_price * (1 + abs(np.random.normal(0, 0.01)))
            low = current_price * (1 - abs(np.random.normal(0, 0.01)))
            open_price = current_price * (1 + np.random.normal(0, 0.005))
            close_price = current_price
            volume = np.random.uniform(100, 1000)
            
            prices.append([open_price, high, low, close_price, volume])
        
        # –°–æ–∑–¥–∞–µ–º DataFrame
        import pandas as pd
        df = pd.DataFrame(prices, columns=['open', 'high', 'low', 'close', 'volume'])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        os.makedirs(config.data_dir, exist_ok=True)
        df.to_csv(os.path.join(config.data_dir, "btcusdt_5m.csv"), index=False)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω—ã —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ: {len(df)} –∑–∞–ø–∏—Å–µ–π")
    
    # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
    try:
        result = trainer.train_single_model("BTCUSDT", "5m", "prediction")
        
        if result:
            print(f"‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            print(f"üìà –õ—É—á—à–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {result['best_val_accuracy']:.2f}%")
            print(f"üìâ –§–∏–Ω–∞–ª—å–Ω–∞—è train loss: {result['train_losses'][-1]:.4f}")
            print(f"üìâ –§–∏–Ω–∞–ª—å–Ω–∞—è val loss: {result['val_losses'][-1]:.4f}")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è")
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è: {e}")


def example_feature_extraction():
    """–ü—Ä–∏–º–µ—Ä –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
    print("\nüîß –ü—Ä–∏–º–µ—Ä –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = CNNTrainingConfig(
        symbols=["BTCUSDT"],
        timeframes=["5m"],
        sequence_length=20,
        output_features=32
    )
    
    # –°–æ–∑–¥–∞–µ–º –æ–±–µ—Ä—Ç–∫—É –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    try:
        cnn_wrapper = create_cnn_wrapper(config)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        np.random.seed(42)
        test_data = {
            "5m": np.random.randn(20, 5)  # 20 —Å–≤–µ—á–µ–π, 5 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ OHLCV
        }
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
        features = cnn_wrapper.get_cnn_features("BTCUSDT", test_data)
        
        print(f"‚úÖ CNN –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏–∑–≤–ª–µ—á–µ–Ω—ã: {features.shape}")
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:")
        print(f"   –°—Ä–µ–¥–Ω–µ–µ: {np.mean(features):.4f}")
        print(f"   –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {np.std(features):.4f}")
        print(f"   –ú–∏–Ω: {np.min(features):.4f}")
        print(f"   –ú–∞–∫—Å: {np.max(features):.4f}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–∞
        is_available = cnn_wrapper.feature_extractor.is_available("BTCUSDT", "5m")
        print(f"üîç –≠–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω: {is_available}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {e}")


def example_integration():
    """–ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å DQN"""
    print("\nü§ñ –ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å DQN")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = CNNTrainingConfig(
        symbols=["BTCUSDT"],
        timeframes=["5m"],
        sequence_length=20,
        output_features=32
    )
    
    try:
        # –°–æ–∑–¥–∞–µ–º –æ–±–µ—Ä—Ç–∫—É
        cnn_wrapper = create_cnn_wrapper(config)
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ DQN
        base_state_size = 100  # –†–∞–∑–º–µ—Ä –æ–±—ã—á–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è DQN
        base_state = np.random.randn(base_state_size)
        
        # OHLCV –¥–∞–Ω–Ω—ã–µ –¥–ª—è CNN
        ohlcv_data = {
            "5m": np.random.randn(20, 5)
        }
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        combined_state = cnn_wrapper.get_state_with_cnn("BTCUSDT", base_state, ohlcv_data)
        
        print(f"‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å DQN:")
        print(f"   –†–∞–∑–º–µ—Ä –±–∞–∑–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {base_state.shape}")
        print(f"   –†–∞–∑–º–µ—Ä CNN –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {config.output_features}")
        print(f"   –†–∞–∑–º–µ—Ä –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {combined_state.shape}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞–∑–º–µ—Ä–æ–≤
        expected_size = base_state_size + config.output_features
        assert len(combined_state) == expected_size, f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è: {len(combined_state)} != {expected_size}"
        
        print("‚úÖ –†–∞–∑–º–µ—Ä—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéØ CNN Training Module - –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
    print("=" * 50)
    
    # –ü—Ä–∏–º–µ—Ä –æ–±—É—á–µ–Ω–∏—è
    example_training()
    
    # –ü—Ä–∏–º–µ—Ä –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    example_feature_extraction()
    
    # –ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    example_integration()
    
    print("\nüèÅ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
    print("\nüí° –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
    print("1. –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV")
    print("2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ–¥ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ")
    print("3. –û–±—É—á–∏—Ç–µ CNN –º–æ–¥–µ–ª—å –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
    print("4. –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–π—Ç–µ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –≤ DQN —Å—Ä–µ–¥—É")


if __name__ == "__main__":
    main()
