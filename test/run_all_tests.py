#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ DQN
"""

import sys
import os
import time
sys.path.append('/app')

def run_all_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã DQN"""
    print("üöÄ –ó–ê–ü–£–°–ö –í–°–ï–• –¢–ï–°–¢–û–í DQN")
    print("=" * 60)
    
    start_time = time.time()
    test_results = {}
    overall_success = True
    
    # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
    tests = [
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", "test_configuration", "test_configuration"),
        ("–ù–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å", "test_neural_network", "test_neural_network"),
        ("DQN Solver", "test_dqn_solver", "test_dqn_solver"),
        ("–û–±—Ä–∞–±–æ—Ç–∫–∞ NaN", "test_nan_handling", "test_nan_handling"),
        ("GPU Replay Buffer", "test_gpu_replay", "test_replay_buffer_performance"),
        ("–ü—Ä–µ–¥–≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π", "test_precomputed_states", "test_precomputed_states"),
        ("torch.compile", "test_torch_compile", "test_torch_compile")
    ]
    
    for i, (test_name, module_name, function_name) in enumerate(tests, 1):
        print(f"\n{i}Ô∏è‚É£ {test_name}...")
        
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å
            module = __import__(module_name)
            test_function = getattr(module, function_name)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
            if function_name in ["test_replay_buffer_performance", "test_precomputed_states", "test_torch_compile"]:
                # –≠—Ç–∏ —Ç–µ—Å—Ç—ã –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç —Ç–æ–ª—å–∫–æ success
                success = test_function()
                message = "–¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω" if success else "–¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω"
            else:
                # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç (success, message)
                success, message = test_function()
            
            test_results[test_name] = {
                'success': success,
                'message': message,
                'timestamp': time.time()
            }
            
            if success:
                print(f"‚úÖ {test_name}: {message}")
            else:
                print(f"‚ùå {test_name}: {message}")
                overall_success = False
                
        except Exception as e:
            print(f"‚ùå {test_name}: –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞/–≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è - {e}")
            test_results[test_name] = {
                'success': False,
                'message': f"–û—à–∏–±–∫–∞: {str(e)}",
                'timestamp': time.time()
            }
            overall_success = False
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    end_time = time.time()
    duration = end_time - start_time
    
    print("\n" + "=" * 60)
    print("üìä –§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_tests = len(tests)
    passed_tests = sum(1 for result in test_results.values() if result['success'])
    failed_tests = total_tests - passed_tests
    
    print(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.2f} —Å–µ–∫—É–Ω–¥")
    print(f"üìä –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
    print(f"‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ: {failed_tests}")
    print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(passed_tests/total_tests)*100:.1f}%")
    
    if overall_success:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("üöÄ DQN –∞–≥–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        print("‚ö° –í—Å–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print("\n‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´")
        print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
        print("\nüìã –î–ï–¢–ê–õ–ò –ù–ï–£–î–ê–ß–ù–´–• –¢–ï–°–¢–û–í:")
        for test_name, result in test_results.items():
            if not result['success']:
                print(f"   ‚Ä¢ {test_name}: {result['message']}")
    
    print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    if overall_success:
        print("   ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –æ–±—É—á–µ–Ω–∏—é")
        print("   ‚Ä¢ –í—Å–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã")
        print("   ‚Ä¢ –û–∂–∏–¥–∞–µ—Ç—Å—è –≤—ã—Å–æ–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
    else:
        print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
        print("   ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ PyTorch —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å GPU")
    
    return overall_success, test_results

if __name__ == "__main__":
    success, results = run_all_tests()
    
    if success:
        print("\nüéØ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        exit(0)
    else:
        print("\n‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
        exit(1)
