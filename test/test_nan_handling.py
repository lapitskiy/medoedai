#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ NaN –∑–Ω–∞—á–µ–Ω–∏–π
"""

import numpy as np
from agents.vdqn.cfg.vconfig import vDqnConfig
from agents.vdqn.dqnn import DQNN
from agents.vdqn.dqnsolver import DQNSolver

def test_nan_handling():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É NaN –∑–Ω–∞—á–µ–Ω–∏–π"""
    print("\nüõ°Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ NaN –∑–Ω–∞—á–µ–Ω–∏–π...")
    
    try:
        cfg = vDqnConfig()
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å
        model = DQNN(100, 3, (512, 256, 128))
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å NaN –≤—Ö–æ–¥–æ–º
        test_input = np.random.randn(100)
        test_input[0] = np.nan  # –î–æ–±–∞–≤–ª—è–µ–º NaN
        
        print(f"   - –í—Ö–æ–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç NaN: {np.isnan(test_input).any()}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ solver
        solver = DQNSolver(100, 3, load=False)
        
        # –î–æ–ª–∂–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–º–µ–Ω–∏—Ç—å NaN –Ω–∞ –Ω—É–ª–∏
        action = solver.act(test_input)
        print(f"‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –≤—ã–±—Ä–∞–Ω–æ –¥–∞–∂–µ —Å NaN –≤—Ö–æ–¥–æ–º: {action}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ NaN –∑–∞–º–µ–Ω–µ–Ω—ã
        cleaned_input = np.nan_to_num(test_input, nan=0.0)
        print(f"   - NaN –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ –Ω—É–ª–∏: {np.isnan(cleaned_input).any()}")
        
        return True, "–û–±—Ä–∞–±–æ—Ç–∫–∞ NaN –∑–Ω–∞—á–µ–Ω–∏–π –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ NaN: {e}")
        return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ NaN: {str(e)}"

if __name__ == "__main__":
    success, message = test_nan_handling()
    if success:
        print("‚úÖ –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ NaN –ø—Ä–æ–π–¥–µ–Ω!")
    else:
        print(f"‚ùå –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ NaN –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: {message}")
