#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä QGate –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –º–æ–¥–µ–ª–∏
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø–æ—á–µ–º—É –Ω–µ –ø—Ä–æ—Ö–æ–¥—è—Ç qgate —Ñ–∏–ª—å—Ç—Ä—ã
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import pandas as pd
import numpy as np
import json
from datetime import datetime, timedelta
from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker
import matplotlib.pyplot as plt
import seaborn as sns
from typing import Dict, List, Tuple, Any
import warnings
warnings.filterwarnings('ignore')

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
from orm.database import get_db_session
from orm.models import ModelPrediction, Trade, Symbol, OHLCV

class QGateAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä QGate –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –º–æ–¥–µ–ª–∏"""
    
    def __init__(self):
        self.session = get_db_session()
        self.qgate_stats = {}
        self.prediction_stats = {}
        
    def analyze_qgate_performance(self, days_back: int = 7) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ QGate –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π"""
        print(f"üîç –ê–Ω–∞–ª–∏–∑ QGate –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days_back} –¥–Ω–µ–π...")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∑–∞ –ø–µ—Ä–∏–æ–¥
        start_date = datetime.now() - timedelta(days=days_back)
        
        predictions = self.session.query(ModelPrediction).filter(
            ModelPrediction.created_at >= start_date
        ).order_by(ModelPrediction.created_at.desc()).all()
        
        if not predictions:
            print("‚ùå –ù–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
            return {}
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(predictions)} –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        qgate_analysis = {
            'total_predictions': len(predictions),
            'qgate_filtered': 0,
            'qgate_passed': 0,
            'q_values_stats': [],
            'confidence_stats': [],
            'action_distribution': {},
            'qgate_reasons': {},
            'time_analysis': {},
            'symbol_analysis': {}
        }
        
        for pred in predictions:
            # –ü–∞—Ä—Å–∏–º Q-values
            try:
                q_values = json.loads(pred.q_values) if pred.q_values else []
                if q_values:
                    max_q = max(q_values)
                    sorted_q = sorted(q_values, reverse=True)
                    second_q = sorted_q[1] if len(sorted_q) > 1 else sorted_q[0]
                    gap_q = max_q - second_q
                    
                    qgate_analysis['q_values_stats'].append({
                        'max_q': max_q,
                        'gap_q': gap_q,
                        'q_values': q_values
                    })
            except:
                continue
            
            # –ê–Ω–∞–ª–∏–∑ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            if pred.confidence:
                qgate_analysis['confidence_stats'].append(pred.confidence)
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π
            action = pred.action
            if action not in qgate_analysis['action_distribution']:
                qgate_analysis['action_distribution'][action] = 0
            qgate_analysis['action_distribution'][action] += 1
            
            # –ê–Ω–∞–ª–∏–∑ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
            symbol = pred.symbol
            if symbol not in qgate_analysis['symbol_analysis']:
                qgate_analysis['symbol_analysis'][symbol] = {
                    'total': 0,
                    'qgate_filtered': 0,
                    'avg_confidence': 0,
                    'avg_max_q': 0
                }
            
            qgate_analysis['symbol_analysis'][symbol]['total'] += 1
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ QGate
            market_conditions = {}
            if pred.market_conditions:
                try:
                    market_conditions = json.loads(pred.market_conditions)
                except:
                    pass
            
            is_qgate_filtered = market_conditions.get('qgate_filtered', False)
            
            if is_qgate_filtered:
                qgate_analysis['qgate_filtered'] += 1
                qgate_analysis['symbol_analysis'][symbol]['qgate_filtered'] += 1
                
                # –ü—Ä–∏—á–∏–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                reason = market_conditions.get('qgate_reason', 'unknown')
                if reason not in qgate_analysis['qgate_reasons']:
                    qgate_analysis['qgate_reasons'][reason] = 0
                qgate_analysis['qgate_reasons'][reason] += 1
            else:
                qgate_analysis['qgate_passed'] += 1
            
            # –í—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑
            hour = pred.created_at.hour
            if hour not in qgate_analysis['time_analysis']:
                qgate_analysis['time_analysis'][hour] = {'total': 0, 'filtered': 0}
            qgate_analysis['time_analysis'][hour]['total'] += 1
            if is_qgate_filtered:
                qgate_analysis['time_analysis'][hour]['filtered'] += 1
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        if qgate_analysis['q_values_stats']:
            max_q_values = [stat['max_q'] for stat in qgate_analysis['q_values_stats']]
            gap_q_values = [stat['gap_q'] for stat in qgate_analysis['q_values_stats']]
            
            qgate_analysis['q_values_summary'] = {
                'max_q_mean': np.mean(max_q_values),
                'max_q_std': np.std(max_q_values),
                'max_q_min': np.min(max_q_values),
                'max_q_max': np.max(max_q_values),
                'gap_q_mean': np.mean(gap_q_values),
                'gap_q_std': np.std(gap_q_values),
                'gap_q_min': np.min(gap_q_values),
                'gap_q_max': np.max(gap_q_values)
            }
        
        if qgate_analysis['confidence_stats']:
            qgate_analysis['confidence_summary'] = {
                'mean': np.mean(qgate_analysis['confidence_stats']),
                'std': np.std(qgate_analysis['confidence_stats']),
                'min': np.min(qgate_analysis['confidence_stats']),
                'max': np.max(qgate_analysis['confidence_stats'])
            }
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –¥–ª—è —Å–∏–º–≤–æ–ª–æ–≤
        for symbol, stats in qgate_analysis['symbol_analysis'].items():
            if stats['total'] > 0:
                stats['qgate_filter_rate'] = stats['qgate_filtered'] / stats['total']
                stats['avg_confidence'] = np.mean([p.confidence for p in predictions if p.symbol == symbol and p.confidence])
                stats['avg_max_q'] = np.mean([max(json.loads(p.q_values)) for p in predictions if p.symbol == symbol and p.q_values])
        
        return qgate_analysis
    
    def analyze_trading_performance(self, days_back: int = 7) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        print(f"üìà –ê–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days_back} –¥–Ω–µ–π...")
        
        start_date = datetime.now() - timedelta(days=days_back)
        
        trades = self.session.query(Trade).filter(
            Trade.created_at >= start_date
        ).order_by(Trade.created_at.desc()).all()
        
        if not trades:
            print("‚ùå –ù–µ—Ç —Å–¥–µ–ª–æ–∫ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
            return {}
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(trades)} —Å–¥–µ–ª–æ–∫")
        
        trading_analysis = {
            'total_trades': len(trades),
            'successful_trades': 0,
            'failed_trades': 0,
            'action_distribution': {},
            'symbol_distribution': {},
            'pnl_analysis': [],
            'confidence_vs_success': []
        }
        
        for trade in trades:
            # –£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å–¥–µ–ª–∫–∏
            if trade.is_successful:
                trading_analysis['successful_trades'] += 1
            else:
                trading_analysis['failed_trades'] += 1
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –¥–µ–π—Å—Ç–≤–∏—è–º
            action = trade.action
            if action not in trading_analysis['action_distribution']:
                trading_analysis['action_distribution'][action] = 0
            trading_analysis['action_distribution'][action] += 1
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
            symbol = trade.symbol.name if trade.symbol else 'Unknown'
            if symbol not in trading_analysis['symbol_distribution']:
                trading_analysis['symbol_distribution'][symbol] = 0
            trading_analysis['symbol_distribution'][symbol] += 1
            
            # P&L –∞–Ω–∞–ª–∏–∑
            if trade.position_pnl is not None:
                trading_analysis['pnl_analysis'].append(trade.position_pnl)
            
            # –°–≤—è–∑—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —É—Å–ø–µ—Ö–∞
            if trade.confidence is not None:
                trading_analysis['confidence_vs_success'].append({
                    'confidence': trade.confidence,
                    'success': trade.is_successful
                })
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        if trading_analysis['pnl_analysis']:
            pnl_values = trading_analysis['pnl_analysis']
            trading_analysis['pnl_summary'] = {
                'mean': np.mean(pnl_values),
                'std': np.std(pnl_values),
                'min': np.min(pnl_values),
                'max': np.max(pnl_values),
                'positive_count': sum(1 for pnl in pnl_values if pnl > 0),
                'negative_count': sum(1 for pnl in pnl_values if pnl < 0)
            }
        
        trading_analysis['success_rate'] = trading_analysis['successful_trades'] / trading_analysis['total_trades'] if trading_analysis['total_trades'] > 0 else 0
        
        return trading_analysis
    
    def get_current_qgate_thresholds(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –ø–æ—Ä–æ–≥–æ–≤ QGate"""
        import os
        
        thresholds = {
            'QGATE_MAXQ': os.environ.get('QGATE_MAXQ', 'not_set'),
            'QGATE_GAPQ': os.environ.get('QGATE_GAPQ', 'not_set'),
            'QGATE_SELL_MAXQ': os.environ.get('QGATE_SELL_MAXQ', 'not_set'),
            'QGATE_SELL_GAPQ': os.environ.get('QGATE_SELL_GAPQ', 'not_set')
        }
        
        return thresholds
    
    def suggest_qgate_improvements(self, qgate_analysis: Dict[str, Any]) -> List[str]:
        """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é QGate –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"""
        suggestions = []
        
        if not qgate_analysis:
            return ["‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"]
        
        # –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫ Q-values
        if 'q_values_summary' in qgate_analysis:
            qv = qgate_analysis['q_values_summary']
            
            # –ï—Å–ª–∏ —Å—Ä–µ–¥–Ω–∏–π max_q –æ—á–µ–Ω—å –Ω–∏–∑–∫–∏–π
            if qv['max_q_mean'] < 0.1:
                suggestions.append(f"üî¥ –ö—Ä–∏—Ç–∏—á–Ω–æ –Ω–∏–∑–∫–∏–π —Å—Ä–µ–¥–Ω–∏–π max_q: {qv['max_q_mean']:.3f}. –ú–æ–¥–µ–ª—å –Ω–µ —É–≤–µ—Ä–µ–Ω–∞ –≤ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è—Ö.")
            
            # –ï—Å–ª–∏ gap_q –æ—á–µ–Ω—å –º–∞–ª
            if qv['gap_q_mean'] < 0.01:
                suggestions.append(f"üî¥ –ö—Ä–∏—Ç–∏—á–Ω–æ –º–∞–ª—ã–π —Å—Ä–µ–¥–Ω–∏–π gap_q: {qv['gap_q_mean']:.3f}. –ú–æ–¥–µ–ª—å –Ω–µ —Ä–∞–∑–ª–∏—á–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è.")
            
            # –ï—Å–ª–∏ max_q –∏–º–µ–µ—Ç –±–æ–ª—å—à–æ–π —Ä–∞–∑–±—Ä–æ—Å
            if qv['max_q_std'] > qv['max_q_mean']:
                suggestions.append(f"üü° –í—ã—Å–æ–∫–∞—è –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å max_q (std={qv['max_q_std']:.3f} > mean={qv['max_q_mean']:.3f})")
        
        # –ê–Ω–∞–ª–∏–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        total = qgate_analysis['total_predictions']
        filtered = qgate_analysis['qgate_filtered']
        filter_rate = filtered / total if total > 0 else 0
        
        if filter_rate > 0.8:
            suggestions.append(f"üî¥ –°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è QGate: {filter_rate:.1%}. –ü–æ—Ä–æ–≥–∏ —Å–ª–∏—à–∫–æ–º —Å—Ç—Ä–æ–≥–∏–µ.")
        elif filter_rate < 0.1:
            suggestions.append(f"üü° –°–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è QGate: {filter_rate:.1%}. –ü–æ—Ä–æ–≥–∏ —Å–ª–∏—à–∫–æ–º –º—è–≥–∫–∏–µ.")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
        for symbol, stats in qgate_analysis['symbol_analysis'].items():
            if stats['total'] > 5:  # –¢–æ–ª—å–∫–æ –¥–ª—è —Å–∏–º–≤–æ–ª–æ–≤ —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–∞–Ω–Ω—ã—Ö
                filter_rate = stats['qgate_filter_rate']
                if filter_rate > 0.9:
                    suggestions.append(f"üî¥ {symbol}: –∫—Ä–∏—Ç–∏—á–Ω–æ –≤—ã—Å–æ–∫–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è {filter_rate:.1%}")
                elif filter_rate < 0.1:
                    suggestions.append(f"üü° {symbol}: –æ—á–µ–Ω—å –Ω–∏–∑–∫–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è {filter_rate:.1%}")
        
        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏—á–∏–Ω —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        if qgate_analysis['qgate_reasons']:
            most_common_reason = max(qgate_analysis['qgate_reasons'].items(), key=lambda x: x[1])
            suggestions.append(f"üìä –ù–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç–∞—è –ø—Ä–∏—á–∏–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {most_common_reason[0]} ({most_common_reason[1]} —Ä–∞–∑)")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ—Ä–æ–≥–∞–º
        if 'q_values_summary' in qgate_analysis:
            qv = qgate_analysis['q_values_summary']
            suggestions.append(f"üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø–æ—Ä–æ–≥–∏:")
            suggestions.append(f"   QGATE_MAXQ: {qv['max_q_mean'] * 0.7:.3f} (70% –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ max_q)")
            suggestions.append(f"   QGATE_GAPQ: {qv['gap_q_mean'] * 0.5:.3f} (50% –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ gap_q)")
        
        return suggestions
    
    def print_analysis_report(self, qgate_analysis: Dict[str, Any], trading_analysis: Dict[str, Any]):
        """–í—ã–≤–æ–¥ –æ—Ç—á–µ—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞"""
        print("\n" + "="*80)
        print("üìä –û–¢–ß–ï–¢ –ê–ù–ê–õ–ò–ó–ê QGATE –ò –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–ô")
        print("="*80)
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\nüìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"  –í—Å–µ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {qgate_analysis.get('total_predictions', 0)}")
        print(f"  –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ QGate: {qgate_analysis.get('qgate_filtered', 0)}")
        print(f"  –ü—Ä–æ—à–ª–æ QGate: {qgate_analysis.get('qgate_passed', 0)}")
        print(f"  –ü—Ä–æ—Ü–µ–Ω—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {qgate_analysis.get('qgate_filtered', 0) / max(qgate_analysis.get('total_predictions', 1), 1) * 100:.1f}%")
        
        # Q-values —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if 'q_values_summary' in qgate_analysis:
            qv = qgate_analysis['q_values_summary']
            print(f"\nüéØ Q-VALUES –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            print(f"  –°—Ä–µ–¥–Ω–∏–π max_q: {qv['max_q_mean']:.3f} ¬± {qv['max_q_std']:.3f}")
            print(f"  –î–∏–∞–ø–∞–∑–æ–Ω max_q: [{qv['max_q_min']:.3f}, {qv['max_q_max']:.3f}]")
            print(f"  –°—Ä–µ–¥–Ω–∏–π gap_q: {qv['gap_q_mean']:.3f} ¬± {qv['gap_q_std']:.3f}")
            print(f"  –î–∏–∞–ø–∞–∑–æ–Ω gap_q: [{qv['gap_q_min']:.3f}, {qv['gap_q_max']:.3f}]")
        
        # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        if 'confidence_summary' in qgate_analysis:
            conf = qgate_analysis['confidence_summary']
            print(f"\nüéØ –£–í–ï–†–ï–ù–ù–û–°–¢–¨ –ú–û–î–ï–õ–ò:")
            print(f"  –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {conf['mean']:.1f}% ¬± {conf['std']:.1f}%")
            print(f"  –î–∏–∞–ø–∞–∑–æ–Ω: [{conf['min']:.1f}%, {conf['max']:.1f}%]")
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π
        print(f"\nüéØ –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –î–ï–ô–°–¢–í–ò–ô:")
        for action, count in qgate_analysis.get('action_distribution', {}).items():
            percentage = count / max(qgate_analysis.get('total_predictions', 1), 1) * 100
            print(f"  {action}: {count} ({percentage:.1f}%)")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
        print(f"\nüéØ –ê–ù–ê–õ–ò–ó –ü–û –°–ò–ú–í–û–õ–ê–ú:")
        for symbol, stats in qgate_analysis.get('symbol_analysis', {}).items():
            if stats['total'] > 0:
                filter_rate = stats['qgate_filter_rate']
                print(f"  {symbol}: {stats['total']} –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è {filter_rate:.1%}")
                if stats['avg_confidence']:
                    print(f"    –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {stats['avg_confidence']:.1f}%")
                if stats['avg_max_q']:
                    print(f"    –°—Ä–µ–¥–Ω–∏–π max_q: {stats['avg_max_q']:.3f}")
        
        # –ü—Ä–∏—á–∏–Ω—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        if qgate_analysis.get('qgate_reasons'):
            print(f"\nüéØ –ü–†–ò–ß–ò–ù–´ –§–ò–õ–¨–¢–†–ê–¶–ò–ò QGATE:")
            for reason, count in sorted(qgate_analysis['qgate_reasons'].items(), key=lambda x: x[1], reverse=True):
                percentage = count / max(qgate_analysis.get('qgate_filtered', 1), 1) * 100
                print(f"  {reason}: {count} ({percentage:.1f}%)")
        
        # –¢–æ—Ä–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if trading_analysis:
            print(f"\nüìà –¢–û–†–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            print(f"  –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {trading_analysis.get('total_trades', 0)}")
            print(f"  –£—Å–ø–µ—à–Ω—ã—Ö: {trading_analysis.get('successful_trades', 0)}")
            print(f"  –ù–µ—É–¥–∞—á–Ω—ã—Ö: {trading_analysis.get('failed_trades', 0)}")
            print(f"  –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {trading_analysis.get('success_rate', 0) * 100:.1f}%")
            
            if 'pnl_summary' in trading_analysis:
                pnl = trading_analysis['pnl_summary']
                print(f"  –°—Ä–µ–¥–Ω–∏–π P&L: {pnl['mean']:.2f} ¬± {pnl['std']:.2f}")
                print(f"  –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {pnl['positive_count']}")
                print(f"  –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {pnl['negative_count']}")
        
        # –¢–µ–∫—É—â–∏–µ –ø–æ—Ä–æ–≥–∏
        thresholds = self.get_current_qgate_thresholds()
        print(f"\nüéØ –¢–ï–ö–£–©–ò–ï –ü–û–†–û–ì–ò QGATE:")
        for key, value in thresholds.items():
            print(f"  {key}: {value}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        suggestions = self.suggest_qgate_improvements(qgate_analysis)
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        for suggestion in suggestions:
            print(f"  {suggestion}")
    
    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î"""
        self.session.close()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –ê–ù–ê–õ–ò–ó–ê–¢–û–† QGATE –ò –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–ô")
    print("="*50)
    
    analyzer = QGateAnalyzer()
    
    try:
        # –ê–Ω–∞–ª–∏–∑ QGate
        qgate_analysis = analyzer.analyze_qgate_performance(days_back=7)
        
        # –ê–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤–ª–∏
        trading_analysis = analyzer.analyze_trading_performance(days_back=7)
        
        # –í—ã–≤–æ–¥ –æ—Ç—á–µ—Ç–∞
        analyzer.print_analysis_report(qgate_analysis, trading_analysis)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        analyzer.close()

if __name__ == "__main__":
    main()
