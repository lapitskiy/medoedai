#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—ã –¥–ª—è DQN solver
"""

import numpy as np
from agents.vdqn.cfg.vconfig import vDqnConfig
from agents.vdqn.dqnsolver import DQNSolver

def test_dqn_solver():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π DQN solver"""
    print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ DQN solver...")
    
    try:
        cfg = vDqnConfig()
        
        # –°–æ–∑–¥–∞–µ–º solver
        observation_space = 100
        action_space = 3
        
        solver = DQNSolver(observation_space, action_space, load=False)
        
        print(f"‚úÖ DQN Solver —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        print(f"   - Prioritized Replay: {cfg.prioritized}")
        print(f"   - Memory Size: {cfg.memory_size}")
        print(f"   - Batch Size: {cfg.batch_size}")
        print(f"   - Learning Rate: {cfg.lr}")
        print(f"   - Gamma: {cfg.gamma}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
        test_state = np.random.randn(100)
        test_action = 1
        test_reward = 0.5
        test_next_state = np.random.randn(100)
        test_done = False
        
        solver.store_transition(test_state, test_action, test_reward, test_next_state, test_done)
        print(f"‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω –≤ replay buffer")
        print(f"   - –†–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞: {len(solver.memory)}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è
        action = solver.act(test_state)
        print(f"‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –≤—ã–±—Ä–∞–Ω–æ: {action}")
        print(f"   - Epsilon: {solver.epsilon:.4f}")
        
        return True, "DQN Solver –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ"
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ DQN solver: {e}")
        return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ DQN solver: {str(e)}"

if __name__ == "__main__":
    success, message = test_dqn_solver()
    if success:
        print("‚úÖ –¢–µ—Å—Ç DQN solver –ø—Ä–æ–π–¥–µ–Ω!")
    else:
        print(f"‚ùå –¢–µ—Å—Ç DQN solver –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: {message}")
