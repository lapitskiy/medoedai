#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—ã –¥–ª—è torch.compile
"""

import sys
import os
sys.path.append('/app')

import torch
from agents.vdqn.cfg.vconfig import vDqnConfig
from agents.vdqn.dqnn import DQNN

def test_torch_compile():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç torch.compile —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É—é torch.compile...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é PyTorch
        print(f"üìä PyTorch version: {torch.__version__}")
        print(f"üöÄ PyTorch 2.x: {torch.__version__.startswith('2.')}")
        print(f"‚ö° Has torch.compile: {hasattr(torch, 'compile')}")
        
        if not hasattr(torch, 'compile'):
            print("‚ùå torch.compile –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏ PyTorch")
            return False
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –º–æ–¥–µ–ª—å
        cfg = vDqnConfig()
        obs_dim = 442  # –ö–∞–∫ –≤ –≤–∞—à–µ–º –∫–æ–¥–µ
        act_dim = 3
        
        model = DQNN(
            obs_dim=obs_dim,
            act_dim=act_dim,
            hidden_sizes=cfg.hidden_sizes,
            dropout_rate=cfg.dropout_rate,
            layer_norm=cfg.layer_norm,
            dueling=cfg.dueling_dqn
        )
        
        print(f"‚úÖ –ú–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞: {obs_dim} -> {act_dim}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º torch.compile
        print("\nüöÄ –¢–µ—Å—Ç–∏—Ä—É—é torch.compile...")
        
        try:
            compiled_model = torch.compile(model, mode='max-autotune')
            print("‚úÖ torch.compile —É—Å–ø–µ—à–µ–Ω!")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º forward pass
            test_input = torch.randn(1, obs_dim)
            with torch.no_grad():
                output = compiled_model(test_input)
            
            print(f"‚úÖ Forward pass —É—Å–ø–µ—à–µ–Ω: {output.shape}")
            print(f"   - –í—Ö–æ–¥: {test_input.shape}")
            print(f"   - –í—ã—Ö–æ–¥: {output.shape}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ NaN
            if torch.isnan(output).any():
                print("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã NaN –∑–Ω–∞—á–µ–Ω–∏—è!")
                return False
            else:
                print("‚úÖ NaN –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
            
            # –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            print("\n‚ö° –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
            import time
            
            # –¢–µ—Å—Ç –±–µ–∑ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏
            start_time = time.time()
            for _ in range(100):
                with torch.no_grad():
                    _ = model(test_input)
            original_time = time.time() - start_time
            
            # –¢–µ—Å—Ç —Å –∫–æ–º–ø–∏–ª—è—Ü–∏–µ–π
            start_time = time.time()
            for _ in range(100):
                with torch.no_grad():
                    _ = compiled_model(test_input)
            compiled_time = time.time() - start_time
            
            print(f"   - –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å: {original_time*1000:.2f} –º—Å –Ω–∞ 100 forward pass")
            print(f"   - –°–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å: {compiled_time*1000:.2f} –º—Å –Ω–∞ 100 forward pass")
            
            if compiled_time < original_time:
                speedup = original_time / compiled_time
                print(f"   - –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {speedup:.2f}x")
                
                if speedup > 1.5:
                    print("‚úÖ –û—Ç–ª–∏—á–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ!")
                elif speedup > 1.2:
                    print("‚úÖ –•–æ—Ä–æ—à–µ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ")
                else:
                    print("‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ")
            else:
                print("‚ö†Ô∏è –ö–æ–º–ø–∏–ª—è—Ü–∏—è –Ω–µ –¥–∞–ª–∞ —É—Å–∫–æ—Ä–µ–Ω–∏—è")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ torch.compile: {e}")
            return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_torch_compile()
    if success:
        print("\nüéâ torch.compile —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!")
        print("üöÄ –í–∞—à–∞ –º–æ–¥–µ–ª—å –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —É—Å–∫–æ—Ä–µ–Ω–∏–µ–º!")
        print("\nüí° –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê TORCH.COMPILE:")
        print("   ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–æ–≤")
        print("   ‚Ä¢ –£—Å–∫–æ—Ä–µ–Ω–∏–µ –¥–æ 30-50%")
        print("   ‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞–º—è—Ç–∏")
        print("   ‚Ä¢ –õ—É—á—à–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞ GPU")
    else:
        print("\n‚ö†Ô∏è torch.compile –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("üìù –ú–æ–¥–µ–ª—å –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏")
