#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—ã –¥–ª—è –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏ DQN
"""

import torch
from agents.vdqn.cfg.vconfig import vDqnConfig
from agents.vdqn.dqnn import DQNN

def test_neural_network():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏"""
    print("üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏...")
    
    try:
        cfg = vDqnConfig()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º Dueling DQN
        obs_dim = 100
        act_dim = 3
        hidden_sizes = (512, 256, 128)
        
        model = DQNN(
            obs_dim=obs_dim,
            act_dim=act_dim,
            hidden_sizes=hidden_sizes,
            dropout_rate=cfg.dropout_rate,
            layer_norm=cfg.layer_norm,
            dueling=cfg.dueling_dqn
        )
        
        print(f"‚úÖ –ú–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        print(f"   - –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {hidden_sizes}")
        print(f"   - Dropout: {cfg.dropout_rate}")
        print(f"   - Layer Norm: {cfg.layer_norm}")
        print(f"   - Dueling: {cfg.dueling_dqn}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º forward pass
        test_input = torch.randn(1, obs_dim)
        with torch.no_grad():
            output = model(test_input)
        
        print(f"‚úÖ Forward pass —É—Å–ø–µ—à–µ–Ω")
        print(f"   - –í—Ö–æ–¥: {test_input.shape}")
        print(f"   - –í—ã—Ö–æ–¥: {output.shape}")
        print(f"   - Q-–∑–Ω–∞—á–µ–Ω–∏—è: {output.squeeze().tolist()}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ NaN
        if torch.isnan(output).any():
            print("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã NaN –∑–Ω–∞—á–µ–Ω–∏—è –≤ –≤—ã—Ö–æ–¥–µ!")
            return False, "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã NaN –∑–Ω–∞—á–µ–Ω–∏—è –≤ –≤—ã—Ö–æ–¥–µ"
        else:
            print("‚úÖ NaN –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
            return True, "–ú–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞ –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏: {e}")
        return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏: {str(e)}"

if __name__ == "__main__":
    success, message = test_neural_network()
    if success:
        print("‚úÖ –¢–µ—Å—Ç –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω!")
    else:
        print(f"‚ùå –¢–µ—Å—Ç –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: {message}")
