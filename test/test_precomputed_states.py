#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—ã –¥–ª—è –ø—Ä–µ–¥–≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
"""

import sys
import os
sys.path.append('/app')

import numpy as np
import pandas as pd
from agents.vdqn.cfg.vconfig import vDqnConfig
from envs.dqn_model.gym.crypto_trading_env_optimized import CryptoTradingEnvOptimized

def create_test_data():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("üìä –°–æ–∑–¥–∞—é —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ OHLCV –¥–∞–Ω–Ω—ã–µ
    n_samples = 1000
    
    # 5-–º–∏–Ω—É—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    df_5min = pd.DataFrame({
        'open': np.random.randn(n_samples).cumsum() + 100000,
        'high': np.random.randn(n_samples).cumsum() + 100000,
        'low': np.random.randn(n_samples).cumsum() + 100000,
        'close': np.random.randn(n_samples).cumsum() + 100000,
        'volume': np.random.exponential(100, n_samples)
    })
    
    # 15-–º–∏–Ω—É—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–º–µ–Ω—å—à–µ —Ç–æ—á–µ–∫)
    df_15min = df_5min.iloc[::3].copy()
    df_15min.index = range(len(df_15min))
    
    # 1-—á–∞—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–µ—â–µ –º–µ–Ω—å—à–µ —Ç–æ—á–µ–∫)
    df_1h = df_5min.iloc[::12].copy()
    df_1h.index = range(len(df_1h))
    
    print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã:")
    print(f"   - 5min: {len(df_5min)} —Å–≤–µ—á–µ–π")
    print(f"   - 15min: {len(df_15min)} —Å–≤–µ—á–µ–π")
    print(f"   - 1h: {len(df_1h)} —Å–≤–µ—á–µ–π")
    
    return {
        'df_5min': df_5min,
        'df_15min': df_15min,
        'df_1h': df_1h
    }

def test_precomputed_states():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–µ–¥–≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        dfs = create_test_data()
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        cfg = vDqnConfig()
        
        # –°–æ–∑–¥–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
        env = CryptoTradingEnvOptimized(
            dfs=dfs,
            cfg=cfg,
            lookback_window=20,
            indicators_config=None
        )
        
        print(f"‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ")
        print(f"   - –†–∞–∑–º–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è: {env.observation_space_shape}")
        print(f"   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π: {len(env.precomputed_states)}")
        
        # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º reset
        print("\nüîµ –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ reset...")
        state = env.reset()
        print(f"   - –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ reset: {type(state)}, —Ä–∞–∑–º–µ—Ä: {state.shape if hasattr(state, 'shape') else len(state)}")
        
        if state is not None and len(state) == env.observation_space_shape:
            print("‚úÖ Reset —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            print("‚ùå Reset —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return False
        
        # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤
        print("\nüü° –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —à–∞–≥–æ–≤...")
        for step in range(5):
            action = np.random.randint(0, 3)
            state_next, reward, terminal, info = env.step(action)
            
            if state_next is None:
                print(f"   ‚ùå –®–∞–≥ {step}: state_next = None")
                return False
            
            print(f"   - –®–∞–≥ {step}: action={action}, reward={reward:.4f}, terminal={terminal}")
            
            if terminal:
                print(f"   - –≠–ø–∏–∑–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω –Ω–∞ —à–∞–≥–µ {step}")
                break
        
        print("‚úÖ –ù–µ—Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        print("\nüü¢ –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
        import time
        
        # –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
        start_time = time.time()
        for _ in range(100):
            _ = env._get_state()
        get_state_time = time.time() - start_time
        
        print(f"   - 100 –≤—ã–∑–æ–≤–æ–≤ _get_state(): {get_state_time*1000:.2f} –º—Å")
        print(f"   - –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {get_state_time*10:.3f} –º—Å")
        
        if get_state_time < 0.1:  # –ú–µ–Ω—å—à–µ 100–º—Å –Ω–∞ 100 —Å–æ—Å—Ç–æ—è–Ω–∏–π
            print("‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ—Ç–ª–∏—á–Ω–∞—è!")
        elif get_state_time < 0.5:
            print("‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ö–æ—Ä–æ—à–∞—è")
        else:
            print("‚ö†Ô∏è –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–∂–µ—Ç –±—ã—Ç—å —É–ª—É—á—à–µ–Ω–∞")
        
        # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
        print("\nüî¥ –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç NaN –≤ –ø—Ä–µ–¥–≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö
        if hasattr(env, 'precomputed_states'):
            nan_count = np.isnan(env.precomputed_states).sum()
            if nan_count == 0:
                print("‚úÖ NaN –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –≤ –ø—Ä–µ–¥–≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö")
            else:
                print(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {nan_count} NaN –∑–Ω–∞—á–µ–Ω–∏–π")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã
        if hasattr(env, 'states_tensor'):
            print(f"   - states_tensor —Ä–∞–∑–º–µ—Ä: {env.states_tensor.shape}")
        
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_precomputed_states()
    if success:
        print("\nüéâ –¢–µ—Å—Ç –ø—Ä–µ–¥–≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print("üöÄ –û–∫—Ä—É–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –±—ã—Å—Ç—Ä–æ–π —Ä–∞–±–æ—Ç–µ")
        print("‚ö° –°–æ—Å—Ç–æ—è–Ω–∏—è –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ")
        print("\nüí° –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê –ü–†–ï–î–í–´–ß–ò–°–õ–ï–ù–ò–Ø:")
        print("   ‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º")
        print("   ‚Ä¢ –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–µ–∫ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏")
        print("   ‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è hot-path –æ–ø–µ—Ä–∞—Ü–∏–π")
        print("   ‚Ä¢ –°–Ω–∏–∂–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ CPU")
    else:
        print("\n‚ùå –¢–µ—Å—Ç –ø—Ä–µ–¥–≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –Ω–µ –ø—Ä–æ–π–¥–µ–Ω!")
