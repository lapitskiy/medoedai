from typing import List, Dict, Any
import numpy as np


def analyze_bad_trades_detailed(trades: List[Dict[str, Any]]) -> Dict[str, Any]:
    """
    –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –ø–ª–æ—Ö–∏—Ö —Å–¥–µ–ª–æ–∫.
    –û–∂–∏–¥–∞–µ—Ç—Å—è, —á—Ç–æ –∫–∞–∂–¥–∞—è —Å–¥–µ–ª–∫–∞ –∏–º–µ–µ—Ç –∫–ª—é—á–∏: 'roi' (–ø—Ä–∏–±—ã–ª—å –≤ –¥–æ–ª—è—Ö), 'duration' (–≤ –º–∏–Ω—É—Ç–∞—Ö, –æ–ø—Ü.).
    """
    if not trades:
        return {
            'bad_trades': [],
            'bad_trades_count': 0,
            'bad_trades_percentage': 0.0,
            'avg_bad_roi': 0.0,
            'avg_bad_duration': 0.0,
            'loss_distribution': {},
        }

    total_trades = len(trades)
    bad_trades = [t for t in trades if float(t.get('roi', 0.0)) < 0.0]
    bad_count = len(bad_trades)
    bad_pct = (bad_count / total_trades * 100.0) if total_trades else 0.0

    bad_rois = [float(t.get('roi', 0.0)) for t in bad_trades]
    bad_durations = [float(t.get('duration', 0.0)) for t in bad_trades if t.get('duration') is not None]

    avg_bad_roi = float(np.mean(bad_rois)) if bad_rois else 0.0
    avg_bad_duration = float(np.mean(bad_durations)) if bad_durations else 0.0

    # –ì—Ä—É–±–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è —É–±—ã—Ç–∫–æ–≤
    loss_distribution = {
        'very_small_losses': sum(1 for r in bad_rois if -0.002 <= r < 0),     # –¥–æ -0.2%
        'small_losses':      sum(1 for r in bad_rois if -0.01 <= r < -0.002), # –¥–æ -1%
        'medium_losses':     sum(1 for r in bad_rois if -0.03 <= r < -0.01),  # –¥–æ -3%
        'large_losses':      sum(1 for r in bad_rois if r < -0.03),           # –±–æ–ª—å—à–µ -3%
    }

    return {
        'bad_trades': bad_trades,
        'bad_trades_count': bad_count,
        'bad_trades_percentage': bad_pct,
        'avg_bad_roi': avg_bad_roi,
        'avg_bad_duration': avg_bad_duration,
        'loss_distribution': loss_distribution,
    }


def print_bad_trades_analysis(analysis: Dict[str, Any]) -> None:
    print("============================================================")
    print("üìâ –ê–ù–ê–õ–ò–ó –ü–õ–û–•–ò–• –°–î–ï–õ–û–ö")
    print("============================================================")
    print(f"–í—Å–µ–≥–æ –ø–ª–æ—Ö–∏—Ö —Å–¥–µ–ª–æ–∫: {analysis.get('bad_trades_count', 0)}")
    print(f"–ü—Ä–æ—Ü–µ–Ω—Ç –ø–ª–æ—Ö–∏—Ö —Å–¥–µ–ª–æ–∫: {analysis.get('bad_trades_percentage', 0):.2f}%")
    print(f"–°—Ä–µ–¥–Ω–∏–π ROI –ø–ª–æ—Ö–∏—Ö —Å–¥–µ–ª–æ–∫: {analysis.get('avg_bad_roi', 0.0) * 100:.4f}%")
    print(f"–°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–ª–æ—Ö–∏—Ö —Å–¥–µ–ª–æ–∫: {analysis.get('avg_bad_duration', 0.0):.1f} –º–∏–Ω")
    dist = analysis.get('loss_distribution', {})
    if dist:
        print("\n–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É–±—ã—Ç–∫–∞–º:")
        for k, v in dist.items():
            print(f"  ‚Ä¢ {k}: {v}")


def print_detailed_recommendations(analysis: Dict[str, Any]) -> None:
    print("\n============================================================")
    print("üß† –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –°–ù–ò–ñ–ï–ù–ò–Æ –ü–õ–û–•–ò–• –°–î–ï–õ–û–ö")
    print("============================================================")
    bad_pct = analysis.get('bad_trades_percentage', 0)
    avg_bad_roi = analysis.get('avg_bad_roi', 0.0)
    if bad_pct > 5:
        print("‚Ä¢ –£–∂–µ—Å—Ç–æ—á–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –æ–±—ä–µ–º–∞/–≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –≤ —Ñ–∞–∑–µ exploitation (eps<=0.2)")
    if avg_bad_roi < -0.01:
        print("‚Ä¢ –ü–æ–¥–Ω—è—Ç—å —Å—Ç–æ–ø-–ª–æ—Å—Å (–º–µ–Ω—å—à–µ –ø—Ä–æ—Å–∞–¥–∫–∞), —É–≤–µ–ª–∏—á–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è")
    print("‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: very_small_losses ‚Üí –º–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ —à—É–º")
    print("‚Ä¢ –ü–æ–¥–∫—Ä—É—Ç–∏—Ç–µ take-profit/stop-loss —á–µ—Ä–µ–∑ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê–Ω–∞–ª–∏–∑ –ø–ª–æ—Ö–∏—Ö —Å–¥–µ–ª–æ–∫ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—É—á–µ–Ω–∏—è DQN –º–æ–¥–µ–ª–∏
–ü–æ–º–æ–≥–∞–µ—Ç –ø–æ–Ω—è—Ç—å, –≥–¥–µ –º–æ–¥–µ–ª—å –æ—à–∏–±–∞–µ—Ç—Å—è –∏ –∫–∞–∫ –µ—ë —É–ª—É—á—à–∏—Ç—å
"""

import pickle
import numpy as np
import pandas as pd
from pathlib import Path
import matplotlib.pyplot as plt
import seaborn as sns
from typing import Dict, List, Any
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append('agents/vdqn')
from analysis import analyze_bad_trades, print_bad_trades_analysis

def load_training_results(file_path: str) -> Dict[str, Any]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open(file_path, 'rb') as f:
            results = pickle.load(f)
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑: {file_path}")
        return results
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        return {}

def analyze_bad_trades_detailed(trades: List[Dict[str, Any]]) -> Dict[str, Any]:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–ª–æ—Ö–∏—Ö —Å–¥–µ–ª–æ–∫ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏"""
    
    if not trades:
        return {}
    
    df = pd.DataFrame(trades)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–ª–æ—Ö–∏–µ —Å–¥–µ–ª–∫–∏ (ROI < 0.1%)
    bad_trades = df[abs(df['roi']) < 0.001]
    
    if len(bad_trades) == 0:
        return {'bad_trades_count': 0, 'message': '–ü–ª–æ—Ö–∏—Ö —Å–¥–µ–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'}
    
    analysis = {
        'bad_trades_count': len(bad_trades),
        'bad_trades_percentage': len(bad_trades) / len(trades) * 100,
        'bad_trades_details': []
    }
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –ø–ª–æ—Ö—É—é —Å–¥–µ–ª–∫—É
    for idx, trade in bad_trades.iterrows():
        trade_analysis = {
            'trade_id': idx,
            'roi': trade.get('roi', 0),
            'duration': trade.get('duration', 0),
            'entry_time': trade.get('entry_time', 'N/A'),
            'exit_time': trade.get('exit_time', 'N/A'),
            'entry_price': trade.get('entry_price', 0),
            'exit_price': trade.get('exit_price', 0),
            'volume': trade.get('volume', 0),
            'action': trade.get('action', 'N/A'),
            'market_conditions': trade.get('market_conditions', 'N/A')
        }
        analysis['bad_trades_details'].append(trade_analysis)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–æ—Ö–∏—Ö —Å–¥–µ–ª–æ–∫
    bad_rois = bad_trades['roi']
    analysis.update({
        'avg_bad_roi': bad_rois.mean(),
        'min_bad_roi': bad_rois.min(),
        'max_bad_roi': bad_rois.max(),
        'bad_roi_std': bad_rois.std(),
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        'avg_bad_duration': bad_trades['duration'].mean() if 'duration' in bad_trades.columns else 0,
        'min_bad_duration': bad_trades['duration'].min() if 'duration' in bad_trades.columns else 0,
        'max_bad_duration': bad_trades['duration'].max() if 'duration' in bad_trades.columns else 0,
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –æ–±—ä–µ–º—É
        'avg_bad_volume': bad_trades['volume'].mean() if 'volume' in bad_trades.columns else 0,
        'min_bad_volume': bad_trades['volume'].min() if 'volume' in bad_trades.columns else 0,
        'max_bad_volume': bad_trades['volume'].max() if 'volume' in bad_trades.columns else 0
    })
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–∏—á–∏–Ω–∞–º
    very_small_losses = bad_trades[bad_trades['roi'] < 0]
    very_small_profits = bad_trades[bad_trades['roi'] > 0]
    
    analysis['loss_distribution'] = {
        'very_small_losses': len(very_small_losses),
        'very_small_profits': len(very_small_profits),
        'neutral_trades': len(bad_trades) - len(very_small_losses) - len(very_small_profits)
    }
    
    return analysis

def create_bad_trades_plots(analysis: Dict[str, Any], save_path: str = 'plots'):
    """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–ª–æ—Ö–∏—Ö —Å–¥–µ–ª–æ–∫"""
    
    if not analysis or analysis.get('bad_trades_count', 0) == 0:
        print("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
    Path(save_path).mkdir(exist_ok=True)
    
    # –ì—Ä–∞—Ñ–∏–∫ 1: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ ROI –ø–ª–æ—Ö–∏—Ö —Å–¥–µ–ª–æ–∫
    plt.figure(figsize=(12, 8))
    
    plt.subplot(2, 2, 1)
    bad_trades_df = pd.DataFrame(analysis['bad_trades_details'])
    plt.hist(bad_trades_df['roi'], bins=20, alpha=0.7, color='red', edgecolor='black')
    plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ ROI –ø–ª–æ—Ö–∏—Ö —Å–¥–µ–ª–æ–∫')
    plt.xlabel('ROI')
    plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫')
    plt.axvline(x=0, color='black', linestyle='--', alpha=0.5)
    plt.grid(True, alpha=0.3)
    
    # –ì—Ä–∞—Ñ–∏–∫ 2: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–ª–æ—Ö–∏—Ö —Å–¥–µ–ª–æ–∫
    plt.subplot(2, 2, 2)
    plt.hist(bad_trades_df['duration'], bins=15, alpha=0.7, color='orange', edgecolor='black')
    plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–ª–æ—Ö–∏—Ö —Å–¥–µ–ª–æ–∫')
    plt.xlabel('–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–∏–Ω—É—Ç—ã)')
    plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫')
    plt.grid(True, alpha=0.3)
    
    # –ì—Ä–∞—Ñ–∏–∫ 3: –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Ç–∏–ø–æ–≤ –ø–ª–æ—Ö–∏—Ö —Å–¥–µ–ª–æ–∫
    plt.subplot(2, 2, 3)
    dist = analysis['loss_distribution']
    labels = ['–£–±—ã—Ç–∫–∏', '–ü—Ä–∏–±—ã–ª–∏', '–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ']
    sizes = [dist['very_small_losses'], dist['very_small_profits'], dist['neutral_trades']]
    colors = ['red', 'green', 'gray']
    
    if sum(sizes) > 0:
        plt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)
        plt.title('–¢–∏–ø—ã –ø–ª–æ—Ö–∏—Ö —Å–¥–µ–ª–æ–∫')
    
    # –ì—Ä–∞—Ñ–∏–∫ 4: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Ö–æ—Ä–æ—à–∏–º–∏ —Å–¥–µ–ª–∫–∞–º–∏
    plt.subplot(2, 2, 4)
    all_trades_df = pd.DataFrame(analysis.get('all_trades', []))
    if not all_trades_df.empty and 'roi' in all_trades_df.columns:
        good_trades = all_trades_df[abs(all_trades_df['roi']) >= 0.001]
        bad_trades = all_trades_df[abs(all_trades_df['roi']) < 0.001]
        
        plt.hist([good_trades['roi'], bad_trades['roi']], 
                bins=20, alpha=0.7, label=['–•–æ—Ä–æ—à–∏–µ —Å–¥–µ–ª–∫–∏', '–ü–ª–æ—Ö–∏–µ —Å–¥–µ–ª–∫–∏'],
                color=['green', 'red'])
        plt.title('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ ROI: —Ö–æ—Ä–æ—à–∏–µ vs –ø–ª–æ—Ö–∏–µ —Å–¥–µ–ª–∫–∏')
        plt.xlabel('ROI')
        plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫')
        plt.legend()
        plt.grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.savefig(f'{save_path}/bad_trades_analysis.png', dpi=300, bbox_inches='tight')
    plt.show()
    
    print(f"üìä –ì—Ä–∞—Ñ–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {save_path}/bad_trades_analysis.png")

def print_detailed_recommendations(analysis: Dict[str, Any]):
    """–í—ã–≤–æ–¥–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –º–æ–¥–µ–ª–∏"""
    
    if not analysis or analysis.get('bad_trades_count', 0) == 0:
        return
    
    print(f"\nüéØ –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –£–õ–£–ß–®–ï–ù–ò–Æ")
    print("=" * 60)
    
    dist = analysis['loss_distribution']
    total_bad = analysis['bad_trades_count']
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–ø–∞–º —Å–¥–µ–ª–æ–∫
    if dist['very_small_losses'] > dist['very_small_profits']:
        print(f"üî¥ –ü–†–û–ë–õ–ï–ú–ê: –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –ø–ª–æ—Ö–∏—Ö —Å–¥–µ–ª–æ–∫ - —É–±—ã—Ç–æ—á–Ω—ã–µ ({dist['very_small_losses']}/{total_bad})")
        print(f"   üí° –†–ï–®–ï–ù–ò–Ø:")
        print(f"      ‚Ä¢ –£–ª—É—á—à–∏—Ç—å —Ç–æ—á–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–∞ –≤ –ø–æ–∑–∏—Ü–∏—é")
        print(f"      ‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –≤—Ö–æ–¥–∞")
        print(f"      ‚Ä¢ –£–≤–µ–ª–∏—á–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏")
        print(f"      ‚Ä¢ –£–ª—É—á—à–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π")
    else:
        print(f"üü° –ü–†–û–ë–õ–ï–ú–ê: –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –ø–ª–æ—Ö–∏—Ö —Å–¥–µ–ª–æ–∫ - –º–∞–ª–æ–ø—Ä–∏–±—ã–ª—å–Ω—ã–µ ({dist['very_small_profits']}/{total_bad})")
        print(f"   üí° –†–ï–®–ï–ù–ò–Ø:")
        print(f"      ‚Ä¢ –£–ª—É—á—à–∏—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–æ–º –∏–∑ –ø–æ–∑–∏—Ü–∏–∏")
        print(f"      ‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å trailing stop-loss")
        print(f"      ‚Ä¢ –£–≤–µ–ª–∏—á–∏—Ç—å —Ü–µ–ª–µ–≤—É—é –ø—Ä–∏–±—ã–ª—å")
        print(f"      ‚Ä¢ –£–ª—É—á—à–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞")
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    avg_duration = analysis['avg_bad_duration']
    if avg_duration < 300:  # –ú–µ–Ω—å—à–µ 5 —á–∞—Å–æ–≤
        print(f"‚è∞ –ü–†–û–ë–õ–ï–ú–ê: –ü–ª–æ—Ö–∏–µ —Å–¥–µ–ª–∫–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ ({avg_duration:.1f} –º–∏–Ω)")
        print(f"   üí° –†–ï–®–ï–ù–ò–Ø:")
        print(f"      ‚Ä¢ –£–≤–µ–ª–∏—á–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏")
        print(f"      ‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –ø–æ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏")
        print(f"      ‚Ä¢ –£–ª—É—á—à–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã—Ö –¥–≤–∏–∂–µ–Ω–∏–π")
    elif avg_duration > 600:  # –ë–æ–ª—å—à–µ 10 —á–∞—Å–æ–≤
        print(f"‚è∞ –ü–†–û–ë–õ–ï–ú–ê: –ü–ª–æ—Ö–∏–µ —Å–¥–µ–ª–∫–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏—Ç–µ–ª—å–Ω—ã–µ ({avg_duration:.1f} –º–∏–Ω)")
        print(f"   üí° –†–ï–®–ï–ù–ò–Ø:")
        print(f"      ‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è")
        print(f"      ‚Ä¢ –£–ª—É—á—à–∏—Ç—å stop-loss —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
        print(f"      ‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞")
    
    # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print(f"\nüîß –û–ë–©–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print(f"   ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –ø–ª–æ—Ö–∏—Ö —Å–¥–µ–ª–æ–∫: {analysis['bad_trades_percentage']:.2f}%")
    if analysis['bad_trades_percentage'] > 5:
        print(f"   ‚Ä¢ ‚ö†Ô∏è  –í—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø–ª–æ—Ö–∏—Ö —Å–¥–µ–ª–æ–∫ - —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è")
    elif analysis['bad_trades_percentage'] > 3:
        print(f"   ‚Ä¢ ‚ö†Ô∏è  –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø–ª–æ—Ö–∏—Ö —Å–¥–µ–ª–æ–∫ - –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å")
    else:
        print(f"   ‚Ä¢ ‚úÖ  –ù–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø–ª–æ—Ö–∏—Ö —Å–¥–µ–ª–æ–∫ - —Ö–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
    
    print(f"   ‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ ROI: {analysis['bad_roi_std']:.6f}")
    if analysis['bad_roi_std'] > 0.002:
        print(f"   ‚Ä¢ ‚ö†Ô∏è  –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –ø–ª–æ—Ö–∏—Ö —Å–¥–µ–ª–æ–∫")
    else:
        print(f"   ‚Ä¢ ‚úÖ  –°—Ç–∞–±–∏–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–ª–æ—Ö–∏—Ö —Å–¥–µ–ª–æ–∫")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞"""
    
    print("üîç –ê–ù–ê–õ–ò–ó –ü–õ–û–•–ò–• –°–î–ï–õ–û–ö –ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –û–ë–£–ß–ï–ù–ò–Ø")
    print("=" * 60)
    
    # –ò—â–µ–º —Ñ–∞–π–ª—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    results_files = list(Path('temp/train_results').glob('*.pkl'))
    
    if not results_files:
        print("‚ùå –§–∞–π–ª—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ temp/train_results/")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã
    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏: {len(results_files)}")
    for i, file_path in enumerate(results_files):
        print(f"  {i+1}. {file_path.name}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª
    latest_file = max(results_files, key=lambda x: x.stat().st_mtime)
    print(f"\nüì• –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª: {latest_file.name}")
    
    results = load_training_results(str(latest_file))
    if not results:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–¥–µ–ª–æ–∫
    if 'all_trades' not in results:
        print("‚ùå –í —Ñ–∞–π–ª–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–¥–µ–ª–∫–∞—Ö")
        return
    
    trades = results['all_trades']
    print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–¥–µ–ª–æ–∫: {len(trades)}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–æ—Ö–∏–µ —Å–¥–µ–ª–∫–∏
    bad_trades_analysis = analyze_bad_trades_detailed(trades)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Å–¥–µ–ª–∫–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    bad_trades_analysis['all_trades'] = trades
    
    # –í—ã–≤–æ–¥–∏–º –∞–Ω–∞–ª–∏–∑
    print_bad_trades_analysis(bad_trades_analysis)
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print_detailed_recommendations(bad_trades_analysis)
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
    print(f"\nüìà –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤...")
    create_bad_trades_plots(bad_trades_analysis)
    
    print(f"\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    main()
