#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã —Å –Ω—É–ª–µ–≤—ã–º winrate
"""

import pickle
import os

def analyze_winrate_problem():
    file_path = 'temp/train_results/training_results_1755911593.pkl'
    
    if not os.path.exists(file_path):
        print(f"‚ùå –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    try:
        with open(file_path, 'rb') as f:
            results = pickle.load(f)
        
        print("üîç –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´ –° WINRATE")
        print("=" * 60)
        
        print(f"üìã –ö–ª—é—á–∏ –≤ —Ñ–∞–π–ª–µ: {list(results.keys())}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º winrates
        if 'episode_winrates' in results:
            winrates = results['episode_winrates']
            print(f"\nüìä Episode winrates:")
            print(f"  ‚Ä¢ –¢–∏–ø: {type(winrates)}")
            print(f"  ‚Ä¢ –î–ª–∏–Ω–∞: {len(winrates) if hasattr(winrates, '__len__') else 'N/A'}")
            print(f"  ‚Ä¢ –ó–Ω–∞—á–µ–Ω–∏—è: {winrates}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ winrate —Ä–∞–≤–Ω—ã 0
            if hasattr(winrates, '__len__') and len(winrates) > 0:
                all_zero = all(w == 0.0 for w in winrates)
                print(f"  ‚Ä¢ –í—Å–µ winrate —Ä–∞–≤–Ω—ã 0: {all_zero}")
        else:
            print("\n‚ùå –ö–ª—é—á 'episode_winrates' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–¥–µ–ª–∫–∏
        if 'all_trades' in results:
            trades = results['all_trades']
            print(f"\nüí∞ All trades:")
            print(f"  ‚Ä¢ –¢–∏–ø: {type(trades)}")
            print(f"  ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(trades) if hasattr(trades, '__len__') else 'N/A'}")
            
            if trades and len(trades) > 0:
                print(f"  ‚Ä¢ –ü–µ—Ä–≤–∞—è —Å–¥–µ–ª–∫–∞: {trades[0]}")
                if len(trades) > 1:
                    print(f"  ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–¥–µ–ª–∫–∞: {trades[-1]}")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º ROI —Å–¥–µ–ª–æ–∫
                profitable_count = 0
                loss_count = 0
                for trade in trades:
                    roi = trade.get('roi', 0)
                    if roi > 0:
                        profitable_count += 1
                    elif roi < 0:
                        loss_count += 1
                
                print(f"  ‚Ä¢ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {profitable_count}")
                print(f"  ‚Ä¢ –£–±—ã—Ç–æ—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {loss_count}")
                print(f"  ‚Ä¢ –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {len(trades) - profitable_count - loss_count}")
                
                if len(trades) > 0:
                    actual_winrate = profitable_count / len(trades)
                    print(f"  ‚Ä¢ –†–µ–∞–ª—å–Ω—ã–π winrate: {actual_winrate:.3f}")
        else:
            print("\n‚ùå –ö–ª—é—á 'all_trades' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ –∫–ª—é—á–∏
        for key in results:
            if key not in ['episode_winrates', 'all_trades']:
                value = results[key]
                print(f"\nüîç {key}:")
                print(f"  ‚Ä¢ –¢–∏–ø: {type(value)}")
                if hasattr(value, '__len__'):
                    print(f"  ‚Ä¢ –î–ª–∏–Ω–∞: {len(value)}")
                print(f"  ‚Ä¢ –ó–Ω–∞—á–µ–Ω–∏–µ: {value}")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    analyze_winrate_problem()
