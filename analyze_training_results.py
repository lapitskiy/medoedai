#!/usr/bin/env python3
"""
üìä –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—É—á–µ–Ω–∏—è DQN –º–æ–¥–µ–ª–∏

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python analyze_training_results.py training_results_1234567890.pkl
"""

import pickle
import numpy as np
import matplotlib.pyplot as plt
import sys
import os
import glob
from datetime import datetime

def analyze_training_results(results_file):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è –∏ —Å–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç
    """
    print(f"üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞: {results_file}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    with open(results_file, 'rb') as f:
        results = pickle.load(f)
    
    print("\n" + "="*60)
    print("üìà –û–¢–ß–ï–¢ –û–ë –û–ë–£–ß–ï–ù–ò–ò DQN –ú–û–î–ï–õ–ò")
    print("="*60)
    
    # –û–¢–õ–ê–î–ö–ê: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ –≤ —Ñ–∞–π–ª–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print(f"üîç –û–¢–õ–ê–î–ö–ê: –ö–ª—é—á–∏ –≤ —Ñ–∞–π–ª–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
    for key in sorted(results.keys()):
        value = results[key]
        if isinstance(value, (list, tuple)):
            print(f"  ‚Ä¢ {key}: {type(value).__name__} —Å {len(value)} —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏")
        else:
            print(f"  ‚Ä¢ {key}: {value}")
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    training_date = results.get('training_date') or results.get('created_at') or 'N/A'
    print(f"üìÖ –î–∞—Ç–∞ –æ–±—É—á–µ–Ω–∏—è: {training_date}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä—É–µ–º–æ–µ –∏ —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–∏–∑–æ–¥–æ–≤
    planned_episodes = results.get('episodes')
    if planned_episodes is None:
        planned_episodes = results.get('planned_episodes')
    if planned_episodes is None:
        planned_episodes = len(results.get('episode_winrates') or [])
    
    # –ò—â–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–∏–∑–æ–¥–æ–≤ –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
    actual_episodes = None
    early_stopping_triggered = False
    
    print(f"\nüîç –û–¢–õ–ê–î–ö–ê: –ü–æ–∏—Å–∫ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç–ø–∏–∑–æ–¥–æ–≤")
    print(f"  ‚Ä¢ –ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ —ç–ø–∏–∑–æ–¥—ã: {planned_episodes}")
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º actual_episodes –µ—Å–ª–∏ –µ—Å—Ç—å (–ù–û —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!)
    if 'actual_episodes' in results:
        actual_episodes = results['actual_episodes']
        print(f"üîç 1. –ù–∞–π–¥–µ–Ω actual_episodes: {actual_episodes}")
        print(f"‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: actual_episodes –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º!")
    else:
        print(f"üîç 1. actual_episodes –ù–ï –Ω–∞–π–¥–µ–Ω")
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º real_episodes –µ—Å–ª–∏ –µ—Å—Ç—å
    if actual_episodes is None and 'real_episodes' in results:
        actual_episodes = results['real_episodes']
        print(f"üîç 2. –ù–∞–π–¥–µ–Ω real_episodes: {actual_episodes}")
    elif actual_episodes is None:
        print(f"üîç 2. real_episodes –ù–ï –Ω–∞–π–¥–µ–Ω")
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º episode_winrates (–Ω–æ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Ç–æ—á–Ω–æ)
    episode_winrates = results.get('episode_winrates') or []
    if actual_episodes is None and episode_winrates:
        # –í–ù–ò–ú–ê–ù–ò–ï: episode_winrates –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å winrate –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ø–∏–∑–æ–¥–∞, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö
        # –ü–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç—Ç–æ —Ç–æ–ª—å–∫–æ –∫–∞–∫ fallback
        episode_winrates_count = len(episode_winrates)
        print(f"üîç 3. –ù–∞–π–¥–µ–Ω episode_winrates —Å {episode_winrates_count} —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏")
        if episode_winrates_count < planned_episodes * 0.8:  # –ï—Å–ª–∏ –º–µ–Ω—å—à–µ 80% –æ—Ç –ø–ª–∞–Ω–∏—Ä—É–µ–º—ã—Ö
            actual_episodes = episode_winrates_count
            early_stopping_triggered = True
            print(f"‚ö†Ô∏è 3. –û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–æ–∑–º–æ–∂–Ω—ã–π early stopping: {episode_winrates_count} < {planned_episodes}")
        else:
            actual_episodes = episode_winrates_count
            print(f"üîç 3. –ò—Å–ø–æ–ª—å–∑—É–µ–º episode_winrates –∫–∞–∫ actual_episodes: {actual_episodes}")
    elif actual_episodes is None:
        print(f"üîç 3. episode_winrates –ù–ï –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç")
    
    # 4. –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–ª–∞–Ω–∏—Ä—É–µ–º–æ–µ
    if actual_episodes is None:
        actual_episodes = planned_episodes
        print(f"üîç 4. –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∞–ª—å–Ω—ã—Ö —ç–ø–∏–∑–æ–¥–∞—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–ª–∞–Ω–∏—Ä—É–µ–º–æ–µ: {actual_episodes}")
    
    print(f"üîç –ü–æ—Å–ª–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞: actual_episodes = {actual_episodes}")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ actual_episodes —Ä–∞–≤–µ–Ω planned_episodes, 
    # –Ω–æ –≤ episode_winrates –º–µ–Ω—å—à–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å early stopping
    if (actual_episodes == planned_episodes and 
        episode_winrates and 
        len(episode_winrates) < planned_episodes):
        
        actual_episodes = len(episode_winrates)
        early_stopping_triggered = True
        print(f"üîç 5. –û–±–Ω–∞—Ä—É–∂–µ–Ω early stopping –ø–æ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—é: actual_episodes={actual_episodes}, episode_winrates={len(episode_winrates)}")
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ early_stopping_triggered –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
    if 'early_stopping_triggered' in results and results['early_stopping_triggered']:
        early_stopping_triggered = True
        print(f"üîç 6. –û–±–Ω–∞—Ä—É–∂–µ–Ω early stopping –ø–æ —Ñ–ª–∞–≥—É –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö")
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å actual_episodes, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if 'actual_episodes' in results:
            actual_episodes = results['actual_episodes']
            print(f"üîç 6. –û–±–Ω–æ–≤–ª–µ–Ω actual_episodes –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {actual_episodes}")
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ episode_winrates
    if episode_winrates:
        episode_winrates_count = len(episode_winrates)
        planned_episodes = results.get('episodes', planned_episodes)
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: episode_winrates - —ç—Ç–æ –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô –Ω–∞–¥–µ–∂–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç–ø–∏–∑–æ–¥–æ–≤
        # –ï—Å–ª–∏ actual_episodes –Ω–µ —Ä–∞–≤–µ–Ω episode_winrates_count, —Ç–æ actual_episodes –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
        if actual_episodes != episode_winrates_count:
            print(f"üîç 7. –û–®–ò–ë–ö–ê: actual_episodes ({actual_episodes}) != episode_winrates_count ({episode_winrates_count})")
            print(f"üîç 7. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º: actual_episodes = {episode_winrates_count}")
            actual_episodes = episode_winrates_count
            early_stopping_triggered = True
        
        # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ winrate'–æ–≤ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –º–µ–Ω—å—à–µ –ø–ª–∞–Ω–∏—Ä—É–µ–º—ã—Ö —ç–ø–∏–∑–æ–¥–æ–≤, 
        # —ç—Ç–æ —è–≤–Ω—ã–π –ø—Ä–∏–∑–Ω–∞–∫ early stopping
        elif episode_winrates_count < planned_episodes * 0.9:  # –ï—Å–ª–∏ –º–µ–Ω—å—à–µ 90% –æ—Ç –ø–ª–∞–Ω–∏—Ä—É–µ–º—ã—Ö
            early_stopping_triggered = True
            actual_episodes = episode_winrates_count
            print(f"üîç 7. –û–±–Ω–∞—Ä—É–∂–µ–Ω early stopping –ø–æ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—é episode_winrates: {episode_winrates_count} < {planned_episodes}")
            print(f"üîç 7. –û–±–Ω–æ–≤–ª–µ–Ω actual_episodes: {actual_episodes}")
    
    print(f"üîç –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: actual_episodes = {actual_episodes}, early_stopping = {early_stopping_triggered}")
    
    # –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ actual_episodes –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
    if episode_winrates:
        episode_winrates_count = len(episode_winrates)
        if actual_episodes != episode_winrates_count:
            print(f"üîç –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ò—Å–ø—Ä–∞–≤–ª—è–µ–º actual_episodes —Å {actual_episodes} –Ω–∞ {episode_winrates_count}")
            actual_episodes = episode_winrates_count
            early_stopping_triggered = True
    
    if actual_episodes < planned_episodes:
        early_stopping_triggered = True
        print(f"üéØ –ü–ª–∞–Ω–∏—Ä—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–∏–∑–æ–¥–æ–≤: {planned_episodes}")
        print(f"‚ö†Ô∏è –†–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–∏–∑–æ–¥–æ–≤: {actual_episodes}")
        print(f"üîÑ Early Stopping —Å—Ä–∞–±–æ—Ç–∞–ª! –û–±—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {actual_episodes} —ç–ø–∏–∑–æ–¥–µ –∏–∑ {planned_episodes}")
        print(f"üìä –ü—Ä–∏—á–∏–Ω–∞: –î–æ—Å—Ç–∏–≥–Ω—É—Ç —Å—Ç–∞–±–∏–ª—å–Ω—ã–π winrate –∏–ª–∏ —Å—Ä–∞–±–æ—Ç–∞–ª–∏ –¥—Ä—É–≥–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    else:
        print(f"üéØ –ü–ª–∞–Ω–∏—Ä—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–∏–∑–æ–¥–æ–≤: {planned_episodes}")
        print(f"‚úÖ –†–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–∏–∑–æ–¥–æ–≤: {actual_episodes}")
        print(f"‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é")
    
    if 'early_stopping_triggered' in results:
        early_stopping_triggered = results['early_stopping_triggered']
        print(f"üîÑ Early Stopping: {'–°—Ä–∞–±–æ—Ç–∞–ª' if early_stopping_triggered else '–ù–µ —Å—Ä–∞–±–æ—Ç–∞–ª'}")

    total_training_time = results.get('total_training_time') or results.get('training_time_seconds')
    if total_training_time is not None:
        try:
            total_training_time = float(total_training_time)
            print(f"‚è±Ô∏è –í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è: {total_training_time:.2f} —Å–µ–∫—É–Ω–¥ ({total_training_time/60:.1f} –º–∏–Ω—É—Ç)")
            speed = (actual_episodes / (total_training_time / 60)) if total_training_time else 0.0
            print(f"üöÄ –°–∫–æ—Ä–æ—Å—Ç—å: {speed:.1f} —ç–ø–∏–∑–æ–¥–æ–≤/–º–∏–Ω—É—Ç—É")
        except Exception:
            print(f"‚è±Ô∏è –í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è: {total_training_time}")
    else:
        print("‚è±Ô∏è –í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è: N/A")

    if early_stopping_triggered:
        print(f"üîÑ Early Stopping: –°—Ä–∞–±–æ—Ç–∞–ª –Ω–∞ {actual_episodes} —ç–ø–∏–∑–æ–¥–µ")
        print(f"üìä –ü—Ä–∏—á–∏–Ω–∞: –î–æ—Å—Ç–∏–≥–Ω—É—Ç —Å—Ç–∞–±–∏–ª—å–Ω—ã–π winrate –∏–ª–∏ —Å—Ä–∞–±–æ—Ç–∞–ª–∏ –¥—Ä—É–≥–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        print(f"üí° –û–±—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è")
    else:
        print(f"üîÑ Early Stopping: –ù–µ —Å—Ä–∞–±–æ—Ç–∞–ª")
        print(f"‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –ø–æ –≤—Å–µ–º –ø–ª–∞–Ω–∏—Ä—É–µ–º—ã–º —ç–ø–∏–∑–æ–¥–∞–º")

    winrates = episode_winrates
    if winrates:
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê WINRATE:")
        print(f"  ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π winrate: {np.mean(winrates):.3f}")
        best_winrate = results.get('best_winrate')
        if best_winrate is None and winrates:
            best_winrate = max(winrates)
        if best_winrate is not None:
            print(f"  ‚Ä¢ –õ—É—á—à–∏–π winrate: {float(best_winrate):.3f}")
        print(f"  ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π winrate: {np.min(winrates):.3f}")
        print(f"  ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π winrate: {np.max(winrates):.3f}")
        print(f"  ‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {np.std(winrates):.3f}")
        
        # –¢—Ä–µ–Ω–¥ winrate
        if len(winrates) > 10:
            first_10 = np.mean(winrates[:10])
            last_10 = np.mean(winrates[-10:])
            print(f"  ‚Ä¢ –ü–µ—Ä–≤—ã–µ 10 —ç–ø–∏–∑–æ–¥–æ–≤: {first_10:.3f}")
            print(f"  ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —ç–ø–∏–∑–æ–¥–æ–≤: {last_10:.3f}")
            print(f"  ‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {last_10 - first_10:+.3f}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–∏–∑–æ–¥–æ–≤ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
            print(f"  ‚Ä¢ –í—Å–µ–≥–æ —ç–ø–∏–∑–æ–¥–æ–≤ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ: {len(winrates)}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–¥–µ–ª–æ–∫
    trades = results.get('all_trades') or []
    if trades:
        print(f"\nüí∞ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–î–ï–õ–û–ö:")
        print(f"  ‚Ä¢ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {len(trades)}")
        
        # –ü—Ä–∏–±—ã–ª—å–Ω—ã–µ –∏ —É–±—ã—Ç–æ—á–Ω—ã–µ —Å–¥–µ–ª–∫–∏
        profitable_trades = [t for t in trades if t.get('roi', 0) > 0]
        loss_trades = [t for t in trades if t.get('roi', 0) < 0]
        
        print(f"  ‚Ä¢ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {len(profitable_trades)} ({len(profitable_trades)/len(trades)*100:.1f}%)")
        print(f"  ‚Ä¢ –£–±—ã—Ç–æ—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {len(loss_trades)} ({len(loss_trades)/len(trades)*100:.1f}%)")
        
        if profitable_trades:
            avg_profit = np.mean([t.get('roi', 0) for t in profitable_trades])
            max_profit = np.max([t.get('roi', 0) for t in profitable_trades])
            print(f"  ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: {avg_profit:.4f} ({avg_profit*100:.2f}%)")
            print(f"  ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: {max_profit:.4f} ({max_profit*100:.2f}%)")
        
        if loss_trades:
            avg_loss = np.mean([t.get('roi', 0) for t in loss_trades])
            max_loss = np.min([t.get('roi', 0) for t in loss_trades])
            print(f"  ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —É–±—ã—Ç–æ–∫: {avg_loss:.4f} ({avg_loss*100:.2f}%)")
            print(f"  ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É–±—ã—Ç–æ–∫: {max_loss:.4f} ({max_loss*100:.2f}%)")
        
        # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–¥–µ–ª–æ–∫
        durations = [t.get('duration', 0) for t in trades]
        if durations:
            print(f"  ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {np.mean(durations):.1f} –º–∏–Ω—É—Ç")
            print(f"  ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {np.min(durations):.1f} –º–∏–Ω—É—Ç")
            print(f"  ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {np.max(durations):.1f} –º–∏–Ω—É—Ç")
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    final_stats = results.get('final_stats')
    if isinstance(final_stats, dict):
        print(f"\nüìà –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        for key, value in final_stats.items():
            if isinstance(value, float):
                print(f"  ‚Ä¢ {key}: {value:.4f}")
            else:
                print(f"  ‚Ä¢ {key}: {value}")
    elif final_stats is not None:
        print(f"\nüìà –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê: {final_stats}")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—É—á–µ–Ω–∏–∏
    print(f"\nüìä –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û–ë –û–ë–£–ß–ï–ù–ò–ò:")
    print(f"  ‚Ä¢ –ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ —ç–ø–∏–∑–æ–¥—ã: {planned_episodes}")
    print(f"  ‚Ä¢ –†–µ–∞–ª—å–Ω—ã–µ —ç–ø–∏–∑–æ–¥—ã: {actual_episodes}")
    print(f"  ‚Ä¢ Early Stopping: {'–°—Ä–∞–±–æ—Ç–∞–ª' if early_stopping_triggered else '–ù–µ —Å—Ä–∞–±–æ—Ç–∞–ª'}")
    if early_stopping_triggered:
        print(f"  ‚Ä¢ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞: {actual_episodes} —ç–ø–∏–∑–æ–¥–µ")
        print(f"  ‚Ä¢ –ü—Ä–∏—á–∏–Ω–∞: –î–æ—Å—Ç–∏–≥–Ω—É—Ç —Å—Ç–∞–±–∏–ª—å–Ω—ã–π winrate")
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
    create_plots(results, results_file)
    
    print(f"\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –ì—Ä–∞—Ñ–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ plots/")

def create_plots(results, results_file):
    """
    –°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    """
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
    os.makedirs('plots', exist_ok=True)
    
    # –ì—Ä–∞—Ñ–∏–∫ winrate –ø–æ —ç–ø–∏–∑–æ–¥–∞–º
    if results['episode_winrates']:
        plt.figure(figsize=(12, 6))
        plt.plot(results['episode_winrates'], alpha=0.7, linewidth=1)
        plt.title('Winrate –ø–æ —ç–ø–∏–∑–æ–¥–∞–º')
        plt.xlabel('–≠–ø–∏–∑–æ–¥')
        plt.ylabel('Winrate')
        plt.grid(True, alpha=0.3)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ
        if len(results['episode_winrates']) > 10:
            window = min(10, len(results['episode_winrates']) // 10)
            moving_avg = np.convolve(results['episode_winrates'], np.ones(window)/window, mode='valid')
            plt.plot(range(window-1, len(results['episode_winrates'])), moving_avg, 
                    linewidth=2, color='red', label=f'–°–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ (–æ–∫–Ω–æ={window})')
            plt.legend()
        
        plt.tight_layout()
        plt.savefig('plots/winrate_progression.png', dpi=300, bbox_inches='tight')
        plt.close()
    
    # –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è ROI
    if results['all_trades']:
        rois = [t.get('roi', 0) for t in results['all_trades']]
        
        plt.figure(figsize=(12, 6))
        plt.hist(rois, bins=50, alpha=0.7, edgecolor='black')
        plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ ROI —Å–¥–µ–ª–æ–∫')
        plt.xlabel('ROI')
        plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫')
        plt.grid(True, alpha=0.3)
        plt.axvline(x=0, color='red', linestyle='--', alpha=0.7, label='–ë–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç—å')
        plt.legend()
        plt.tight_layout()
        plt.savefig('plots/roi_distribution.png', dpi=300, bbox_inches='tight')
        plt.close()
        
        # –ì—Ä–∞—Ñ–∏–∫ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏
        cumulative_roi = np.cumsum(rois)
        plt.figure(figsize=(12, 6))
        plt.plot(cumulative_roi, linewidth=1)
        plt.title('–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å')
        plt.xlabel('–ù–æ–º–µ—Ä —Å–¥–µ–ª–∫–∏')
        plt.ylabel('–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π ROI')
        plt.grid(True, alpha=0.3)
        plt.axhline(y=0, color='red', linestyle='--', alpha=0.7)
        plt.tight_layout()
        plt.savefig('plots/cumulative_profit.png', dpi=300, bbox_inches='tight')
        plt.close()

def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    """
    if len(sys.argv) == 1:
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—â–µ–º —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π –≤ temp/train_results
        results_dir = "temp/train_results"
        if not os.path.exists(results_dir):
            print(f"‚ùå –ü–∞–ø–∫–∞ {results_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            print("–°–æ–∑–¥–∞–π—Ç–µ –ø–∞–ø–∫—É temp/train_results –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ")
            return
        
        result_files = glob.glob(os.path.join(results_dir, 'training_results_*.pkl'))
        if not result_files:
            print(f"‚ùå –§–∞–π–ª—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ {results_dir}")
            print("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ")
            return
        
        # –ë–µ—Ä–µ–º —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π —Ñ–∞–π–ª
        results_file = max(result_files, key=os.path.getctime)
        print(f"üìä –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: {results_file}")
        
    elif len(sys.argv) == 2:
        results_file = sys.argv[1]
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å, –¥–æ–±–∞–≤–ª—è–µ–º –ø–∞–ø–∫—É
        if not os.path.isabs(results_file) and not results_file.startswith('temp/'):
            results_file = os.path.join("temp/train_results", results_file)
    else:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python analyze_training_results.py [results_file]")
        print("–ü—Ä–∏–º–µ—Ä: python analyze_training_results.py")
        print("–ü—Ä–∏–º–µ—Ä: python analyze_training_results.py training_results_1234567890.pkl")
        return
    
    if not os.path.exists(results_file):
        print(f"‚ùå –§–∞–π–ª {results_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    try:
        analyze_training_results(results_file)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
