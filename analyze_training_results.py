#!/usr/bin/env python3
"""
üìä –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—É—á–µ–Ω–∏—è DQN –º–æ–¥–µ–ª–∏

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python analyze_training_results.py training_results_1234567890.pkl
"""

import pickle
import numpy as np
import matplotlib.pyplot as plt
import sys
import os
import glob
from datetime import datetime

def analyze_training_results(results_file):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è –∏ —Å–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç
    """
    print(f"üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞: {results_file}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    with open(results_file, 'rb') as f:
        results = pickle.load(f)
    
    print("\n" + "="*60)
    print("üìà –û–¢–ß–ï–¢ –û–ë –û–ë–£–ß–ï–ù–ò–ò DQN –ú–û–î–ï–õ–ò")
    print("="*60)
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    print(f"üìÖ –î–∞—Ç–∞ –æ–±—É—á–µ–Ω–∏—è: {results['training_date']}")
    print(f"üéØ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–∏–∑–æ–¥–æ–≤: {results['episodes']}")
    print(f"‚è±Ô∏è –í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è: {results['total_training_time']:.2f} —Å–µ–∫—É–Ω–¥ ({results['total_training_time']/60:.1f} –º–∏–Ω—É—Ç)")
    print(f"üöÄ –°–∫–æ—Ä–æ—Å—Ç—å: {results['episodes']/(results['total_training_time']/60):.1f} —ç–ø–∏–∑–æ–¥–æ–≤/–º–∏–Ω—É—Ç—É")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ winrate
    winrates = results['episode_winrates']
    if winrates:
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê WINRATE:")
        print(f"  ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π winrate: {np.mean(winrates):.3f}")
        print(f"  ‚Ä¢ –õ—É—á—à–∏–π winrate: {results['best_winrate']:.3f}")
        print(f"  ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π winrate: {np.min(winrates):.3f}")
        print(f"  ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π winrate: {np.max(winrates):.3f}")
        print(f"  ‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {np.std(winrates):.3f}")
        
        # –¢—Ä–µ–Ω–¥ winrate
        if len(winrates) > 10:
            first_10 = np.mean(winrates[:10])
            last_10 = np.mean(winrates[-10:])
            print(f"  ‚Ä¢ –ü–µ—Ä–≤—ã–µ 10 —ç–ø–∏–∑–æ–¥–æ–≤: {first_10:.3f}")
            print(f"  ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —ç–ø–∏–∑–æ–¥–æ–≤: {last_10:.3f}")
            print(f"  ‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {last_10 - first_10:+.3f}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–¥–µ–ª–æ–∫
    trades = results['all_trades']
    if trades:
        print(f"\nüí∞ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–î–ï–õ–û–ö:")
        print(f"  ‚Ä¢ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {len(trades)}")
        
        # –ü—Ä–∏–±—ã–ª—å–Ω—ã–µ –∏ —É–±—ã—Ç–æ—á–Ω—ã–µ —Å–¥–µ–ª–∫–∏
        profitable_trades = [t for t in trades if t.get('roi', 0) > 0]
        loss_trades = [t for t in trades if t.get('roi', 0) < 0]
        
        print(f"  ‚Ä¢ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {len(profitable_trades)} ({len(profitable_trades)/len(trades)*100:.1f}%)")
        print(f"  ‚Ä¢ –£–±—ã—Ç–æ—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {len(loss_trades)} ({len(loss_trades)/len(trades)*100:.1f}%)")
        
        if profitable_trades:
            avg_profit = np.mean([t.get('roi', 0) for t in profitable_trades])
            max_profit = np.max([t.get('roi', 0) for t in profitable_trades])
            print(f"  ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: {avg_profit:.4f} ({avg_profit*100:.2f}%)")
            print(f"  ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: {max_profit:.4f} ({max_profit*100:.2f}%)")
        
        if loss_trades:
            avg_loss = np.mean([t.get('roi', 0) for t in loss_trades])
            max_loss = np.min([t.get('roi', 0) for t in loss_trades])
            print(f"  ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —É–±—ã—Ç–æ–∫: {avg_loss:.4f} ({avg_loss*100:.2f}%)")
            print(f"  ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É–±—ã—Ç–æ–∫: {max_loss:.4f} ({max_loss*100:.2f}%)")
        
        # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–¥–µ–ª–æ–∫
        durations = [t.get('duration', 0) for t in trades]
        if durations:
            print(f"  ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {np.mean(durations):.1f} –º–∏–Ω—É—Ç")
            print(f"  ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {np.min(durations):.1f} –º–∏–Ω—É—Ç")
            print(f"  ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {np.max(durations):.1f} –º–∏–Ω—É—Ç")
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    if 'final_stats' in results:
        print(f"\nüìà –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        for key, value in results['final_stats'].items():
            if isinstance(value, float):
                print(f"  ‚Ä¢ {key}: {value:.4f}")
            else:
                print(f"  ‚Ä¢ {key}: {value}")
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
    create_plots(results, results_file)
    
    print(f"\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –ì—Ä–∞—Ñ–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ plots/")

def create_plots(results, results_file):
    """
    –°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    """
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
    os.makedirs('plots', exist_ok=True)
    
    # –ì—Ä–∞—Ñ–∏–∫ winrate –ø–æ —ç–ø–∏–∑–æ–¥–∞–º
    if results['episode_winrates']:
        plt.figure(figsize=(12, 6))
        plt.plot(results['episode_winrates'], alpha=0.7, linewidth=1)
        plt.title('Winrate –ø–æ —ç–ø–∏–∑–æ–¥–∞–º')
        plt.xlabel('–≠–ø–∏–∑–æ–¥')
        plt.ylabel('Winrate')
        plt.grid(True, alpha=0.3)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ
        if len(results['episode_winrates']) > 10:
            window = min(10, len(results['episode_winrates']) // 10)
            moving_avg = np.convolve(results['episode_winrates'], np.ones(window)/window, mode='valid')
            plt.plot(range(window-1, len(results['episode_winrates'])), moving_avg, 
                    linewidth=2, color='red', label=f'–°–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ (–æ–∫–Ω–æ={window})')
            plt.legend()
        
        plt.tight_layout()
        plt.savefig('plots/winrate_progression.png', dpi=300, bbox_inches='tight')
        plt.close()
    
    # –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è ROI
    if results['all_trades']:
        rois = [t.get('roi', 0) for t in results['all_trades']]
        
        plt.figure(figsize=(12, 6))
        plt.hist(rois, bins=50, alpha=0.7, edgecolor='black')
        plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ ROI —Å–¥–µ–ª–æ–∫')
        plt.xlabel('ROI')
        plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫')
        plt.grid(True, alpha=0.3)
        plt.axvline(x=0, color='red', linestyle='--', alpha=0.7, label='–ë–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç—å')
        plt.legend()
        plt.tight_layout()
        plt.savefig('plots/roi_distribution.png', dpi=300, bbox_inches='tight')
        plt.close()
        
        # –ì—Ä–∞—Ñ–∏–∫ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏
        cumulative_roi = np.cumsum(rois)
        plt.figure(figsize=(12, 6))
        plt.plot(cumulative_roi, linewidth=1)
        plt.title('–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å')
        plt.xlabel('–ù–æ–º–µ—Ä —Å–¥–µ–ª–∫–∏')
        plt.ylabel('–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π ROI')
        plt.grid(True, alpha=0.3)
        plt.axhline(y=0, color='red', linestyle='--', alpha=0.7)
        plt.tight_layout()
        plt.savefig('plots/cumulative_profit.png', dpi=300, bbox_inches='tight')
        plt.close()

def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    """
    if len(sys.argv) == 1:
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—â–µ–º —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π –≤ temp/train_results
        results_dir = "temp/train_results"
        if not os.path.exists(results_dir):
            print(f"‚ùå –ü–∞–ø–∫–∞ {results_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            print("–°–æ–∑–¥–∞–π—Ç–µ –ø–∞–ø–∫—É temp/train_results –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ")
            return
        
        result_files = glob.glob(os.path.join(results_dir, 'training_results_*.pkl'))
        if not result_files:
            print(f"‚ùå –§–∞–π–ª—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ {results_dir}")
            print("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ")
            return
        
        # –ë–µ—Ä–µ–º —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π —Ñ–∞–π–ª
        results_file = max(result_files, key=os.path.getctime)
        print(f"üìä –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: {results_file}")
        
    elif len(sys.argv) == 2:
        results_file = sys.argv[1]
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å, –¥–æ–±–∞–≤–ª—è–µ–º –ø–∞–ø–∫—É
        if not os.path.isabs(results_file) and not results_file.startswith('temp/'):
            results_file = os.path.join("temp/train_results", results_file)
    else:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python analyze_training_results.py [results_file]")
        print("–ü—Ä–∏–º–µ—Ä: python analyze_training_results.py")
        print("–ü—Ä–∏–º–µ—Ä: python analyze_training_results.py training_results_1234567890.pkl")
        return
    
    if not os.path.exists(results_file):
        print(f"‚ùå –§–∞–π–ª {results_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    try:
        analyze_training_results(results_file)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
