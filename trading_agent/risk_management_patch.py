# –ü–∞—Ç—á –¥–ª—è trading_agent.py
# –î–æ–±–∞–≤–∏—Ç—å —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–µ—Ä–µ–¥ _execute_buy (–æ–∫–æ–ª–æ —Å—Ç—Ä–æ–∫–∏ 1620)

from typing import Dict, Optional, Tuple
import redis
import json
from datetime import datetime

def _get_risk_management_params(self) -> Tuple[float, float, str]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞ –∏–∑ Redis
    
    Returns:
        Tuple[float, float, str]: (take_profit_pct, stop_loss_pct, risk_type)
    """
    try:
        rc = redis.Redis(host='redis', port=6379, db=0, decode_responses=True)
        take_profit_pct = float(rc.get('trading:take_profit_pct') or '5.0')
        stop_loss_pct = float(rc.get('trading:stop_loss_pct') or '3.0')
        risk_type = rc.get('trading:risk_management_type') or 'exchange_orders'
        return take_profit_pct, abs(stop_loss_pct), risk_type
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞: {e}")
        return 5.0, 3.0, 'exchange_orders'

def _cancel_existing_risk_orders(self):
    """–û—Ç–º–µ–Ω—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ—Ä–¥–µ—Ä–∞ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞ –∏ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞"""
    try:
        if not hasattr(self, '_risk_orders') or not self._risk_orders:
            return
        
        for order_type, order_id in self._risk_orders.items():
            try:
                self.exchange.cancel_order(order_id, self.symbol)
                logger.info(f"–û—Ç–º–µ–Ω–µ–Ω {order_type} –æ—Ä–¥–µ—Ä {order_id}")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å {order_type} –æ—Ä–¥–µ—Ä {order_id}: {e}")
        
        self._risk_orders = {}
        
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–æ–≤: {e}")

def _set_take_profit_stop_loss_orders(self, entry_price: float, amount: float) -> Dict:
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Ä–¥–µ—Ä–∞ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞ –∏ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ –Ω–∞ –±–∏—Ä–∂–µ
    
    Args:
        entry_price: –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞ –≤ –ø–æ–∑–∏—Ü–∏—é
        amount: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
        
    Returns:
        Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ä–¥–µ—Ä–æ–≤
    """
    try:
        take_profit_pct, stop_loss_pct, risk_type = self._get_risk_management_params()
        
        if risk_type not in ['exchange_orders', 'both']:
            logger.info(f"–†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç —á–µ—Ä–µ–∑ –æ—Ä–¥–µ—Ä–∞ –æ—Ç–∫–ª—é—á–µ–Ω (type={risk_type})")
            return {"success": True, "message": "Exchange orders disabled"}
        
        # –û—Ç–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ—Ä–¥–µ—Ä–∞
        self._cancel_existing_risk_orders()
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—ã
        take_profit_price = entry_price * (1 + take_profit_pct / 100)
        stop_loss_price = entry_price * (1 - stop_loss_pct / 100)
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ü–µ–Ω—ã –ø–æ–¥ tickSize –±–∏—Ä–∂–∏
        take_profit_price = self._normalize_price(take_profit_price)
        stop_loss_price = self._normalize_price(stop_loss_price)
        
        orders_result = {}
        self._risk_orders = {}
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–¥–µ—Ä —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞ (–ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä)
        try:
            tp_order = self.exchange.create_limit_sell_order(
                self.symbol,
                amount,
                take_profit_price,
                {
                    'reduceOnly': True,
                    'timeInForce': 'GTC',  # Good Till Cancelled
                    'postOnly': False
                }
            )
            self._risk_orders['take_profit'] = tp_order['id']
            orders_result['take_profit'] = {
                'order_id': tp_order['id'],
                'price': take_profit_price,
                'amount': amount
            }
            logger.info(f"‚úÖ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {take_profit_price:.4f} (–æ—Ä–¥–µ—Ä {tp_order['id']})")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞: {e}")
            orders_result['take_profit_error'] = str(e)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–¥–µ—Ä —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ (—Å—Ç–æ–ø-–º–∞—Ä–∫–µ—Ç –æ—Ä–¥–µ—Ä)
        try:
            sl_order = self.exchange.create_stop_market_sell_order(
                self.symbol,
                amount,
                stop_loss_price,
                {
                    'reduceOnly': True,
                    'stopPrice': stop_loss_price
                }
            )
            self._risk_orders['stop_loss'] = sl_order['id']
            orders_result['stop_loss'] = {
                'order_id': sl_order['id'],
                'stop_price': stop_loss_price,
                'amount': amount
            }
            logger.info(f"üõ°Ô∏è –°—Ç–æ–ø-–ª–æ—Å—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {stop_loss_price:.4f} (–æ—Ä–¥–µ—Ä {sl_order['id']})")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞: {e}")
            orders_result['stop_loss_error'] = str(e)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ Redis –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        try:
            rc = redis.Redis(host='redis', port=6379, db=0, decode_responses=True)
            risk_info = {
                'entry_price': entry_price,
                'take_profit_price': take_profit_price,
                'stop_loss_price': stop_loss_price,
                'take_profit_pct': take_profit_pct,
                'stop_loss_pct': stop_loss_pct,
                'orders': self._risk_orders,
                'timestamp': datetime.now().isoformat()
            }
            rc.set(f'trading:risk_orders:{self.symbol}', json.dumps(risk_info))
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∏—Å–∫–∞—Ö: {e}")
        
        return {
            "success": True,
            "orders": orders_result,
            "take_profit_price": take_profit_price,
            "stop_loss_price": stop_loss_price
        }
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ä–¥–µ—Ä–æ–≤: {e}")
        return {"success": False, "error": str(e)}

def _normalize_price(self, price: float) -> float:
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Ü–µ–Ω—É –ø–æ–¥ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –±–∏—Ä–∂–∏ (tickSize)"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä—ã–Ω–∫–µ
        market = self.exchange.market(self.symbol)
        tick_size = market.get('precision', {}).get('price', 0.01)
        
        # –û–∫—Ä—É–≥–ª—è–µ–º —Ü–µ–Ω—É –¥–æ –Ω—É–∂–Ω–æ–≥–æ —à–∞–≥–∞
        normalized = round(price / tick_size) * tick_size
        return normalized
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Ü–µ–Ω—ã: {e}")
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ 4 –∑–Ω–∞–∫–æ–≤
        return round(price, 4)

def _check_take_profit_stop_loss(self) -> Optional[Dict]:
    """
    –†–µ–∑–µ—Ä–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞ –∏ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ (–¥–ª—è —Ä–µ–∂–∏–º–∞ bot_monitoring –∏–ª–∏ both)
    
    Returns:
        Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–¥–∞–∂–∏ –∏–ª–∏ None
    """
    try:
        if not self.current_position:
            return None
        
        take_profit_pct, stop_loss_pct, risk_type = self._get_risk_management_params()
        
        if risk_type not in ['bot_monitoring', 'both']:
            return None  # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–æ—Ç–æ–º –æ—Ç–∫–ª—é—á–µ–Ω
        
        current_price = self._get_current_price()
        if current_price <= 0:
            return None
        
        entry_price = self.current_position['entry_price']
        pnl_percentage = ((current_price - entry_price) / entry_price) * 100
        
        should_sell = False
        reason = ""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å
        if pnl_percentage <= -stop_loss_pct:
            should_sell = True
            reason = f"üõ°Ô∏è –†–µ–∑–µ—Ä–≤–Ω—ã–π —Å—Ç–æ–ø-–ª–æ—Å—Å: —É–±—ã—Ç–æ–∫ {pnl_percentage:.2f}% –ø—Ä–µ–≤—ã—Å–∏–ª –ø–æ—Ä–æ–≥ -{stop_loss_pct:.2f}%"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
        elif pnl_percentage >= take_profit_pct:
            should_sell = True
            reason = f"üéØ –†–µ–∑–µ—Ä–≤–Ω—ã–π —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: –ø—Ä–∏–±—ã–ª—å {pnl_percentage:.2f}% –¥–æ—Å—Ç–∏–≥–ª–∞ —Ü–µ–ª–∏ {take_profit_pct:.2f}%"
        
        if should_sell:
            logger.info(f"–†–µ–∑–µ—Ä–≤–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–¥–∞–∂–∞: {reason}")
            # –û—Ç–º–µ–Ω—è–µ–º –æ—Ä–¥–µ—Ä–∞ –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–∞–∂–µ–π
            self._cancel_existing_risk_orders()
            return self._execute_sell()
        
        return None
        
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞/—Å—Ç–æ–ø-–ª–æ—Å—Å–∞: {e}")
        return None

# –ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –ü–†–ò–ú–ï–ù–ï–ù–ò–Æ:

# 1. –í __init__ –¥–æ–±–∞–≤–∏—Ç—å:
# self._risk_orders = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞

# 2. –í _execute_buy –ø–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏ "logger.info(f"–ü–æ–∫—É–ø–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {order}, Trade #: {trade_record.trade_number}")":
# –î–æ–±–∞–≤–∏—Ç—å:
# 
# # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–¥–µ—Ä–∞ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞ –∏ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
# try:
#     risk_orders_result = self._set_take_profit_stop_loss_orders(executed_price, amount)
#     if risk_orders_result.get('success'):
#         logger.info(f"–û—Ä–¥–µ—Ä–∞ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: TP={risk_orders_result.get('take_profit_price')}, SL={risk_orders_result.get('stop_loss_price')}")
#     else:
#         logger.warning(f"–ü—Ä–æ–±–ª–µ–º–∞ —Å —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –æ—Ä–¥–µ—Ä–æ–≤: {risk_orders_result.get('error', 'Unknown')}")
# except Exception as e:
#     logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ä–¥–µ—Ä–æ–≤ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞: {e}")

# 3. –í make_trading_decision –¥–æ–±–∞–≤–∏—Ç—å –≤ –Ω–∞—á–∞–ª–µ:
# 
# # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ —É—Å–ª–æ–≤–∏—è —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞/—Å—Ç–æ–ø-–ª–æ—Å—Å–∞
# if self.current_position:
#     backup_sell_result = self._check_take_profit_stop_loss()
#     if backup_sell_result:
#         return 'sell', backup_sell_result
