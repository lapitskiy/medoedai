import requests
from flask import Flask, request, jsonify, render_template
from flask import redirect, url_for

import redis

from tasks.celery_tasks import celery
from celery.result import AsyncResult

import os
from tasks.celery_tasks import search_lstm_task, train_dqn, trade_step
from utils.db_utils import clean_ohlcv_data, delete_ohlcv_for_symbol_timeframe, load_latest_candles_from_csv_to_db
from utils.parser import parser_download_and_combine_with_library

app = Flask(__name__, template_folder="templates")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
redis_client = redis.Redis(host="redis", port=6379, db=0)

import logging
from flask import Response
import json
import threading
import time
import torch  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç torch –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è DQN

logging.basicConfig(level=logging.INFO)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è DQN —É–ª—É—á—à–µ–Ω–∏–π
dqn_test_results = {}
dqn_test_in_progress = False

@app.before_request
def log_request_info():
    logging.info(f"Request from {request.remote_addr}: {request.method} {request.path}")
    logging.info("Headers: %s", dict(request.headers))  # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏

@app.route("/")
def index():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á Celery –∏ –∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–µ"""
    task_ids = redis_client.keys("celery-task-meta-*")  # –ò—â–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
    print(f"task_ids {print(task_ids)}")
    tasks = []

    for task_id in task_ids:
        task_id = task_id.decode("utf-8").replace("celery-task-meta-", "")
        task = AsyncResult(task_id, app=celery)

        tasks.append({
            "task_id": task_id,
            "state": task.state,
            "result": task.result if task.successful() else None
        })

    return render_template("index.html", tasks=tasks)


@app.route("/task-start-search", methods=["POST"])
def start_task():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–¥–∞—á—É Celery –∏ –¥–µ–ª–∞–µ—Ç —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
    query = request.form.get("query", "")  # –ë–µ—Ä—ë–º query –∏–∑ —Ñ–æ—Ä–º—ã

    if not query:
        return redirect(url_for("index"))  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –≥–ª–∞–≤–Ω—É—é

    task = search_lstm_task.apply_async(args=[query])  # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ Celery

    return redirect(url_for("index"))  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –≥–ª–∞–≤–Ω—É—é


@app.route("/task-status/<task_id>", methods=["GET"])
def get_task_status(task_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –ø–æ task_id"""
    task = long_running_task.AsyncResult(task_id)

    if task.state == "PENDING":
        response = {"state": "PENDING", "status": "–ó–∞–¥–∞—á–∞ –≤ –æ—á–µ—Ä–µ–¥–∏"}
    elif task.state == "IN_PROGRESS":
        response = {"state": "IN_PROGRESS", "status": "–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è", "progress": task.info}
    elif task.state == "SUCCESS":
        response = {"state": "SUCCESS", "status": "–ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", "result": task.result}
    elif task.state == "FAILURE":
        response = {"state": "FAILURE", "status": "–û—à–∏–±–∫–∞", "error": str(task.info)}
    else:
        response = {"state": task.state, "status": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"}

    return jsonify(response)


@app.route("/start-search", methods=["POST"])
def start_parameter_search():
    try:
        response = requests.post(
            "http://parameter-search:5052/run-search",
            json={"query": "some_value"},  # –ó–¥–µ—Å—å –ø–µ—Ä–µ–¥–∞—ë–º –Ω—É–∂–Ω—ã–π query
            headers={"Content-Type": "application/json"}
        )
        return response.json()
    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.route('/train_dqn', methods=['POST'])
def train():
    task = train_dqn.apply_async(queue="train")
    return redirect(url_for("index"))

# –§—É–Ω–∫—Ü–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è DQN —É–ª—É—á—à–µ–Ω–∏–π
def test_neural_network():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏"""
    print("üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏...")
    
    try:
        from agents.vdqn.cfg.vconfig import vDqnConfig
        from agents.vdqn.dqnn import DQNN
        
        cfg = vDqnConfig()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º Dueling DQN
        obs_dim = 100
        act_dim = 3
        hidden_sizes = (512, 256, 128)
        
        model = DQNN(
            obs_dim=obs_dim,
            act_dim=act_dim,
            hidden_sizes=hidden_sizes,
            dropout_rate=cfg.dropout_rate,
            layer_norm=cfg.layer_norm,
            dueling=cfg.dueling_dqn
        )
        
        print(f"‚úÖ –ú–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        print(f"   - –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {hidden_sizes}")
        print(f"   - Dropout: {cfg.dropout_rate}")
        print(f"   - Layer Norm: {cfg.layer_norm}")
        print(f"   - Dueling: {cfg.dueling_dqn}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º forward pass
        test_input = torch.randn(1, obs_dim)
        with torch.no_grad():
            output = model(test_input)
        
        print(f"‚úÖ Forward pass —É—Å–ø–µ—à–µ–Ω")
        print(f"   - –í—Ö–æ–¥: {test_input.shape}")
        print(f"   - –í—ã—Ö–æ–¥: {output.shape}")
        print(f"   - Q-–∑–Ω–∞—á–µ–Ω–∏—è: {output.squeeze().tolist()}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ NaN
        if torch.isnan(output).any():
            print("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã NaN –∑–Ω–∞—á–µ–Ω–∏—è –≤ –≤—ã—Ö–æ–¥–µ!")
            return False, "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã NaN –∑–Ω–∞—á–µ–Ω–∏—è –≤ –≤—ã—Ö–æ–¥–µ"
        else:
            print("‚úÖ NaN –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
            return True, "–ú–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞ –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏: {e}")
        return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏: {str(e)}"

def test_dqn_solver():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π DQN solver"""
    print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ DQN solver...")
    
    try:
        from agents.vdqn.cfg.vconfig import vDqnConfig
        from agents.vdqn.dqnsolver import DQNSolver
        import numpy as np
        
        cfg = vDqnConfig()
        
        # –°–æ–∑–¥–∞–µ–º solver
        observation_space = 100
        action_space = 3
        
        solver = DQNSolver(observation_space, action_space, load=False)
        
        print(f"‚úÖ DQN Solver —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        print(f"   - Prioritized Replay: {cfg.prioritized}")
        print(f"   - Memory Size: {cfg.memory_size}")
        print(f"   - Batch Size: {cfg.batch_size}")
        print(f"   - Learning Rate: {cfg.lr}")
        print(f"   - Gamma: {cfg.gamma}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
        test_state = np.random.randn(100)
        test_action = 1
        test_reward = 0.5
        test_next_state = np.random.randn(100)
        test_done = False
        
        solver.store_transition(test_state, test_action, test_reward, test_next_state, test_done)
        print(f"‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω –≤ replay buffer")
        print(f"   - –†–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞: {len(solver.memory)}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è
        action = solver.act(test_state)
        print(f"‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –≤—ã–±—Ä–∞–Ω–æ: {action}")
        print(f"   - Epsilon: {solver.epsilon:.4f}")
        
        return True, "DQN Solver –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ"
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ DQN solver: {e}")
        return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ DQN solver: {str(e)}"

def test_configuration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
    print("\n‚öôÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    try:
        from agents.vdqn.cfg.vconfig import vDqnConfig
        
        cfg = vDqnConfig()
        
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞:")
        print(f"   - Epsilon: {cfg.eps_start} ‚Üí {cfg.eps_final} –∑–∞ {cfg.eps_decay_steps} —à–∞–≥–æ–≤")
        print(f"   - –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {cfg.hidden_sizes}")
        print(f"   - –û–±—É—á–µ–Ω–∏–µ: lr={cfg.lr}, gamma={cfg.gamma}")
        print(f"   - Replay: size={cfg.memory_size}, batch={cfg.batch_size}")
        print(f"   - PER: {cfg.prioritized}, alpha={cfg.alpha}, beta={cfg.beta}")
        print(f"   - –£–ª—É—á—à–µ–Ω–∏—è: dropout={cfg.dropout_rate}, layer_norm={cfg.layer_norm}")
        print(f"   - DQN: double={cfg.double_dqn}, dueling={cfg.dueling_dqn}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if cfg.batch_size > cfg.memory_size:
            print("‚ùå Batch size –±–æ–ª—å—à–µ memory size!")
            return False, "Batch size –±–æ–ª—å—à–µ memory size"
        else:
            print("‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–≤–º–µ—Å—Ç–∏–º—ã")
        
        if cfg.eps_final >= cfg.eps_start:
            print("‚ùå Epsilon final –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω—å—à–µ eps start!")
            return False, "Epsilon final –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω—å—à–µ eps start"
        else:
            print("‚úÖ Epsilon –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
        
        return True, "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {str(e)}"

def test_nan_handling():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É NaN –∑–Ω–∞—á–µ–Ω–∏–π"""
    print("\nüõ°Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ NaN –∑–Ω–∞—á–µ–Ω–∏–π...")
    
    try:
        from agents.vdqn.cfg.vconfig import vDqnConfig
        from agents.vdqn.dqnn import DQNN
        from agents.vdqn.dqnsolver import DQNSolver
        import numpy as np
        
        cfg = vDqnConfig()
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å
        model = DQNN(100, 3, (512, 256, 128))
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å NaN –≤—Ö–æ–¥–æ–º
        test_input = np.random.randn(100)
        test_input[0] = np.nan  # –î–æ–±–∞–≤–ª—è–µ–º NaN
        
        print(f"   - –í—Ö–æ–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç NaN: {np.isnan(test_input).any()}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ solver
        solver = DQNSolver(100, 3, load=False)
        
        # –î–æ–ª–∂–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–º–µ–Ω–∏—Ç—å NaN –Ω–∞ –Ω—É–ª–∏
        action = solver.act(test_input)
        print(f"‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –≤—ã–±—Ä–∞–Ω–æ –¥–∞–∂–µ —Å NaN –≤—Ö–æ–¥–æ–º: {action}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ NaN –∑–∞–º–µ–Ω–µ–Ω—ã
        cleaned_input = np.nan_to_num(test_input, nan=0.0)
        print(f"   - NaN –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ –Ω—É–ª–∏: {np.isnan(cleaned_input).any()}")
        
        return True, "–û–±—Ä–∞–±–æ—Ç–∫–∞ NaN –∑–Ω–∞—á–µ–Ω–∏–π –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ NaN: {e}")
        return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ NaN: {str(e)}"

# –ù–æ–≤—ã–µ API endpoints –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è DQN —É–ª—É—á—à–µ–Ω–∏–π
def run_dqn_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π DQN –∞–≥–µ–Ω—Ç–∞"""
    global dqn_test_results, dqn_test_in_progress
    
    dqn_test_in_progress = True
    dqn_test_results = {
        'status': 'running',
        'start_time': time.time(),
        'tests': {},
        'overall_success': True,
        'message': '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å...'
    }
    
    try:
        print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π DQN –∞–≥–µ–Ω—Ç–∞")
        print("=" * 50)
        
        # –¢–µ—Å—Ç 1: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        print("\n1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        success, message = test_configuration()
        dqn_test_results['tests']['configuration'] = {
            'success': success,
            'message': message,
            'timestamp': time.time()
        }
        if not success:
            dqn_test_results['overall_success'] = False
        
        # –¢–µ—Å—Ç 2: –ù–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å
        print("\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏...")
        success, message = test_neural_network()
        dqn_test_results['tests']['neural_network'] = {
            'success': success,
            'message': message,
            'timestamp': time.time()
        }
        if not success:
            dqn_test_results['overall_success'] = False
        
        # –¢–µ—Å—Ç 3: DQN Solver
        print("\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DQN Solver...")
        success, message = test_dqn_solver()
        dqn_test_results['tests']['dqn_solver'] = {
            'success': success,
            'message': message,
            'timestamp': time.time()
        }
        if not success:
            dqn_test_results['overall_success'] = False
        
        # –¢–µ—Å—Ç 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ NaN
        print("\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ NaN...")
        success, message = test_nan_handling()
        dqn_test_results['tests']['nan_handling'] = {
            'success': success,
            'message': message,
            'timestamp': time.time()
        }
        if not success:
            dqn_test_results['overall_success'] = False
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        end_time = time.time()
        duration = end_time - dqn_test_results['start_time']
        
        if dqn_test_results['overall_success']:
            print("\n" + "=" * 50)
            print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            print("üéØ DQN –∞–≥–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
            
            dqn_test_results['status'] = 'completed'
            dqn_test_results['message'] = f'–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –∑–∞ {duration:.2f} —Å–µ–∫—É–Ω–¥'
        else:
            print("\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
            dqn_test_results['status'] = 'failed'
            dqn_test_results['message'] = f'–¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —Å –æ—à–∏–±–∫–∞–º–∏ –∑–∞ {duration:.2f} —Å–µ–∫—É–Ω–¥'
        
        dqn_test_results['end_time'] = end_time
        dqn_test_results['duration'] = duration
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        
        dqn_test_results['status'] = 'error'
        dqn_test_results['message'] = f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}'
        dqn_test_results['overall_success'] = False
    
    finally:
        dqn_test_in_progress = False

@app.route('/test_dqn_improvements', methods=['POST'])
def test_dqn_improvements():
    """API endpoint –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–∏–π DQN"""
    global dqn_test_in_progress, dqn_test_results
    
    if dqn_test_in_progress:
        return jsonify({
            'status': 'error',
            'message': '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è'
        }), 400
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    test_thread = threading.Thread(target=run_dqn_tests)
    test_thread.daemon = True
    test_thread.start()
    
    return jsonify({
        'status': 'success',
        'message': '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π DQN –∑–∞–ø—É—â–µ–Ω–æ',
        'test_id': int(time.time())
    })

@app.route('/test_dqn_status', methods=['GET'])
def test_dqn_status():
    """API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    global dqn_test_results, dqn_test_in_progress
    
    if not dqn_test_results:
        return jsonify({
            'status': 'not_started',
            'message': '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª–æ—Å—å'
        })
    
    return jsonify(dqn_test_results)

@app.route('/test_dqn_results', methods=['GET'])
def test_dqn_results():
    """API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    global dqn_test_results
    
    if not dqn_test_results or dqn_test_results['status'] == 'running':
        return jsonify({
            'status': 'not_ready',
            'message': '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤—ã'
        })
    
    return jsonify(dqn_test_results)

@app.route('/trade_dqn', methods=['POST'])
def trade():
    task = trade_step.apply_async()
    return redirect(url_for("index"))

# –ù–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
@app.route('/clean_data', methods=['POST'])
def clean_data():
    timeframes_to_clean = ['5m', '15m', '1h']
    symbol_name ='BTC/USDT'
    
    max_close_change_percent = 15.0
    max_hl_range_percent = 20.0
    volume_multiplier = 10.0

    results = []
    for tf in timeframes_to_clean:
        try:
            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—á–∏—Å—Ç–∫–∏ –Ω–∞–ø—Ä—è–º—É—é (–æ–Ω–∞ –±–æ–ª—å—à–µ –Ω–µ Celery-–∑–∞–¥–∞—á–∞)
            result = clean_ohlcv_data(tf, symbol_name,
                                      max_close_change_percent,
                                      max_hl_range_percent,
                                      volume_multiplier)
            results.append(result)
        except Exception as e:
            results.append({"status": "error", "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ {tf} –¥–ª—è {symbol_name}: {str(e)}"})

    return jsonify({'status': '–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –≤—Å–µ—Ö —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤.', 'results': results})


# –ù–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
@app.route('/clean_db', methods=['POST'])
def clean_db():
    timeframes_to_clean = '5m'
    symbol_name ='BTC/USDT'            

    results = []
    try:
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—á–∏—Å—Ç–∫–∏ –Ω–∞–ø—Ä—è–º—É—é (–æ–Ω–∞ –±–æ–ª—å—à–µ –Ω–µ Celery-–∑–∞–¥–∞—á–∞)
        delete_ohlcv_for_symbol_timeframe('BTC/USDT', timeframes_to_clean)
        delete_ohlcv_for_symbol_timeframe('BTCUSDT', timeframes_to_clean)
    except Exception as e:
        results.append({"status": "error", "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–ª—è {symbol_name}: {str(e)}"})


    return jsonify({'status': '–û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –æ—Ç –≤—Å–µ—Ö —Å–≤–µ—á–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤.', 'results': results})

# –ù–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
@app.route('/parser', methods=['POST'])
def parser():
    results = []
    symbol = 'BTCUSDT'
    interval = '5m'
    desired_candles = 100000
    csv_file_path = None

    try:
        # 1. –í—ã–∑—ã–≤–∞–µ–º –≤–Ω–µ—à–Ω—é—é —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞–µ—Ç CSV —Å 100 000 —Å–≤–µ—á–∞–º–∏
        csv_file_path = parser_download_and_combine_with_library(
            symbol='BTCUSDT',
            interval=interval,
            months_to_fetch=12, # –≠—Ç–æ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è parser_download_and_combine_with_library
            desired_candles=desired_candles
        )
        results.append({"status": "success", "message": f"CSV —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {csv_file_path}"})

        # 2. –ó–∞–≥—Ä—É–∂–∞–µ–º —ç—Ç–∏ 100 000 —Å–≤–µ—á–µ–π –∏–∑ CSV –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î
        loaded_count = load_latest_candles_from_csv_to_db(
            file_path=csv_file_path,
            symbol_name=symbol,
            timeframe=interval
        )
        if loaded_count > 0:
            results.append({"status": "success", "message": f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {loaded_count} —Å–≤–µ—á–µ–π –∏–∑ CSV –≤ –ë–î."})
        else:
            results.append({"status": "warning", "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–µ—á–∏ –∏–∑ CSV –≤ –ë–î."})

    except Exception as e:
        results.append({"status": "error", "message": f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–∞—Ä—Å–∏–Ω–≥–∞: {str(e)}"})

    response = {'status': '–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω', 'results': results}
    return Response(json.dumps(response, ensure_ascii=False), mimetype='application/json')


if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5050))  # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    app.run(host="0.0.0.0", port=port, debug=True)    


