#!/usr/bin/env python3
"""
üöÄ MedoedAI - Flask –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è DQN —Ç–æ—Ä–≥–æ–≤—ã–º –±–æ—Ç–æ–º

–ó–∞–ø—É—Å–∫:
    python main.py              # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫
    flask run                   # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞
    FLASK_APP=main.py flask run # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞
"""

import requests
from flask import Flask, request, jsonify, render_template
from flask import redirect, url_for

import redis

from tasks.celery_tasks import celery
from celery.result import AsyncResult

import os
from tasks.celery_tasks import search_lstm_task, train_dqn, train_dqn_multi_crypto, trade_step, start_trading_task, train_dqn_symbol
from utils.db_utils import clean_ohlcv_data, delete_ohlcv_for_symbol_timeframe, load_latest_candles_from_csv_to_db
from utils.parser import parser_download_and_combine_with_library

import logging
from flask import Response
import json

import time

import glob
import os

import docker

from tasks.celery_tasks import start_trading_task

# –£–±–∏—Ä–∞–µ–º –∏–º–ø–æ—Ä—Ç TradingAgent –∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
# from trading_agent.trading_agent import TradingAgent
# trading_agent = None

# –£–±–∏—Ä–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é init_trading_agent
# def init_trading_agent():
#     """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞"""
#     global trading_agent
#     try:
#         trading_agent = TradingAgent()
#         app.logger.info("–¢–æ—Ä–≥–æ–≤—ã–π –∞–≥–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
#     except Exception as e:
#         app.logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞: {e}")

logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

# –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ Redis –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
def clear_redis_on_startup():
    """–û—á–∏—â–∞–µ—Ç Redis –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Redis (–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ö–æ—Å—Ç—ã)
        redis_hosts = ['localhost', 'redis', '127.0.0.1']
        r = None
        
        for host in redis_hosts:
            try:
                r = redis.Redis(host=host, port=6379, db=0, socket_connect_timeout=5)
                r.ping()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ Redis –Ω–∞ {host}")
                break
            except Exception:
                continue
        
        if r is None:
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis")
            return None
        
        # –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        r.flushall()
        print("‚úÖ Redis –æ—á–∏—â–µ–Ω –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
        if r.dbsize() == 0:
            print("‚úÖ Redis –ø—É—Å—Ç, –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        else:
            print(f"‚ö†Ô∏è –í Redis –æ—Å—Ç–∞–ª–æ—Å—å {r.dbsize()} –∫–ª—é—á–µ–π")
            
        return r
            
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å Redis: {e}")
        print("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–µ–∑ –æ—á–∏—Å—Ç–∫–∏ Redis")
        return None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Redis –∫–ª–∏–µ–Ω—Ç –∏ –æ—á–∏—â–∞–µ–º –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
redis_client = clear_redis_on_startup()
if redis_client is None:
    # Fallback - —Å–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –±–µ–∑ –æ—á–∏—Å—Ç–∫–∏
    try:
        redis_client = redis.Redis(host='localhost', port=6379, db=0)
    except:
        redis_client = redis.Redis(host='redis', port=6379, db=0)



def ensure_symbol_worker(queue_name: str) -> dict:
    """–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ Celery-–≤–æ—Ä–∫–µ—Ä–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏.

    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç Redis-–ª–æ–∫ `celery:worker:<queue>`
    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ `celery-worker`
    - –ü—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ ‚Äî –∑–∞–ø—É—Å–∫–∞–µ—Ç –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –≤–æ—Ä–∫–µ—Ä–∞ –¥–ª—è –æ—á–µ—Ä–µ–¥–∏
    """
    try:
        lock_key = f"celery:worker:{queue_name}"
        # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ Redis-–º–µ—Ç–∫–µ
        try:
            if redis_client.get(lock_key):
                return {"started": False, "reason": "already_marked_running"}
        except Exception:
            pass

        import docker
        client = docker.from_env()
        container = client.containers.get('celery-worker')
        app.logger.info(f"[ensure_worker] container 'celery-worker' status={container.status}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –ø—Ä–æ—Ü–µ—Å—Å–∞–º –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        check_cmd = f"sh -lc 'pgrep -af \"celery.*-Q {queue_name}\" >/dev/null 2>&1'"
        exec_res = container.exec_run(check_cmd, tty=True)
        already_running = (exec_res.exit_code == 0)
        app.logger.info(f"[ensure_worker] check queue={queue_name} exit={exec_res.exit_code}")

        if already_running:
            # –°—Ç–∞–≤–∏–º –º–µ—Ç–∫—É –≤ Redis –∏ –≤—ã—Ö–æ–¥–∏–º
            try:
                redis_client.setex(lock_key, 24 * 3600, 'running')
            except Exception:
                pass
            return {"started": False, "reason": "process_exists"}

        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –≤–æ—Ä–∫–µ—Ä-–ø—Ä–æ—Ü–µ—Å—Å –≤ —Ñ–æ–Ω–µ
        start_cmd = (
            "sh -lc '"
            "mkdir -p /workspace/logs && "
            f"(OMP_NUM_THREADS=4 MKL_NUM_THREADS=4 TORCH_NUM_THREADS=4 nohup celery -A tasks.celery_tasks worker -Q {queue_name} -P solo -c 1 --loglevel=info "
            f"> /workspace/logs/{queue_name}.log 2>&1 & echo $! > /workspace/logs/{queue_name}.pid) "
            "'"
        )
        res = container.exec_run(start_cmd, tty=True)
        app.logger.info(f"[ensure_worker] start queue={queue_name} exit={res.exit_code}")

        # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        exec_res2 = container.exec_run(check_cmd, tty=True)
        app.logger.info(f"[ensure_worker] recheck queue={queue_name} exit={exec_res2.exit_code}")

        # –û—Ç–º–µ—á–∞–µ–º –≤ Redis
        try:
            redis_client.setex(lock_key, 24 * 3600, 'running')
        except Exception:
            pass

        return {"started": True}
    except Exception as e:
        app.logger.error(f"[ensure_worker] error: {e}")
        return {"started": False, "error": str(e)}

@app.before_request
def log_request_info():
    logging.info(f"Request from {request.remote_addr}: {request.method} {request.path}")
    logging.info("Headers: %s", dict(request.headers))  # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏

@app.route("/")
def index():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á Celery –∏ –∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–µ"""
    tasks = []

    # 1) –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ ui:tasks
    try:
        recent_ids = redis_client.lrange("ui:tasks", 0, 49) or []
        for raw_id in recent_ids:
            try:
                task_id = raw_id.decode("utf-8")
            except Exception:
                task_id = str(raw_id)
            task = AsyncResult(task_id, app=celery)
            tasks.append({
                "task_id": task_id,
                "state": task.state,
                "result": task.result if task.successful() else None
            })
    except Exception as _e:
        app.logger.error(f"/ index: –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è ui:tasks: {_e}")

    # 2) Fallback: —Å–∫–∞–Ω–∏—Ä—É–µ–º backend –ø–æ –∫–ª—é—á–∞–º (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ –¥–ª—è PENDING)
    if not tasks:
        try:
            task_keys = redis_client.keys("celery-task-meta-*") or []
            for key in task_keys:
                task_id = key.decode("utf-8").replace("celery-task-meta-", "")
                task = AsyncResult(task_id, app=celery)
                tasks.append({
                    "task_id": task_id,
                    "state": task.state,
                    "result": task.result if task.successful() else None
                })
        except Exception as _e:
            app.logger.error(f"/ index: –æ—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è backend: {_e}")

    return render_template("index.html", tasks=tasks)


@app.route("/task-start-search", methods=["POST"])
def start_task():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–¥–∞—á—É Celery –∏ –¥–µ–ª–∞–µ—Ç —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
    query = request.form.get("query", "")  # –ë–µ—Ä—ë–º query –∏–∑ —Ñ–æ—Ä–º—ã

    if not query:
        return redirect(url_for("index"))  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –≥–ª–∞–≤–Ω—É—é

    task = search_lstm_task.apply_async(args=[query])  # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ Celery

    return redirect(url_for("index"))  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –≥–ª–∞–≤–Ω—É—é


@app.route("/task-status/<task_id>", methods=["GET"])
def get_task_status(task_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –ø–æ task_id"""
    task = AsyncResult(task_id, app=celery)

    if task.state == "PENDING":
        response = {"state": "PENDING", "status": "–ó–∞–¥–∞—á–∞ –≤ –æ—á–µ—Ä–µ–¥–∏"}
    elif task.state == "IN_PROGRESS":
        response = {"state": "IN_PROGRESS", "status": "–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è", "progress": task.info}
    elif task.state == "SUCCESS":
        response = {"state": "SUCCESS", "status": "–ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", "result": task.result}
    elif task.state == "FAILURE":
        response = {"state": "FAILURE", "status": "–û—à–∏–±–∫–∞", "error": str(task.info)}
    else:
        response = {"state": task.state, "status": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"}

    return jsonify(response)


@app.route("/start-search", methods=["POST"])
def start_parameter_search():
    try:
        response = requests.post(
            "http://parameter-search:5052/run-search",
            json={"query": "some_value"},  # –ó–¥–µ—Å—å –ø–µ—Ä–µ–¥–∞—ë–º –Ω—É–∂–Ω—ã–π query
            headers={"Content-Type": "application/json"}
        )
        return response.json()
    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.route('/train_dqn', methods=['POST'])
def train():
    task = train_dqn.apply_async(queue="train")
    return redirect(url_for("index"))

@app.route('/train_dqn_multi_crypto', methods=['POST'])
def train_multi_crypto():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ DQN"""
    task = train_dqn_multi_crypto.apply_async(queue="train")
    return redirect(url_for("index"))

@app.route('/train_dqn_symbol', methods=['POST'])
def train_dqn_symbol_route():
    data = request.get_json(silent=True) or {}
    symbol = data.get('symbol') or request.form.get('symbol') or 'BTCUSDT'
    # –û—á–µ—Ä–µ–¥—å per-symbol
    queue_name = f"train_{symbol.lower()}"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏ per-symbol –≤ Redis + Celery
    running_key = f"celery:train:task:{symbol.upper()}"
    try:
        existing_task_id = redis_client.get(running_key)
        if existing_task_id:
            try:
                existing_task_id = existing_task_id.decode('utf-8')
            except Exception:
                existing_task_id = str(existing_task_id)
            ar = AsyncResult(existing_task_id, app=celery)
            if ar.state in ("PENDING", "STARTED", "RETRY", "IN_PROGRESS"):
                app.logger.info(f"train for {symbol} already running: {existing_task_id} state={ar.state}")
                return redirect(url_for("index"))
    except Exception as _e:
        app.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–¥–∞—á—É –¥–ª—è {symbol}: {_e}")

    # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ–±—â—É—é –æ—á–µ—Ä–µ–¥—å 'train' (—Å–ª—É—à–∞–µ—Ç—Å—è –±–∞–∑–æ–≤—ã–º –≤–æ—Ä–∫–µ—Ä–æ–º)
    task = train_dqn_symbol.apply_async(args=[symbol], queue="train")
    app.logger.info(f"/train_dqn_symbol queued symbol={symbol} queue=train task_id={task.id}")
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º task_id –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–π –∏ –æ—Ç–º–µ—Ç–∫—É per-symbol
    try:
        redis_client.lrem("ui:tasks", 0, task.id)  # —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        redis_client.lpush("ui:tasks", task.id)
        redis_client.ltrim("ui:tasks", 0, 49)     # –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
        redis_client.setex(running_key, 24 * 3600, task.id)
    except Exception as _e:
        app.logger.error(f"/train_dqn_symbol: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å ui:tasks: {_e}")
    return redirect(url_for("index"))





@app.route('/trade_dqn', methods=['POST'])
def trade():
    task = trade_step.apply_async()
    return redirect(url_for("index"))

# –ù–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
@app.route('/clean_data', methods=['POST'])
def clean_data():
    timeframes_to_clean = ['5m', '15m', '1h']
    symbol_name ='BTCUSDT'
    
    max_close_change_percent = 15.0
    max_hl_range_percent = 20.0
    volume_multiplier = 10.0

    results = []
    for tf in timeframes_to_clean:
        try:
            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—á–∏—Å—Ç–∫–∏ –Ω–∞–ø—Ä—è–º—É—é (–æ–Ω–∞ –±–æ–ª—å—à–µ –Ω–µ Celery-–∑–∞–¥–∞—á–∞)
            result = clean_ohlcv_data(tf, symbol_name,
                                      max_close_change_percent,
                                      max_hl_range_percent,
                                      volume_multiplier)
            results.append(result)
        except Exception as e:
            results.append({"status": "error", "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ {tf} –¥–ª—è {symbol_name}: {str(e)}"})

    return jsonify({'status': '–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –≤—Å–µ—Ö —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤.', 'results': results})


# –ù–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
@app.route('/clean_db', methods=['POST'])
def clean_db():
    timeframes_to_clean = '5m'
    symbol_name ='BTCUSDT'            

    results = []
    try:
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—á–∏—Å—Ç–∫–∏ –Ω–∞–ø—Ä—è–º—É—é (–æ–Ω–∞ –±–æ–ª—å—à–µ –Ω–µ Celery-–∑–∞–¥–∞—á–∞)
        delete_ohlcv_for_symbol_timeframe('BTCUSDT', timeframes_to_clean)
    except Exception as e:
        results.append({"status": "error", "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–ª—è {symbol_name}: {str(e)}"})


    return jsonify({'status': '–û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –æ—Ç –≤—Å–µ—Ö —Å–≤–µ—á–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤.', 'results': results})

@app.route('/analyze_training_results', methods=['POST'])
def analyze_training_results():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è DQN –º–æ–¥–µ–ª–∏"""
    try:
        # –ò—â–µ–º —Ñ–∞–π–ª—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–±—É—á–µ–Ω–∏—è –≤ –ø–∞–ø–∫–µ result
        results_dir = "result"
        if not os.path.exists(results_dir):
            return jsonify({
                'status': 'error',
                'message': f'–ü–∞–ø–∫–∞ {results_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ.',
                'success': False
            }), 404
        
        result_files = glob.glob(os.path.join(results_dir, 'train_result_*.pkl'))
        
        if not result_files:
            return jsonify({
                'status': 'error',
                'message': '–§–∞–π–ª—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—É—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ.',
                'success': False
            }), 404
        
        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –±–µ—Ä—ë–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
        data = request.get_json(silent=True) or {}
        requested_file = data.get('file')
        selected_file = None
        if requested_file:
            # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è: –ø—É—Ç—å –≤–Ω—É—Ç—Ä–∏ result/
            safe_path = os.path.abspath(requested_file)
            base_path = os.path.abspath(results_dir)
            if safe_path.startswith(base_path) and os.path.exists(safe_path):
                selected_file = safe_path
        # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω/–Ω–µ–≤–∞–ª–∏–¥–µ–Ω ‚Äî –±–µ—Ä—ë–º —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π
        if not selected_file:
            selected_file = max(result_files, key=os.path.getctime)
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∞–Ω–∞–ª–∏–∑–∞
        try:
            from analyze_training_results import analyze_training_results as analyze_func
        except ImportError:
            # –ï—Å–ª–∏ –º–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Ñ—É–Ω–∫—Ü–∏—é –∞–Ω–∞–ª–∏–∑–∞
            def analyze_func(filename):
                print(f"üìä –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞: {filename}")
                print("‚ö†Ô∏è –ú–æ–¥—É–ª—å –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ matplotlib –∏ numpy.")
                print("üí° –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: pip install matplotlib numpy")
                return "–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        try:
            import pickle
            with open(selected_file, 'rb') as f:
                results = pickle.load(f)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± actual_episodes
            if 'actual_episodes' in results:
                actual_episodes = results['actual_episodes']
                planned_episodes = results['episodes']
                
                if actual_episodes < planned_episodes:
                    print(f"‚ö†Ô∏è Early Stopping —Å—Ä–∞–±–æ—Ç–∞–ª! –û–±—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {actual_episodes} —ç–ø–∏–∑–æ–¥–µ –∏–∑ {planned_episodes}")
                else:
                    print(f"‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é: {actual_episodes} —ç–ø–∏–∑–æ–¥–æ–≤")                    
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ—Ç–∞–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
        print(f"üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞: {selected_file}")
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º stdout –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –≤—ã–≤–æ–¥–∞
        import io
        import sys
        from contextlib import redirect_stdout
        
        output = io.StringIO()
        with redirect_stdout(output):
            analyze_func(selected_file)
        
        analysis_output = output.getvalue()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± actual_episodes –≤ –æ—Ç–≤–µ—Ç
        response_data = {
            'status': 'success',
            'message': '–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ',
            'success': True,
            'file_analyzed': selected_file,
            'output': analysis_output,
            'available_files': result_files
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–ø–∏–∑–æ–¥–∞—Ö –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º episode_winrates_count –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è early stopping
            if 'episode_winrates' in results:
                response_data['episode_winrates_count'] = len(results['episode_winrates'])
                print(f"üîç episode_winrates_count: {response_data['episode_winrates_count']}")
            
            if 'actual_episodes' in results:
                response_data['actual_episodes'] = results['actual_episodes']
                response_data['episodes'] = results['episodes']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ actual_episodes –∏ episode_winrates_count
                if 'episode_winrates_count' in response_data:
                    if response_data['actual_episodes'] != response_data['episode_winrates_count']:
                        print(f"‚ö†Ô∏è –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï: actual_episodes={response_data['actual_episodes']}, episode_winrates_count={response_data['episode_winrates_count']}")
                        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º actual_episodes –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                        response_data['actual_episodes'] = response_data['episode_winrates_count']
                        print(f"üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: actual_episodes = {response_data['actual_episodes']}")
            else:
                # –ï—Å–ª–∏ actual_episodes –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–∑ –ª–æ–≥–æ–≤
                if 'output' in response_data:
                    output_text = response_data['output']
                    # –ò—â–µ–º Early stopping –≤ –ª–æ–≥–∞—Ö
                    if 'Early stopping triggered after' in output_text:
                        import re
                        early_stopping_match = re.search(r'Early stopping triggered after (\d+) episodes', output_text)
                        if early_stopping_match:
                            actual_episodes = int(early_stopping_match.group(1))
                            # –ò—â–µ–º –ø–ª–∞–Ω–∏—Ä—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–∏–∑–æ–¥–æ–≤
                            episodes_match = re.search(r'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–∏–∑–æ–¥–æ–≤: (\d+)', output_text)
                            if episodes_match:
                                planned_episodes = int(episodes_match.group(1))
                                response_data['actual_episodes'] = actual_episodes
                                response_data['episodes'] = planned_episodes
                                print(f"üîç –ò–∑–≤–ª–µ—á–µ–Ω–æ –∏–∑ –ª–æ–≥–æ–≤: actual_episodes={actual_episodes}, episodes={planned_episodes}")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ actual_episodes: {e}")
        
        return jsonify(response_data)
        
    except Exception as e:
        return jsonify({
            'status': 'error',
            'message': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {str(e)}',
            'success': False
        }), 500

@app.route('/list_training_results', methods=['GET'])
def list_training_results():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–±—É—á–µ–Ω–∏—è"""
    try:
        # –ò—â–µ–º —Ñ–∞–π–ª—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–±—É—á–µ–Ω–∏—è –≤ –ø–∞–ø–∫–µ result
        results_dir = "result"
        if not os.path.exists(results_dir):
            return jsonify({
                'status': 'error',
                'message': f'–ü–∞–ø–∫–∞ {results_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
                'success': False,
                'files': []
            }), 404
        
        result_files = glob.glob(os.path.join(results_dir, 'train_result_*.pkl'))
        
        if not result_files:
            return jsonify({
                'status': 'error',
                'message': '–§–∞–π–ª—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—É—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã',
                'success': False,
                'files': []
            }), 404
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö
        files_info = []
        for file in result_files:
            stat = os.stat(file)
            files_info.append({
                'filename': file,
                'size': stat.st_size,
                'created': stat.st_ctime,
                'modified': stat.st_mtime
            })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
        files_info.sort(key=lambda x: x['created'], reverse=True)
        
        return jsonify({
            'status': 'success',
            'message': f'–ù–∞–π–¥–µ–Ω–æ {len(result_files)} —Ñ–∞–π–ª–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤',
            'success': True,
            'files': files_info
        })
        
    except Exception as e:
        return jsonify({
            'status': 'error',
            'message': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: {str(e)}',
            'success': False
        }), 500

@app.route('/analyze_bad_trades', methods=['POST'])
def analyze_bad_trades():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–ª–æ—Ö–∏–µ —Å–¥–µ–ª–∫–∏ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—É—á–µ–Ω–∏—è DQN –º–æ–¥–µ–ª–∏"""
    try:
        # –ò—â–µ–º —Ñ–∞–π–ª—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–±—É—á–µ–Ω–∏—è –≤ –ø–∞–ø–∫–µ result
        results_dir = "result"
        if not os.path.exists(results_dir):
            return jsonify({
                'status': 'error',
                'message': f'–ü–∞–ø–∫–∞ {results_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ.',
                'success': False
            }), 404
        
        result_files = glob.glob(os.path.join(results_dir, 'train_result_*.pkl'))
        
        if not result_files:
            return jsonify({
                'status': 'error',
                'message': '–§–∞–π–ª—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—É—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ.',
                'success': False
            }), 404
        
        # –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
        data = request.get_json(silent=True) or {}
        requested_file = data.get('file')
        selected_file = None
        if requested_file:
            safe_path = os.path.abspath(requested_file)
            base_path = os.path.abspath(results_dir)
            if safe_path.startswith(base_path) and os.path.exists(safe_path):
                selected_file = safe_path
        if not selected_file:
            selected_file = max(result_files, key=os.path.getctime)
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∞–Ω–∞–ª–∏–∑–∞ –ø–ª–æ—Ö–∏—Ö —Å–¥–µ–ª–æ–∫ (—Å fallback –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)
        try:
            from analyze_bad_trades import analyze_bad_trades_detailed, print_bad_trades_analysis, print_detailed_recommendations
        except ImportError as e:
            app.logger.warning(f"Fallback analyze_bad_trades (ImportError: {e})")
            import numpy as _np
            def analyze_bad_trades_detailed(trades):
                if not trades:
                    return {
                        'bad_trades': [], 'bad_trades_count': 0,
                        'bad_trades_percentage': 0.0, 'avg_bad_roi': 0.0,
                        'avg_bad_duration': 0.0, 'loss_distribution': {},
                    }
                total = len(trades)
                bad = [t for t in trades if float(t.get('roi', 0.0)) < 0.0]
                bad_rois = [float(t.get('roi', 0.0)) for t in bad]
                bad_durs = [float(t.get('duration', 0.0)) for t in bad if t.get('duration') is not None]
                return {
                    'bad_trades': bad,
                    'bad_trades_count': len(bad),
                    'bad_trades_percentage': (len(bad)/total*100.0) if total else 0.0,
                    'avg_bad_roi': float(_np.mean(bad_rois)) if bad_rois else 0.0,
                    'avg_bad_duration': float(_np.mean(bad_durs)) if bad_durs else 0.0,
                    'loss_distribution': {
                        'very_small_losses': sum(1 for r in bad_rois if -0.002 <= r < 0),
                        'small_losses':      sum(1 for r in bad_rois if -0.01  <= r < -0.002),
                        'medium_losses':     sum(1 for r in bad_rois if -0.03  <= r < -0.01),
                        'large_losses':      sum(1 for r in bad_rois if r < -0.03),
                    }
                }
            def print_bad_trades_analysis(analysis):
                print("üìâ –ê–ù–ê–õ–ò–ó –ü–õ–û–•–ò–• –°–î–ï–õ–û–ö")
                print(f"–í—Å–µ–≥–æ –ø–ª–æ—Ö–∏—Ö —Å–¥–µ–ª–æ–∫: {analysis.get('bad_trades_count', 0)}")
                print(f"–ü—Ä–æ—Ü–µ–Ω—Ç –ø–ª–æ—Ö–∏—Ö —Å–¥–µ–ª–æ–∫: {analysis.get('bad_trades_percentage', 0):.2f}%")
                print(f"–°—Ä–µ–¥–Ω–∏–π ROI –ø–ª–æ—Ö–∏—Ö —Å–¥–µ–ª–æ–∫: {analysis.get('avg_bad_roi', 0.0)*100:.4f}%")
                print(f"–°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–ª–æ—Ö–∏—Ö —Å–¥–µ–ª–æ–∫: {analysis.get('avg_bad_duration', 0.0):.1f} –º–∏–Ω")
            def print_detailed_recommendations(analysis):
                print("üß† –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò: ")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        try:
            import pickle
            with open(selected_file, 'rb') as f:
                results = pickle.load(f)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–¥–µ–ª–æ–∫
            if 'all_trades' not in results:
                return jsonify({
                    'status': 'error',
                    'message': '–í —Ñ–∞–π–ª–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–¥–µ–ª–∫–∞—Ö',
                    'success': False
                }), 404
            
            trades = results['all_trades']
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–æ—Ö–∏–µ —Å–¥–µ–ª–∫–∏
            bad_trades_analysis = analyze_bad_trades_detailed(trades)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Å–¥–µ–ª–∫–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            bad_trades_analysis['all_trades'] = trades
            
            # –í—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º stdout –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –≤—ã–≤–æ–¥–∞
            import io
            import sys
            from contextlib import redirect_stdout
            
            output = io.StringIO()
            with redirect_stdout(output):
                print_bad_trades_analysis(bad_trades_analysis)
                print_detailed_recommendations(bad_trades_analysis)
            
            analysis_output = output.getvalue()
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç
            response_data = {
                'status': 'success',
                'message': '–ê–Ω–∞–ª–∏–∑ –ø–ª–æ—Ö–∏—Ö —Å–¥–µ–ª–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ',
                'success': True,
                'file_analyzed': selected_file,
                'output': analysis_output,
                'bad_trades_count': bad_trades_analysis.get('bad_trades_count', 0),
                'bad_trades_percentage': bad_trades_analysis.get('bad_trades_percentage', 0),
                'analysis_summary': {
                    'total_trades': len(trades),
                    'bad_trades': bad_trades_analysis.get('bad_trades_count', 0),
                    'avg_bad_roi': bad_trades_analysis.get('avg_bad_roi', 0),
                    'avg_bad_duration': bad_trades_analysis.get('avg_bad_duration', 0),
                    'loss_distribution': bad_trades_analysis.get('loss_distribution', {})
                }
            }
            
            return jsonify(response_data)
            
        except Exception as e:
            return jsonify({
                'status': 'error',
                'message': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–∞–π–ª–∞: {str(e)}',
                'success': False
            }), 500
        
    except Exception as e:
        return jsonify({
            'status': 'error',
            'message': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø–ª–æ—Ö–∏—Ö —Å–¥–µ–ª–æ–∫: {str(e)}',
            'success': False
        }), 500

# –ù–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
@app.route('/parser', methods=['POST'])
def parser():
    results = []
    symbol = 'BTCUSDT'
    interval = '5m'
    desired_candles = 100000
    csv_file_path = None

    try:
        # 1. –í—ã–∑—ã–≤–∞–µ–º –≤–Ω–µ—à–Ω—é—é —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞–µ—Ç CSV —Å 100 000 —Å–≤–µ—á–∞–º–∏
        csv_file_path = parser_download_and_combine_with_library(
            symbol='BTCUSDT',
            interval=interval,
            months_to_fetch=12, # –≠—Ç–æ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è parser_download_and_combine_with_library
            desired_candles=desired_candles
        )
        results.append({"status": "success", "message": f"CSV —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {csv_file_path}"})

        # 2. –ó–∞–≥—Ä—É–∂–∞–µ–º —ç—Ç–∏ 100 000 —Å–≤–µ—á–µ–π –∏–∑ CSV –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î
        loaded_count = load_latest_candles_from_csv_to_db(
            file_path=csv_file_path,
            symbol_name=symbol,
            timeframe=interval
        )
        if loaded_count > 0:
            results.append({"status": "success", "message": f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {loaded_count} —Å–≤–µ—á–µ–π –∏–∑ CSV –≤ –ë–î."})
        else:
            results.append({"status": "warning", "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–µ—á–∏ –∏–∑ CSV –≤ –ë–î."})

    except Exception as e:
        results.append({"status": "error", "message": f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–∞—Ä—Å–∏–Ω–≥–∞: {str(e)}"})

    response = {'status': '–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω', 'results': results}
    return Response(json.dumps(response, ensure_ascii=False), mimetype='application/json')

# –ù–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –º—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å–≤–µ—á–µ–π
@app.route('/parser_multi_crypto', methods=['POST'])
def parser_multi_crypto():
    """–°–∫–∞—á–∏–≤–∞–µ—Ç —Å–≤–µ—á–∏ –¥–ª—è –≤—Å–µ—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ"""
    results = []
    interval = '5m'
    desired_candles = 100000
    
    # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    crypto_symbols = [
        'BTCUSDT',  # –ë–∏—Ç–∫–æ–∏–Ω
        'TONUSDT',  # TON
        'ETHUSDT',  # –≠—Ñ–∏—Ä–∏—É–º
        'SOLUSDT',  # Solana
        'ADAUSDT',  # Cardano
        'BNBUSDT'   # Binance Coin
    ]
    
    print(f"üöÄ –ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å–≤–µ—á–µ–π –¥–ª—è {len(crypto_symbols)} –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç...")
    print(f"üìä –¢–∞–π–º—Ñ—Ä–µ–π–º: {interval}, –¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {desired_candles}")
    
    for i, symbol in enumerate(crypto_symbols, 1):
        try:
            print(f"\nüì• [{i}/{len(crypto_symbols)}] –°–∫–∞—á–∏–≤–∞—é {symbol}...")
            
            # 1. –°–∫–∞—á–∏–≤–∞–µ–º —Å–≤–µ—á–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
            csv_file_path = parser_download_and_combine_with_library(
                symbol=symbol,
                interval=interval,
                months_to_fetch=12,
                desired_candles=desired_candles
            )
            
            if csv_file_path:
                results.append({
                    "status": "success", 
                    "symbol": symbol,
                    "message": f"CSV —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {csv_file_path}"
                })
                
                # 2. –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ—á–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                try:
                    loaded_count = load_latest_candles_from_csv_to_db(
                        file_path=csv_file_path,
                        symbol_name=symbol,
                        timeframe=interval
                    )
                    
                    if loaded_count > 0:
                        results.append({
                            "status": "success",
                            "symbol": symbol,
                            "message": f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {loaded_count} —Å–≤–µ—á–µ–π –≤ –ë–î"
                        })
                        print(f"  ‚úÖ {symbol}: {loaded_count} —Å–≤–µ—á–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ –ë–î")
                    else:
                        results.append({
                            "status": "warning",
                            "symbol": symbol,
                            "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–µ—á–∏ –≤ –ë–î"
                        })
                        print(f"  ‚ö†Ô∏è {symbol}: –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –ë–î")
                        
                except Exception as db_error:
                    results.append({
                        "status": "error",
                        "symbol": symbol,
                        "message": f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –ë–î: {str(db_error)}"
                    })
                    print(f"  ‚ùå {symbol}: –æ—à–∏–±–∫–∞ –ë–î - {db_error}")
                    
            else:
                results.append({
                    "status": "error",
                    "symbol": symbol,
                    "message": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å CSV —Ñ–∞–π–ª"
                })
                print(f"  ‚ùå {symbol}: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å CSV")
                
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ {symbol}: {str(e)}"
            results.append({
                "status": "error",
                "symbol": symbol,
                "message": error_msg
            })
            print(f"  ‚ùå {symbol}: {error_msg}")
            continue
    
    # –°–≤–æ–¥–∫–∞ –ø–æ –≤—Å–µ–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º
    successful = sum(1 for r in results if r['status'] == 'success')
    failed = sum(1 for r in results if r['status'] == 'error')
    warnings = sum(1 for r in results if r['status'] == 'warning')
    
    print(f"\n{'='*60}")
    print(f"üìä –°–í–û–î–ö–ê –°–ö–ê–ß–ò–í–ê–ù–ò–Ø")
    print(f"{'='*60}")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful}")
    print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {warnings}")
    print(f"‚ùå –û—à–∏–±–∫–∏: {failed}")
    print(f"üìà –í—Å–µ–≥–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç: {len(crypto_symbols)}")
    
    response = {
        'status': '–ú—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ',
        'summary': {
            'total_cryptos': len(crypto_symbols),
            'successful': successful,
            'warnings': warnings,
            'failed': failed
        },
        'results': results
    }
    
    return Response(json.dumps(response, ensure_ascii=False), mimetype='application/json')

@app.route('/clear_redis', methods=['POST'])
def clear_redis():
    """–û—á–∏—â–∞–µ—Ç Redis –≤—Ä—É—á–Ω—É—é"""
    try:
        global redis_client
        redis_client.flushall()
        return jsonify({
            "success": True,
            "message": "Redis –æ—á–∏—â–µ–Ω —É—Å–ø–µ—à–Ω–æ"
        })
    except Exception as e:
        return jsonify({
            "success": False,
            "error": str(e)
        }), 500

@app.route('/models')
def models_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª—è–º–∏"""
    return render_template('models.html')

@app.route('/trading_agent')
def trading_agent_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞"""
    return render_template('trading_agent.html')

@app.route('/create_model_version', methods=['POST'])
def create_model_version():
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é –º–æ–¥–µ–ª–∏ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º ID"""
    import shutil
    import uuid
    from datetime import datetime
    from pathlib import Path
    
    try:
        # –ß–∏—Ç–∞–µ–º —Å–∏–º–≤–æ–ª –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        try:
            data = request.get_json(silent=True) or {}
        except Exception:
            data = {}
        requested_symbol = (data.get('symbol') or '').strip()
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É good_models –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        good_models_dir = Path('good_models')
        good_models_dir.mkdir(exist_ok=True)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID (4 —Å–∏–º–≤–æ–ª–∞)
        model_id = str(uuid.uuid4())[:4].upper()
        
        # –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–ø–∫—É result/ –∏ —Å–∏–º–≤–æ–ª (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω)
        result_dir = Path('result')
        if not result_dir.exists():
            return jsonify({
                "success": False,
                "error": "–ü–∞–ø–∫–∞ result –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ."
            })
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º base_code (—Å–∏–º–≤–æ–ª—å–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å)
        def normalize_symbol(sym: str) -> str:
            if not sym:
                return ''
            s = sym.upper().replace('/', '')
            for suffix in ["USDT", "USD", "USDC", "BUSD", "USDP"]:
                if s.endswith(suffix):
                    s = s[:-len(suffix)]
                    break
            s = s.lower()
            if s in ("–º—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–∞", "multi", "multicrypto"):
                s = "multi"
            return s
        
        base_code = normalize_symbol(requested_symbol)
        
        selected_result_file = None
        if base_code:
            # –ò—â–µ–º —Ç–æ—á–Ω—ã–π train_result_<base_code>.pkl
            candidate = result_dir / f"train_result_{base_code}.pkl"
            if candidate.exists():
                selected_result_file = candidate
            else:
                return jsonify({
                    "success": False,
                    "error": f"–§–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Å–∏–º–≤–æ–ª–∞ {base_code} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ result/"
                })
        else:
            # Fallback: –±–µ—Ä—ë–º —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π train_result_*.pkl
            result_files = list(result_dir.glob('train_result_*.pkl'))
            if not result_files:
                return jsonify({
                    "success": False,
                    "error": "–§–∞–π–ª—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—É—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ result/"
                })
            selected_result_file = max(result_files, key=lambda x: x.stat().st_mtime)
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Å–∏–º–≤–æ–ª –∏–∑ –∏–º–µ–Ω–∏
            try:
                fname = selected_result_file.stem  # train_result_<code>
                parts = fname.split('_', 2)
                if len(parts) >= 3:
                    base_code = parts[2].lower()
            except Exception:
                pass

        if not base_code:
            base_code = "model"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –≤ result/
        model_file = result_dir / f'dqn_model_{base_code}.pth'
        replay_file = result_dir / f'replay_buffer_{base_code}.pkl'
        
        if not model_file.exists():
            return jsonify({
                "success": False,
                "error": f"–§–∞–π–ª {model_file.name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ result/"
            })
        
        if not replay_file.exists():
            return jsonify({
                "success": False,
                "error": f"–§–∞–π–ª {replay_file.name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ result/"
            })
        
        # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã —Å –Ω–æ–≤—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ —Å –≤–∫–ª—é—á–µ–Ω–∏–µ–º —Å–∏–º–≤–æ–ª–∞
        named_id = f"{base_code}_{model_id}"
        new_model_file = good_models_dir / f'dqn_model_{named_id}.pth'
        new_replay_file = good_models_dir / f'replay_buffer_{named_id}.pkl'
        new_result_file = good_models_dir / f'train_result_{named_id}.pkl'
        
        shutil.copy2(model_file, new_model_file)
        shutil.copy2(replay_file, new_replay_file)
        shutil.copy2(selected_result_file, new_result_file)
        
        return jsonify({
            "success": True,
            "model_id": named_id,
            "files": [
                f'dqn_model_{named_id}.pth',
                f'replay_buffer_{named_id}.pkl',
                f'train_result_{named_id}.pkl'
            ]
        })
        
    except Exception as e:
        return jsonify({
            "success": False,
            "error": str(e)
        }), 500

@app.route('/get_models_list')
def get_models_list():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
    from pathlib import Path
    import pickle
    from datetime import datetime
    
    try:
        good_models_dir = Path('good_models')
        if not good_models_dir.exists():
            return jsonify({
                "success": True,
                "models": []
            })
        
        models = []
        
        # –ò—â–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –º–æ–¥–µ–ª–µ–π
        model_files = list(good_models_dir.glob('dqn_model_*.pth'))
        
        for model_file in model_files:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –º–æ–¥–µ–ª–∏ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ (–º–æ–∂–µ—Ç –≤–∫–ª—é—á–∞—Ç—å —Å–∏–º–≤–æ–ª)
            model_id = model_file.stem.replace('dqn_model_', '')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            replay_file = good_models_dir / f'replay_buffer_{model_id}.pkl'
            result_file = good_models_dir / f'train_result_{model_id}.pkl'
            
            if not replay_file.exists() or not result_file.exists():
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–ø–æ–ª–Ω—ã–µ –º–æ–¥–µ–ª–∏
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤
            model_size = f"{model_file.stat().st_size / 1024 / 1024:.1f} MB"
            replay_size = f"{replay_file.stat().st_size / 1024 / 1024:.1f} MB"
            result_size = f"{result_file.stat().st_size / 1024:.1f} KB"
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è
            creation_time = datetime.fromtimestamp(model_file.stat().st_ctime)
            date_str = creation_time.strftime('%d.%m.%Y %H:%M')
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ —Ñ–∞–π–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            stats = {}
            try:
                with open(result_file, 'rb') as f:
                    results = pickle.load(f)
                    if 'final_stats' in results:
                        stats = results['final_stats']
            except:
                pass  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é
            
            models.append({
                "id": model_id,
                "date": date_str,
                "files": {
                    "model": f'dqn_model_{model_id}.pth',
                    "model_size": model_size,
                    "replay": f'replay_buffer_{model_id}.pkl',
                    "replay_size": replay_size,
                    "results": f'train_result_{model_id}.pkl',
                    "results_size": result_size
                },
                "stats": stats
            })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
        models.sort(key=lambda x: x['date'], reverse=True)
        
        return jsonify({
            "success": True,
            "models": models
        })
        
    except Exception as e:
        return jsonify({
            "success": False,
            "error": str(e)
        }), 500

@app.route('/analyze_model', methods=['POST'])
def analyze_model():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –º–æ–¥–µ–ª—å"""
    import pickle
    from pathlib import Path
    
    try:
        data = request.get_json()
        model_id = data.get('model_id')
        
        if not model_id:
            return jsonify({
                "success": False,
                "error": "ID –º–æ–¥–µ–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω"
            })
        
        result_file = Path(f'good_models/train_result_{model_id}.pkl')
        if not result_file.exists():
            return jsonify({
                "success": False,
                "error": f"–§–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –º–æ–¥–µ–ª–∏ {model_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"
            })
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        with open(result_file, 'rb') as f:
            results = pickle.load(f)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑
        analysis = f"""üìä –ê–ù–ê–õ–ò–ó –ú–û–î–ï–õ–ò {model_id}
{'='*50}

üìÖ –î–∞—Ç–∞ –æ–±—É—á–µ–Ω–∏—è: {results.get('training_date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
‚è±Ô∏è –í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è: {results.get('total_training_time', 0) / 3600:.1f} —á–∞—Å–æ–≤
üéØ –≠–ø–∏–∑–æ–¥–æ–≤: {results.get('actual_episodes', results.get('episodes', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))}

üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
"""
        
        if 'final_stats' in results:
            stats = results['final_stats']
            analysis += f"""
‚Ä¢ Winrate: {stats.get('winrate', 0) * 100:.1f}%
‚Ä¢ P/L Ratio: {stats.get('pl_ratio', 0):.2f}
‚Ä¢ –°–¥–µ–ª–æ–∫: {stats.get('trades_count', 0)}
‚Ä¢ –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: {stats.get('avg_profit', 0) * 100:.2f}%
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —É–±—ã—Ç–æ–∫: {stats.get('avg_loss', 0) * 100:.2f}%
‚Ä¢ –ü–ª–æ—Ö–∏—Ö —Å–¥–µ–ª–æ–∫: {stats.get('bad_trades_count', 0)}
"""
        
        if 'all_trades' in results:
            trades = results['all_trades']
            analysis += f"""
üìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–î–ï–õ–û–ö:
‚Ä¢ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {len(trades)}
‚Ä¢ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {sum(1 for t in trades if t.get('roi', 0) > 0)}
‚Ä¢ –£–±—ã—Ç–æ—á–Ω—ã—Ö: {sum(1 for t in trades if t.get('roi', 0) < 0)}
‚Ä¢ –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã—Ö: {sum(1 for t in trades if abs(t.get('roi', 0)) < 0.001)}
"""
        
        return jsonify({
            "success": True,
            "analysis": analysis
        })
        
    except Exception as e:
        return jsonify({
            "success": False,
            "error": str(e)
        }), 500

@app.route('/delete_model', methods=['POST'])
def delete_model():
    """–£–¥–∞–ª—è–µ—Ç –º–æ–¥–µ–ª—å –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
    from pathlib import Path
    import os
    
    try:
        data = request.get_json()
        model_id = data.get('model_id')
        
        if not model_id:
            return jsonify({
                "success": False,
                "error": "ID –º–æ–¥–µ–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω"
            })
        
        good_models_dir = Path('good_models')
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –º–æ–¥–µ–ª–∏
        files_to_delete = [
            good_models_dir / f'dqn_model_{model_id}.pth',
            good_models_dir / f'replay_buffer_{model_id}.pkl',
            good_models_dir / f'train_result_{model_id}.pkl'
        ]
        
        deleted_files = []
        for file_path in files_to_delete:
            if file_path.exists():
                os.remove(file_path)
                deleted_files.append(file_path.name)
        
        if not deleted_files:
            return jsonify({
                "success": False,
                "error": f"–§–∞–π–ª—ã –º–æ–¥–µ–ª–∏ {model_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            })
        
        return jsonify({
            "success": True,
            "message": f"–ú–æ–¥–µ–ª—å {model_id} —É–¥–∞–ª–µ–Ω–∞",
            "deleted_files": deleted_files
        })
        
    except Exception as e:
        return jsonify({
            "success": False,
            "error": str(e)
        }), 500

# ==================== –¢–û–†–ì–û–í–´–ï ENDPOINT'–´ ====================

@app.route('/api/trading/start', methods=['POST'])
def start_trading():
    """
    –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–ª–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ trading_agent —á–µ—Ä–µ–∑ Celery –∑–∞–¥–∞—á—É
    """
    try:
        data = request.get_json() or {}
        symbols = data.get('symbols', ['BTCUSDT'])
        model_path = data.get('model_path', '/workspace/good_model/dqn_model.pth')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ Redis –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –≤—ã–∑–æ–≤–æ–≤ (status/stop/balance/history)
        try:
            redis_client.set('trading:model_path', model_path)
            import json as _json
            redis_client.set('trading:symbols', _json.dumps(symbols, ensure_ascii=False))
        except Exception as _e:
            app.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ—Ä–≥–æ–≤–ª–∏ –≤ Redis: {_e}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º Celery –∑–∞–¥–∞—á—É –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ –≤ –æ—á–µ—Ä–µ–¥–∏ 'celery'
        task = start_trading_task.apply_async(args=[symbols, model_path], countdown=0, expires=300, queue='celery')
        
        return jsonify({
            'success': True,
            'message': '–¢–æ—Ä–≥–æ–≤–ª—è –∑–∞–ø—É—â–µ–Ω–∞ —á–µ—Ä–µ–∑ Celery –∑–∞–¥–∞—á—É',
            'task_id': task.id
        }), 200
    except Exception as e:
        app.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏: {e}")
        return jsonify({
            'success': False, 
            'error': str(e)
        }), 500

@app.route('/api/trading/stop', methods=['POST'])
def stop_trading():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ trading_agent"""
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Docker
        client = docker.from_env()
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä trading_agent
            container = client.containers.get('trading_agent')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω
            if container.status != 'running':
                return jsonify({
                    'success': False, 
                    'error': f'–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä trading_agent –Ω–µ –∑–∞–ø—É—â–µ–Ω. –°—Ç–∞—Ç—É—Å: {container.status}'
                }), 500
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–Ω–µ–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—É—Ç—å –∫ –º–æ–¥–µ–ª–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            model_path = None
            try:
                mp = redis_client.get('trading:model_path')
                if mp:
                    model_path = mp.decode('utf-8')
            except Exception:
                pass

            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é —á–µ—Ä–µ–∑ exec
            if model_path:
                cmd = f'python -c "import json; from trading_agent.trading_agent import TradingAgent; agent = TradingAgent(model_path=\\"{model_path}\\"); result = agent.stop_trading(); print(\\"RESULT: \\" + json.dumps(result))"'
            else:
                cmd = 'python -c "import json; from trading_agent.trading_agent import TradingAgent; agent = TradingAgent(); result = agent.stop_trading(); print(\\"RESULT: \\" + json.dumps(result))"'
            
            exec_result = container.exec_run(cmd, tty=True)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
            app.logger.info(f"Stop trading - Exit code: {exec_result.exit_code}")
            if exec_result.output:
                output_str = exec_result.output.decode('utf-8')
                app.logger.info(f"Stop trading - Output: {output_str}")
            
            if exec_result.exit_code == 0:
                output = exec_result.output.decode('utf-8') if exec_result.output else ""
                # –ò—â–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≤—ã–≤–æ–¥–µ
                if 'RESULT:' in output:
                    result_str = output.split('RESULT:')[1].strip()
                    try:
                        import json
                        result = json.loads(result_str)
                        return jsonify(result), 200
                    except Exception as parse_error:
                        app.logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {parse_error}")
                        return jsonify({
                            'success': True,
                            'message': '–¢–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞',
                            'output': output
                        }), 200
                else:
                    return jsonify({
                        'success': True,
                        'message': '–¢–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞',
                        'output': output
                    }), 200
            else:
                error_output = exec_result.output.decode('utf-8') if exec_result.output else "No error output"
                app.logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏: {error_output}")
                return jsonify({
                    'success': False,
                    'error': f'–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {error_output}'
                }), 500
                
        except docker.errors.NotFound:
            return jsonify({
                'success': False, 
                'error': '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä trading_agent –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ docker-compose up trading_agent'
            }), 500
        except Exception as e:
            return jsonify({
                'success': False, 
                'error': f'–û—à–∏–±–∫–∞ Docker: {str(e)}'
            }), 500
            
    except Exception as e:
        app.logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏: {e}")
        return jsonify({
            'success': False, 
            'error': str(e)
        }), 500

@app.route('/api/trading/status', methods=['GET'])
def trading_status():
    """–°—Ç–∞—Ç—É—Å —Ç–æ—Ä–≥–æ–≤–ª–∏ –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ trading_agent"""
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Docker
        client = docker.from_env()
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä trading_agent
            container = client.containers.get('trading_agent')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω
            if container.status != 'running':
                return jsonify({
                    'success': False, 
                    'error': f'–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä trading_agent –Ω–µ –∑–∞–ø—É—â–µ–Ω. –°—Ç–∞—Ç—É—Å: {container.status}'
                }), 500
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–Ω–µ–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—É—Ç—å –∫ –º–æ–¥–µ–ª–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            model_path = None
            try:
                mp = redis_client.get('trading:model_path')
                if mp:
                    model_path = mp.decode('utf-8')
            except Exception:
                pass

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ exec
            if model_path:
                cmd = f'python -c "import sys, json; print(sys.version); from trading_agent.trading_agent import TradingAgent; agent = TradingAgent(model_path=\\"{model_path}\\"); result = agent.get_trading_status(); print(\\\"RESULT: \\\" + json.dumps(result))"'
            else:
                cmd = 'python -c "import sys, json; print(sys.version); from trading_agent.trading_agent import TradingAgent; agent = TradingAgent(); result = agent.get_trading_status(); print(\\\"RESULT: \\\" + json.dumps(result))"'
            
            exec_result = container.exec_run(cmd, tty=True)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
            app.logger.info(f"Get status - Command: {cmd}")
            app.logger.info(f"Get status - Exit code: {exec_result.exit_code}")
            if exec_result.output:
                output_str = exec_result.output.decode('utf-8')
                app.logger.info(f"Get status - Output: {output_str}")
            else:
                app.logger.info("Get status - No output received")
            
            if exec_result.exit_code == 0:
                output = exec_result.output.decode('utf-8') if exec_result.output else ""
                # –ò—â–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≤—ã–≤–æ–¥–µ
                if 'RESULT:' in output:
                    result_str = output.split('RESULT:')[1].strip()
                    try:
                        import json
                        result = json.loads(result_str)
                        return jsonify(result), 200
                    except Exception as parse_error:
                        app.logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç–∞—Ç—É—Å–∞: {parse_error}")
                        return jsonify({
                            'success': True,
                            'message': '–°—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω',
                            'output': output
                        }), 200
                else:
                    return jsonify({
                        'success': True,
                        'message': '–°—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω',
                        'output': output
                    }), 200
            else:
                error_output = exec_result.output.decode('utf-8') if exec_result.output else "No error output"
                app.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {error_output}")
                return jsonify({
                    'success': False,
                    'error': f'–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {error_output}'
                }), 500
                
        except docker.errors.NotFound:
            return jsonify({
                'success': False, 
                'error': '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä trading_agent –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ docker-compose up trading_agent'
            }), 500
        except Exception as e:
            return jsonify({
                'success': False, 
                'error': f'–û—à–∏–±–∫–∞ Docker: {str(e)}'
            }), 500
            
    except Exception as e:
        app.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        return jsonify({
            'success': False, 
            'error': str(e)
        }), 500

@app.route('/api/trading/latest_results', methods=['GET'])
def trading_latest_results():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–æ—Ä–≥–æ–≤–ª–∏ –∏–∑ Celery"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ Redis
        latest_results = []
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–æ—Ä–≥–æ–≤–ª–∏
        for i in range(10):
            result_key = f'trading:latest_result_{i}'
            try:
                result_data = redis_client.get(result_key)
                if result_data:
                    result = json.loads(result_data.decode('utf-8'))
                    latest_results.append(result)
            except Exception as e:
                app.logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ {i}: {e}")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
        latest_results.sort(key=lambda x: x.get('timestamp', ''), reverse=True)
        
        return jsonify({
            'success': True,
            'latest_results': latest_results,
            'total_results': len(latest_results)
        }), 200
        
    except Exception as e:
        app.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/trading/balance', methods=['GET'])
def trading_balance():
    """–ë–∞–ª–∞–Ω—Å –Ω–∞ –±–∏—Ä–∂–µ –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ trading_agent"""
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Docker
        client = docker.from_env()
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä trading_agent
            container = client.containers.get('trading_agent')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω
            if container.status != 'running':
                return jsonify({
                    'success': False, 
                    'error': f'–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä trading_agent –Ω–µ –∑–∞–ø—É—â–µ–Ω. –°—Ç–∞—Ç—É—Å: {container.status}'
                }), 500
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–Ω–µ–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—É—Ç—å –∫ –º–æ–¥–µ–ª–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            model_path = None
            try:
                mp = redis_client.get('trading:model_path')
                if mp:
                    model_path = mp.decode('utf-8')
            except Exception:
                pass

            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ exec
            if model_path:
                cmd = f'python -c "import json; from trading_agent.trading_agent import TradingAgent; agent = TradingAgent(model_path=\\"{model_path}\\"); result = agent.get_balance(); print(\\"RESULT: \\" + json.dumps(result))"'
            else:
                cmd = 'python -c "import json; from trading_agent.trading_agent import TradingAgent; agent = TradingAgent(); result = agent.get_balance(); print(\\"RESULT: \\" + json.dumps(result))"'
            
            exec_result = container.exec_run(cmd, tty=True)
            
            if exec_result.exit_code == 0:
                output = exec_result.output.decode('utf-8')
                # –ò—â–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≤—ã–≤–æ–¥–µ
                if 'RESULT:' in output:
                    result_str = output.split('RESULT:')[1].strip()
                    try:
                        import json
                        result = json.loads(result_str)
                        return jsonify(result), 200
                    except:
                        return jsonify({
                            'success': True,
                            'message': '–ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω',
                            'output': output
                        }), 200
                else:
                    return jsonify({
                        'success': True,
                        'message': '–ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω',
                        'output': output
                    }), 200
            else:
                return jsonify({
                    'success': False,
                    'error': f'–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {exec_result.output.decode("utf-8")}'
                }), 500
        except docker.errors.NotFound:
            return jsonify({
                'success': False, 
                'error': '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä trading_agent –Ω–µ –Ω–∞–π–¥–µ–Ω'
            }), 500
        except Exception as e:
            return jsonify({
                'success': False, 
                'error': f'–û—à–∏–±–∫–∞ Docker: {str(e)}'
            }), 500
            
    except Exception as e:
        app.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
        return jsonify({
            'success': False, 
            'error': str(e)
        }), 500

@app.route('/api/trades/recent', methods=['GET'])
def get_recent_trades():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–¥–µ–ª–æ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        from utils.trade_utils import get_recent_trades, get_model_predictions, get_prediction_statistics
        
        limit = request.args.get('limit', 50, type=int)
        trades = get_recent_trades(limit=limit)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ JSON-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç
        trades_data = []
        for trade in trades:
            trades_data.append({
                'trade_number': trade.trade_number,
                'symbol': trade.symbol.name if trade.symbol else 'Unknown',
                'action': trade.action,
                'status': trade.status,
                'quantity': trade.quantity,
                'price': trade.price,
                'total_value': trade.total_value,
                'model_prediction': trade.model_prediction,
                'current_balance': trade.current_balance,
                'position_pnl': trade.position_pnl,
                'created_at': trade.created_at.isoformat() if trade.created_at else None,
                'executed_at': trade.executed_at.isoformat() if trade.executed_at else None,
                'is_successful': trade.is_successful,
                'error_message': trade.error_message
            })
        
        return jsonify({
            'success': True,
            'trades': trades_data,
            'total_trades': len(trades_data)
        }), 200
        
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/trades/statistics', methods=['GET'])
def get_trade_statistics():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Å–¥–µ–ª–∫–∞–º"""
    try:
        from utils.trade_utils import get_trade_statistics, get_model_predictions, get_prediction_statistics
        
        symbol = request.args.get('symbol', None)
        stats = get_trade_statistics(symbol_name=symbol)
        
        return jsonify({
            'success': True,
            'statistics': stats
        }), 200
        
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/trades/by_symbol/<symbol_name>', methods=['GET'])
def get_trades_by_symbol(symbol_name):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫ –ø–æ —Å–∏–º–≤–æ–ª—É"""
    try:
        from utils.trade_utils import get_trades_by_symbol, get_model_predictions, get_prediction_statistics
        
        limit = request.args.get('limit', 100, type=int)
        trades = get_trades_by_symbol(symbol_name, limit=limit)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ JSON-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç
        trades_data = []
        for trade in trades:
            trades_data.append({
                'trade_number': trade.trade_number,
                'symbol': trade.symbol.name if trade.symbol else 'Unknown',
                'action': trade.action,
                'status': trade.status,
                'quantity': trade.quantity,
                'price': trade.price,
                'total_value': trade.total_value,
                'model_prediction': trade.model_prediction,
                'current_balance': trade.current_balance,
                'position_pnl': trade.position_pnl,
                'created_at': trade.created_at.isoformat() if trade.created_at else None,
                'executed_at': trade.executed_at.isoformat() if trade.executed_at else None,
                'is_successful': trade.is_successful,
                'error_message': trade.error_message
            })
        
        return jsonify({
            'success': True,
            'trades': trades_data,
            'total_trades': len(trades_data),
            'symbol': symbol_name
        }), 200
        
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/trading/history', methods=['GET'])
def trading_history():
    """–ò—Å—Ç–æ—Ä–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ trading_agent"""
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Docker
        client = docker.from_env()
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä trading_agent
            container = client.containers.get('trading_agent')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω
            if container.status != 'running':
                return jsonify({
                    'success': False, 
                    'error': f'–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä trading_agent –Ω–µ –∑–∞–ø—É—â–µ–Ω. –°—Ç–∞—Ç—É—Å: {container.status}'
                }), 500
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–Ω–µ–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—É—Ç—å –∫ –º–æ–¥–µ–ª–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            model_path = None
            try:
                mp = redis_client.get('trading:model_path')
                if mp:
                    model_path = mp.decode('utf-8')
            except Exception:
                pass

            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–µ—Ä–µ–∑ exec
            if model_path:
                cmd = f'python -c "import json; from trading_agent.trading_agent import TradingAgent; agent = TradingAgent(model_path=\\"{model_path}\\"); result = agent.get_trading_history(); print(\\"RESULT: \\" + json.dumps(result))"'
            else:
                cmd = 'python -c "import json; from trading_agent.trading_agent import TradingAgent; agent = TradingAgent(); result = agent.get_trading_history(); print(\\"RESULT: \\" + json.dumps(result))"'
            
            exec_result = container.exec_run(cmd, tty=True)
            
            if exec_result.exit_code == 0:
                output = exec_result.output.decode('utf-8')
                # –ò—â–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≤—ã–≤–æ–¥–µ
                if 'RESULT:' in output:
                    result_str = output.split('RESULT:')[1].strip()
                    try:
                        import json
                        result = json.loads(result_str)
                        return jsonify(result), 200
                    except:
                        return jsonify({
                            'success': True,
                            'message': '–ò—Å—Ç–æ—Ä–∏—è –ø–æ–ª—É—á–µ–Ω–∞',
                            'output': output
                        }), 200
                else:
                    return jsonify({
                        'success': True,
                        'message': '–ò—Å—Ç–æ—Ä–∏—è –ø–æ–ª—É—á–µ–Ω–∞',
                        'output': output
                    }), 200
            else:
                return jsonify({
                    'success': False,
                    'error': f'–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {exec_result.output.decode("utf-8")}'
                }), 500
                
        except docker.errors.NotFound:
            return jsonify({
                'success': False, 
                'error': '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä trading_agent –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ docker-compose up trading_agent'
            }), 500
        except Exception as e:
            return jsonify({
                'success': False, 
                'error': f'–û—à–∏–±–∫–∞ Docker: {str(e)}'
            }), 500
            
    except Exception as e:
        app.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        return jsonify({
            'success': False, 
            'error': str(e)
        }), 500


@app.route('/api/predictions/recent')
def get_recent_predictions():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –º–æ–¥–µ–ª–∏"""
    try:
        symbol = request.args.get('symbol')
        action = request.args.get('action')
        limit = int(request.args.get('limit', 50))
        
        predictions = get_model_predictions(symbol=symbol, action=action, limit=limit)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ JSON-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç
        predictions_data = []
        for prediction in predictions:
            try:
                q_values = json.loads(prediction.q_values) if prediction.q_values else []
                market_conditions = json.loads(prediction.market_conditions) if prediction.market_conditions else {}
            except:
                q_values = []
                market_conditions = {}
            
            prediction_data = {
                'id': prediction.id,
                'timestamp': prediction.timestamp.isoformat() if prediction.timestamp else None,
                'symbol': prediction.symbol,
                'action': prediction.action,
                'q_values': q_values,
                'current_price': prediction.current_price,
                'position_status': prediction.position_status,
                'confidence': prediction.confidence,
                'model_path': prediction.model_path,
                'market_conditions': market_conditions,
                'created_at': prediction.created_at.isoformat() if prediction.created_at else None
            }
            predictions_data.append(prediction_data)
        
        return jsonify({
            'success': True,
            'predictions': predictions_data,
            'total_predictions': len(predictions_data)
        })
        
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500


@app.route('/api/predictions/statistics')
def get_prediction_statistics_api():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –º–æ–¥–µ–ª–∏"""
    try:
        symbol = request.args.get('symbol')
        stats = get_prediction_statistics(symbol=symbol)
        
        return jsonify({
            'success': True,
            'statistics': stats
        })
        
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500


# =============================================================

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5050))  # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    debug_mode = os.environ.get("FLASK_DEBUG", "False").lower() == "true"
    print(f"üöÄ –ó–∞–ø—É—Å–∫–∞—é Flask —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É {port}...")
    print(f"üåê –û—Ç–∫—Ä–æ–π—Ç–µ: http://localhost:{port}")
    print(f"üîß Debug —Ä–µ–∂–∏–º: {'–í–ö–õ–Æ–ß–ï–ù' if debug_mode else '–û–¢–ö–õ–Æ–ß–ï–ù'}")
    
    # –£–±–∏—Ä–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
    # init_trading_agent()
    
    app.run(host="0.0.0.0", port=port, debug=debug_mode)
