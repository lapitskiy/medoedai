#!/usr/bin/env python3
"""
–ú—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è DQN.
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –º–µ–∂–¥—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ø–∏–∑–æ–¥–∞.
"""

import random
import numpy as np
import pandas as pd
from typing import Dict, Any, Tuple, Optional
from .crypto_trading_env_optimized import CryptoTradingEnvOptimized as CryptoTradingEnv

class MultiCryptoTradingEnv:
    """
    –û–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è –º—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è DQN.
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –º–µ–∂–¥—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ø–∏–∑–æ–¥–∞.
    """
    
    def __init__(self, dfs: dict, cfg=None):
        """
        Args:
            dfs (dict): –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
                {symbol: {'df_5min': DataFrame, 'symbol': str, 'candle_count': int}}
            cfg: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è n-step learning
        """
        self.dfs = dfs
        self.symbols = list(dfs.keys())
        self.current_symbol = None
        self.current_env = None
        self.cfg = cfg
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ —Å–¥–µ–ª–æ–∫ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ winrate
        self._all_trades = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç all_trades –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å train_model_optimized
        self.all_trades = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∞—Ç—Ä–∏–±—É—Ç _trades –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        self._trades = []
        
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤
        if not self.symbols:
            raise ValueError("–ù–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç")
            
        first_symbol = self.symbols[0]
        first_data = self.dfs[first_symbol]
        temp_dfs = {
            'df_5min': first_data['df_5min'],
            'df_15min': first_data['df_15min'],
            'df_1h': first_data['df_1h']
        }
        
        temp_env = CryptoTradingEnv(dfs=temp_dfs, cfg=cfg)
        self.observation_space = temp_env.observation_space
        self.action_space = temp_env.action_space
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–π –∞—Ç—Ä–∏–±—É—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å train_model_optimized
        if hasattr(temp_env, 'observation_space_shape'):
            self.observation_space_shape = temp_env.observation_space_shape
        else:
            # Fallback: –≤—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑ observation_space
            if hasattr(self.observation_space, 'shape'):
                self.observation_space_shape = self.observation_space.shape[0]
            else:
                # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                self.observation_space_shape = 100  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è DQN
        
        # N-step learning –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.n_step = getattr(cfg, 'n_step', 3) if cfg else 3
        self.n_step_buffer = []
        self.gamma = getattr(cfg, 'gamma', 0.99) if cfg else 0.99
        
        print(f"üåç –ú—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è {len(self.symbols)} –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç")
        print(f"üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã: {', '.join(self.symbols)}")
        print(f"üîÑ N-step learning: {self.n_step} —à–∞–≥–æ–≤, gamma: {self.gamma}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
        self.episode_stats = {symbol: 0 for symbol in self.symbols}
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç symbol –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        self.symbol = "–ú–£–õ–¨–¢–ò–í–ê–õ–Æ–¢–ê"
    
    def reset(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∏ —Å–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ—Ç –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è —ç–ø–∏–∑–æ–¥–∞"""
        # –°–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É
        self.current_symbol = random.choice(self.symbols)
        current_data = self.dfs[self.current_symbol]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.episode_stats[self.current_symbol] += 1
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ–∑–¥–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –∏–ª–∏ —Å–º–µ–Ω–∏–ª–∞—Å—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞
        if (self.current_env is None or 
            getattr(self.current_env, 'symbol', None) != self.current_symbol):
            
            temp_dfs = {
                'df_5min': current_data['df_5min'],
                'df_15min': current_data['df_15min'],
                'df_1h': current_data['df_1h']
            }
                        
            
            self.current_env = CryptoTradingEnv(dfs=temp_dfs, cfg=self.cfg)
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –≤ –Ω–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
            if hasattr(self, '_all_trades') and self._all_trades:
                self.current_env.all_trades = self._all_trades.copy()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—à –∞—Ç—Ä–∏–±—É—Ç all_trades
            if hasattr(self.current_env, 'all_trades'):
                self.all_trades = self.current_env.all_trades
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—à –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∞—Ç—Ä–∏–±—É—Ç _trades
            if hasattr(self.current_env, 'trades'):
                self._trades = getattr(self.current_env, 'trades', []).copy()

        
        # –û—á–∏—â–∞–µ–º n-step buffer –ø—Ä–∏ —Å–º–µ–Ω–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        self.n_step_buffer.clear()
        
        print(f"üîÑ –≠–ø–∏–∑–æ–¥: –≤—ã–±—Ä–∞–Ω–∞ {self.current_symbol} ({current_data['candle_count']} —Å–≤–µ—á–µ–π)")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
        return self.current_env.reset()
    
    def get_current_symbol(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É"""
        return self.current_symbol
    
    def get_n_step_return(self, n_steps: int = None) -> list:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç n-step transitions –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
        
        Args:
            n_steps: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ—Ç self.n_step)
            
        Returns:
            list: —Å–ø–∏—Å–æ–∫ n-step transitions
        """
        if n_steps is None:
            n_steps = self.n_step
            
        if len(self.n_step_buffer) < n_steps:
            return []
            
        transitions = []
        for i in range(len(self.n_step_buffer) - n_steps + 1):
            # –ë–µ—Ä–µ–º n –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
            n_step_transitions = list(self.n_step_buffer)[i:i+n_steps]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ next_state –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
            if any(t['next_state'] is None for t in n_step_transitions):
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–ø–æ–ª–Ω—ã–µ transitions
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º n-step return
            total_reward = 0
            for j, transition in enumerate(n_step_transitions):
                total_reward += transition['reward'] * (self.gamma ** j)
            
            # –°–æ–∑–¥–∞–µ–º n-step transition
            first_transition = n_step_transitions[0]
            last_transition = n_step_transitions[-1]
            
            n_step_transition = {
                'state': first_transition['state'],
                'action': first_transition['action'],
                'reward': total_reward,
                'next_state': last_transition['next_state'],
                'done': last_transition['done']
            }
            
            transitions.append(n_step_transition)
            
        return transitions
    
    def step(self, action):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —à–∞–≥ –≤ —Ç–µ–∫—É—â–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏"""
        if self.current_env is None:
            raise ValueError("–û–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ. –í—ã–∑–æ–≤–∏—Ç–µ reset()")
        
        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫ –¥–æ —à–∞–≥–∞
        trades_before = len(getattr(self.current_env, 'all_trades', []))
        
        result = self.current_env.step(action)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—è–≤–∏–ª–∏—Å—å –ª–∏ –Ω–æ–≤—ã–µ —Å–¥–µ–ª–∫–∏
        trades_after = len(getattr(self.current_env, 'all_trades', []))
        if trades_after > trades_before:            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–¥–µ–ª–∫–∏
            self._all_trades = getattr(self.current_env, 'all_trades', []).copy()
        
        return result
    
    @property
    def epsilon(self):
        """–ü–æ–ª—É—á–∞–µ—Ç epsilon –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        if self.current_env:
            return getattr(self.current_env, 'epsilon', 0.1)
        return 0.1
    
    @epsilon.setter
    def epsilon(self, value):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç epsilon –≤ —Ç–µ–∫—É—â–µ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ"""
        if self.current_env:
            self.current_env.epsilon = value
    
    @property
    def trades(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–¥–µ–ª–∫–∏ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        if self.current_env:
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–¥–µ–ª–∫–∏ –º–µ–∂–¥—É –æ–∫—Ä—É–∂–µ–Ω–∏–µ–º –∏ –º—É–ª—å—Ç–∏-–æ–∫—Ä—É–∂–µ–Ω–∏–µ–º
            env_trades = getattr(self.current_env, 'trades', [])
            if len(env_trades) > len(self._trades):
                self._trades = env_trades.copy()
            return self._trades
        return self._trades
    
    @trades.setter
    def trades(self, value):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–¥–µ–ª–∫–∏"""
        self._trades = value.copy() if value else []
        if self.current_env:
            self.current_env.trades = value.copy() if value else []
    
    @property
    def all_trades(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ—Ç –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ —Å–¥–µ–ª–æ–∫"""
        if self.current_env:
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–¥–µ–ª–∫–∏ –º–µ–∂–¥—É –æ–∫—Ä—É–∂–µ–Ω–∏–µ–º –∏ –º—É–ª—å—Ç–∏-–æ–∫—Ä—É–∂–µ–Ω–∏–µ–º
            env_all_trades = getattr(self.current_env, 'all_trades', [])
            if len(env_all_trades) > len(self._all_trades):
                self._all_trades = env_all_trades.copy()
            return self._all_trades
        return self._all_trades
    
    @all_trades.setter
    def all_trades(self, value):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ —Å–¥–µ–ª–æ–∫"""
        self._all_trades = value
        if self.current_env:
            self.current_env.all_trades = value.copy()
    
    def get_current_symbol(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É"""
        return self.current_symbol
    
    def get_episode_stats(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç"""
        total_episodes = sum(self.episode_stats.values())
        if total_episodes == 0:
            return {}
        
        stats = {}
        for symbol, count in self.episode_stats.items():
            percentage = (count / total_episodes) * 100
            stats[symbol] = {
                'episodes': count,
                'percentage': percentage
            }
        
        return stats
    
    def print_episode_stats(self):
        """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç"""
        stats = self.get_episode_stats()
        if not stats:
            print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–ø–∏–∑–æ–¥–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
        
        print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢:")
        print("=" * 50)
        
        total_episodes = sum([s['episodes'] for s in stats.values()])
        print(f"–í—Å–µ–≥–æ —ç–ø–∏–∑–æ–¥–æ–≤: {total_episodes}")
        print()
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —ç–ø–∏–∑–æ–¥–æ–≤
        sorted_stats = sorted(stats.items(), key=lambda x: x[1]['episodes'], reverse=True)
        
        for symbol, data in sorted_stats:
            episodes = data['episodes']
            percentage = data['percentage']
            bar_length = int(percentage / 2)  # –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤
            bar = "‚ñà" * bar_length
            
            print(f"{symbol:>10}: {episodes:>4} —ç–ø–∏–∑–æ–¥–æ–≤ ({percentage:>5.1f}%) {bar}")
        
        print("=" * 50)
    
    def get_env_info(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–∫—Ä—É–∂–µ–Ω–∏–∏"""
        return {
            'total_cryptos': len(self.symbols),
            'available_symbols': self.symbols,
            'current_symbol': self.current_symbol,
            'observation_space': str(self.observation_space),
            'action_space': str(self.action_space),
            'episode_stats': self.get_episode_stats()
        }
    
    def set_symbol_weights(self, weights: Dict[str, float]):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–µ—Å–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.
        
        Args:
            weights (dict): –°–ª–æ–≤–∞—Ä—å {symbol: weight} –≥–¥–µ weight > 0
        """
        if not weights:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Å–∏–º–≤–æ–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        for symbol in weights:
            if symbol not in self.symbols:
                print(f"‚ö†Ô∏è –°–∏–º–≤–æ–ª {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö")
                return
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤–∑–≤–µ—à–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
        self.weighted_symbols = []
        for symbol, weight in weights.items():
            if weight > 0:
                self.weighted_symbols.extend([symbol] * int(weight * 100))
        
        if self.weighted_symbols:
            print(f"‚öñÔ∏è –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤–µ—Å–∞ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç: {weights}")
            # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ –≤—ã–±–æ—Ä–∞ —Å–∏–º–≤–æ–ª–∞
            self._select_symbol = self._select_weighted_symbol
        else:
            print("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –≤–µ—Å–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä")
    
    def _select_weighted_symbol(self):
        """–í—ã–±–∏—Ä–∞–µ—Ç –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É —Å —É—á–µ—Ç–æ–º –≤–µ—Å–æ–≤"""
        if hasattr(self, 'weighted_symbols') and self.weighted_symbols:
            return random.choice(self.weighted_symbols)
        return random.choice(self.symbols)
    
    def _select_symbol(self):
        """–í—ã–±–∏—Ä–∞–µ—Ç –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"""
        return random.choice(self.symbols)
    
    def reset_with_symbol(self, symbol: str):
        """
        –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π.
        
        Args:
            symbol (str): –°–∏–º–≤–æ–ª –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        """
        if symbol not in self.symbols:
            print(f"‚ö†Ô∏è –°–∏–º–≤–æ–ª {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä")
            return self.reset()
        
        self.current_symbol = symbol
        current_data = self.dfs[symbol]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.episode_stats[symbol] += 1
        
        # –°–æ–∑–¥–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        temp_dfs = {
            'df_5min': current_data['df_5min'],
            'df_15min': current_data['df_15min'],
            'df_1h': current_data['df_1h']
        }
        self.current_env = CryptoTradingEnv(dfs=temp_dfs, cfg=self.cfg)
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –≤ –Ω–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
        if hasattr(self, '_all_trades') and self._all_trades:
            self.current_env.all_trades = self._all_trades.copy()
            print(f"    üìä –ü–µ—Ä–µ–¥–∞–Ω–æ {len(self._all_trades)} —Å–¥–µ–ª–æ–∫ –≤ –Ω–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ")
        
        print(f"üîÑ –≠–ø–∏–∑–æ–¥: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–±—Ä–∞–Ω–∞ {symbol} ({current_data['candle_count']} —Å–≤–µ—á–µ–π)")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
        return self.current_env.reset()
