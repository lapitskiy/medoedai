from envs.dqn_model.gym.gutils_optimized import calc_relative_vol_numpy, commission_penalty, update_roi_stats, update_vol_stats
from envs.dqn_model.gym.indicators_optimized import preprocess_dataframes
import gym
from gym import spaces
import numpy as np
import random
import torch
import time
from sklearn.preprocessing import StandardScaler
from envs.dqn_model.gym.gconfig import GymConfig
from typing import Optional, Dict
from collections import deque

class CryptoTradingEnvOptimized(gym.Env):
    metadata = {'render.modes': ['human']}
    
    def __init__(self, dfs: Dict, cfg: Optional[GymConfig] = None, lookback_window: int = 20, indicators_config=None):        
        super(CryptoTradingEnvOptimized, self).__init__() 
        self.cfg = cfg or GymConfig()
        
        self.vol_scaled = 0
        self.epsilon = 1.0
        
        # PRINT LOG DOCKER
        self._episode_idx = -1
        self._log_interval = 20
        self._can_log = False

        # —Ñ–∏–ª—å—Ç—Ä—ã ¬´–¥—É—à–∞—Ç¬ª –ø–æ–∫—É–ø–∫–∏?
        self.buy_attempts = 0
        self.buy_rejected_vol = 0
        self.buy_rejected_roi = 0
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞ —Å –∑–Ω–∞—á–µ–Ω–∏–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        window_size = getattr(self.cfg, 'window288', 288)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 288 (24 —á–∞—Å–∞ * 12 –ø—è—Ç–∏–º–∏–Ω—É—Ç–æ–∫)
        self.vol_buf = deque(maxlen=window_size)
        self.roi_buf = deque(maxlen=window_size)
        
        # –≤—Ö–æ–¥ –≤ –ø–æ–∑–∏—Ü–∏—é –Ω–∞ 30%
        self.position_fraction = 0.30

        # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self.trade_fee_percent = 0.00075 # –ö–æ–º–∏—Å—Å–∏—è 0.075%
        
        # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞ (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ)
        self.STOP_LOSS_PCT = -0.03    # -3%
        self.TAKE_PROFIT_PCT = +0.05  # +5%
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º pandas DataFrames –≤ numpy arrays –∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
        df_5min_raw = dfs['df_5min'].values if hasattr(dfs['df_5min'], 'values') else dfs['df_5min']
        df_15min_raw = dfs['df_15min'].values if hasattr(dfs['df_15min'], 'values') else dfs['df_15min']
        df_1h_raw = dfs['df_1h'].values if hasattr(dfs['df_1h'], 'values') else dfs['df_1h']
        
        if indicators_config is None:
            self.indicators_config = {
                'rsi': {'length': 14},
                'ema': {'lengths': [100, 200]},
                'ema_cross': {
                    'pairs': [(100, 200)],
                    'include_cross_signal': True
                },
                'sma': {'length': 14},
            }
        else:
            self.indicators_config = indicators_config
        
        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        (self.df_5min, self.df_15min, self.df_1h, 
         self.indicators, self.individual_indicators) = preprocess_dataframes(
            df_5min_raw, df_15min_raw, df_1h_raw, self.indicators_config
        )
        
        self.total_steps = len(self.df_5min)
        self.lookback_window = lookback_window 
        
        self.action_space = spaces.Discrete(3) # 0: HOLD, 1: BUY, 2: SELL
        
        num_features_per_candle = 5 # Open, High, Low, Close, Volume        
        num_indicator_features = self.indicators.shape[1] if self.indicators.size > 0 else 0
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥–≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
        # 5min OHLCV + 15min OHLCV + 1h OHLCV + –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã + –±–∞–ª–∞–Ω—Å/–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞
        total_features_per_step = (
            num_features_per_candle +  # 5min OHLCV
            num_features_per_candle +  # 15min OHLCV (–∏–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
            num_features_per_candle +  # 1h OHLCV (–∏–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
            (num_indicator_features if self.indicators.size > 0 else 0)  # –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –Ω–∞ —à–∞–≥
        )
        
        # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        print(f"üîç –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è:")
        print(f"  ‚Ä¢ num_features_per_candle: {num_features_per_candle}")
        print(f"  ‚Ä¢ num_indicator_features: {num_indicator_features}")
        print(f"  ‚Ä¢ total_features_per_step: {total_features_per_step}")
        print(f"  ‚Ä¢ lookback_window: {self.lookback_window}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞–∑–º–µ—Ä—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
        if total_features_per_step <= 0:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: total_features_per_step = {total_features_per_step}")
            total_features_per_step = 15  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        
        self.observation_space_shape = (
            self.lookback_window * total_features_per_step +
            2  # normalized_balance –∏ normalized_crypto_held
        )
        
        print(f"  ‚Ä¢ observation_space_shape: {self.observation_space_shape}")

        self.observation_space = spaces.Box(low=-np.inf, high=np.inf, 
                                            shape=(self.observation_space_shape,), 
                                            dtype=np.float32)
        
        self.min_valid_start_step = self.lookback_window 
        self.current_train_start_idx = self.min_valid_start_step 
        
        # –≠—Ç–∏ –±—É–¥—É—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –≤ reset
        self.start_step = None
        self.current_step = None
        self.balance = None
        self.crypto_held = None
        self.last_buy_price = None
        self.last_buy_step = None    
        self.trailing_stop_counter = 0
        self.max_price_during_hold = None
        
        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
        self._calculate_normalization_stats()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∫–∞–ª–µ—Ä—ã –¥–ª—è –±–∞–ª–∞–Ω—Å–∞ –∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        self.balance_scaler = StandardScaler()
        self.crypto_held_scaler = StandardScaler()
        
        # –ü—Ä–µ–¥–≤—ã—á–∏—Å–ª—è–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        print("üöÄ –ü—Ä–µ–¥–≤—ã—á–∏—Å–ª—è—é –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è...")
        self._precompute_all_states()
        print("‚úÖ –í—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–µ–¥–≤—ã—á–∏—Å–ª–µ–Ω—ã!")
                
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å —Å –∑–Ω–∞—á–µ–Ω–∏–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        initial_balance = getattr(self.cfg, 'initial_balance', 10000.0)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 10000
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∫–∞–ª–µ—Ä–æ–≤
        max_balance = initial_balance * 10  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
        max_crypto = initial_balance / 100  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        
        balance_samples = np.array([[0], [initial_balance], [max_balance]])
        crypto_samples = np.array([[0], [max_crypto/2], [max_crypto]])
        
        self.balance_scaler.fit(balance_samples)
        self.crypto_held_scaler.fit(crypto_samples)
        
        # –°–ø–∏—Å–æ–∫ —Å–¥–µ–ª–æ–∫
        self.trades = []
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
        self.vol_stats = {'mean': 0, 'std': 1}
        self.roi_stats = {'mean': 0, 'std': 1}
        
        # –°—á–µ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.action_counts = {0: 0, 1: 0, 2: 0}
        
        # –í—Ä–µ–º—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.episode_start_time = None
        self.episode_step_count = 0
        
        print(f"‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
        print(f"üìä –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: 5min={len(self.df_5min)}, 15min={len(self.df_15min)}, 1h={len(self.df_1h)}")
        print(f"üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {num_indicator_features}")
        print(f"üí∞ –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {initial_balance}")
        print(f"üîÑ –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞: {window_size}")
        print(f"‚úÖ –§–ò–õ–¨–¢–†–´ –ü–û–ö–£–ü–ö–ò –í–ö–õ–Æ–ß–ï–ù–´: –æ–±—ä–µ–º (0.5%) + ROI (-3%)")
        print(f"üöÄ –ü–†–ï–î–í–´–ß–ò–°–õ–ï–ù–ò–ï –°–û–°–¢–û–Ø–ù–ò–ô: env.step() = –ø—Ä–æ—Å—Ç–æ —Å–¥–≤–∏–≥ –∏–Ω–¥–µ–∫—Å–∞!")

    def _calculate_normalization_stats(self):
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
        """
        print("–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫ –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏...")
        
        # 1. –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ü–µ–Ω—ã OHLC –∏–∑ –≤—Å–µ—Ö –º–∞—Å—Å–∏–≤–æ–≤
        all_prices = np.concatenate([
            self.df_5min[:, :4].flatten(),
            self.df_15min[:, :4].flatten(),
            self.df_1h[:, :4].flatten()
        ]).astype(np.float32)
        
        self.price_mean = np.mean(all_prices)
        self.price_std = np.std(all_prices) + 1e-8

        # 2. –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –æ–±—ä–µ–º—ã
        all_volumes = np.concatenate([
            self.df_5min[:, 4].flatten(),
            self.df_15min[:, 4].flatten(),
            self.df_1h[:, 4].flatten()
        ]).astype(np.float32)
        
        self.volume_mean = np.mean(all_volumes)
        self.volume_std = np.std(all_volumes) + 1e-8

        # 3. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        if self.indicators.size > 0:
            self.indicator_means = np.mean(self.indicators, axis=0)
            self.indicator_stds = np.std(self.indicators, axis=0) + 1e-8
            self.indicator_stds[self.indicator_stds == 0] = 1e-8
        else:
            self.indicator_means = np.array([])
            self.indicator_stds = np.array([])
        
        print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã")
        print(f"üí∞ Price: mean={self.price_mean:.2f}, std={self.price_std:.2f}")
        print(f"üìä Volume: mean={self.volume_mean:.2f}, std={self.volume_std:.2f}")

    def _precompute_all_states(self):
        """
        –ü—Ä–µ–¥–≤—ã—á–∏—Å–ª—è–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        """
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –≤—Å–µ—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        total_features = []
        
        # 1. 5-–º–∏–Ω—É—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (OHLCV)
        total_features.append(self.df_5min)
        
        # 2. 15-–º–∏–Ω—É—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (OHLCV) - –∏–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ–º –¥–æ 5-–º–∏–Ω—É—Ç–Ω—ã—Ö
        df_15min_interpolated = self._interpolate_15min_to_5min()
        total_features.append(df_15min_interpolated)
        
        # 3. 1-—á–∞—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (OHLCV) - –∏–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ–º –¥–æ 5-–º–∏–Ω—É—Ç–Ω—ã—Ö
        df_1h_interpolated = self._interpolate_1h_to_5min()
        total_features.append(df_1h_interpolated)
        
        # 4. –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (–¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å, –æ–Ω–∏ —É–∂–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç 5-–º–∏–Ω—É—Ç–Ω—ã–º –¥–∞–Ω–Ω—ã–º)
        if self.indicators.size > 0:
            total_features.append(self.indicators)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        X = np.concatenate(total_features, axis=1).astype(np.float32)
        
        print(f"üîç –†–∞–∑–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–µ–¥–≤—ã—á–∏—Å–ª–µ–Ω–∏—è:")
        print(f"  ‚Ä¢ df_5min: {self.df_5min.shape}")
        print(f"  ‚Ä¢ df_15min: {self.df_15min.shape}")
        print(f"  ‚Ä¢ df_1h: {self.df_1h.shape}")
        print(f"  ‚Ä¢ indicators: {self.indicators.shape if self.indicators.size > 0 else '–ø—É—Å—Ç–æ–π'}")
        print(f"  ‚Ä¢ –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π X: {X.shape}")
        print(f"  ‚Ä¢ indicator_means: {self.indicator_means.shape if len(self.indicator_means) > 0 else '–ø—É—Å—Ç–æ–π'}")
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
        X_normalized = self._normalize_features(X)
        
        # –°–æ–∑–¥–∞–µ–º —Å–∫–æ–ª—å–∑—è—â–∏–µ –æ–∫–Ω–∞
        W = self.lookback_window
        if len(X_normalized) >= W:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º sliding_window_view –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            sw = np.lib.stride_tricks.sliding_window_view(X_normalized, (W, X_normalized.shape[1]))[:, 0]
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ [T-W+1, W*features]
            self.precomputed_states = sw.reshape(sw.shape[0], -1).astype(np.float32)
        else:
            # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–Ω—å—à–µ –æ–∫–Ω–∞, —Å–æ–∑–¥–∞–µ–º –Ω—É–ª–µ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            self.precomputed_states = np.zeros((1, self.observation_space_shape), dtype=np.float32)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ torch —Ç–µ–Ω–∑–æ—Ä –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        self.states_tensor = torch.from_numpy(self.precomputed_states)
        
        print(f"üìä –ü—Ä–µ–¥–≤—ã—á–∏—Å–ª–µ–Ω–æ {len(self.precomputed_states)} —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–∞–∑–º–µ—Ä–æ–º {self.precomputed_states.shape[1]}")
        print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤:")
        print(f"  ‚Ä¢ precomputed_states.shape: {self.precomputed_states.shape}")
        print(f"  ‚Ä¢ observation_space_shape: {self.observation_space_shape}")
        print(f"  ‚Ä¢ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: {'‚úÖ' if self.precomputed_states.shape[1] == self.observation_space_shape - 2 else '‚ùå'}")
        
        # –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º
        if self.precomputed_states.shape[1] != self.observation_space_shape - 2:
            print(f"‚ö†Ô∏è –ò—Å–ø—Ä–∞–≤–ª—è—é —Ä–∞–∑–º–µ—Ä observation_space_shape")
            self.observation_space_shape = self.precomputed_states.shape[1] + 2
            print(f"  ‚Ä¢ –ù–æ–≤—ã–π observation_space_shape: {self.observation_space_shape}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º observation_space
            self.observation_space = spaces.Box(low=-np.inf, high=np.inf, 
                                                shape=(self.observation_space_shape,), 
                                                dtype=np.float32)

    def _interpolate_15min_to_5min(self):
        """
        –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ—Ç 15-–º–∏–Ω—É—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ 5-–º–∏–Ω—É—Ç–Ω—ã—Ö
        """
        if len(self.df_15min) == 0:
            return np.zeros((len(self.df_5min), 5), dtype=np.float32)
        
        # –ö–∞–∂–¥—ã–µ 3 –ø—è—Ç–∏–º–∏–Ω—É—Ç–∫–∏ = 1 –ø—è—Ç–Ω–∞–¥—Ü–∞—Ç–∏–º–∏–Ω—É—Ç–∫–∞
        interpolated = np.zeros((len(self.df_5min), 5), dtype=np.float32)
        
        for i in range(len(self.df_5min)):
            # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é 15-–º–∏–Ω—É—Ç–Ω—É—é —Å–≤–µ—á—É
            idx_15min = i // 3
            if idx_15min < len(self.df_15min):
                interpolated[i] = self.df_15min[idx_15min]
            else:
                # –ï—Å–ª–∏ –≤—ã—Ö–æ–¥–∏–º –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–æ—Å—Ç—É–ø–Ω—É—é
                interpolated[i] = self.df_15min[-1] if len(self.df_15min) > 0 else 0
        
        return interpolated

    def _interpolate_1h_to_5min(self):
        """
        –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ—Ç 1-—á–∞—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ 5-–º–∏–Ω—É—Ç–Ω—ã—Ö
        """
        if len(self.df_1h) == 0:
            return np.zeros((len(self.df_5min), 5), dtype=np.float32)
        
        # –ö–∞–∂–¥—ã–µ 12 –ø—è—Ç–∏–º–∏–Ω—É—Ç–æ–∫ = 1 —á–∞—Å
        interpolated = np.zeros((len(self.df_5min), 5), dtype=np.float32)
        
        for i in range(len(self.df_5min)):
            # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é 1-—á–∞—Å–æ–≤—É—é —Å–≤–µ—á—É
            idx_1h = i // 12
            if idx_1h < len(self.df_1h):
                interpolated[i] = self.df_1h[idx_1h]
            else:
                # –ï—Å–ª–∏ –≤—ã—Ö–æ–¥–∏–º –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–æ—Å—Ç—É–ø–Ω—É—é
                interpolated[i] = self.df_1h[-1] if len(self.df_1h) > 0 else 0
        
        return interpolated

    def _normalize_features(self, X):
        """
        –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–µ–¥–≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        """
        normalized = X.copy()
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ü–µ–Ω (–ø–µ—Ä–≤—ã–µ 4 –∫–æ–ª–æ–Ω–∫–∏ –∫–∞–∂–¥–æ–≥–æ –±–ª–æ–∫–∞ OHLCV)
        price_cols = []
        for i in range(0, X.shape[1], 5):
            if i + 4 <= X.shape[1]:
                price_cols.extend(range(i, i + 4))
        
        if price_cols:
            normalized[:, price_cols] = (X[:, price_cols] - self.price_mean) / self.price_std
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–º–æ–≤ (5-—è –∫–æ–ª–æ–Ω–∫–∞ –∫–∞–∂–¥–æ–≥–æ –±–ª–æ–∫–∞ OHLCV)
        volume_cols = list(range(4, X.shape[1], 5))
        if volume_cols:
            normalized[:, volume_cols] = (X[:, volume_cols] - self.volume_mean) / self.volume_std
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if self.indicators.size > 0:
            # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –ø–æ—Å–ª–µ –≤—Å–µ—Ö OHLCV –¥–∞–Ω–Ω—ã—Ö
            # –£ –Ω–∞—Å 3 –±–ª–æ–∫–∞ OHLCV (5min, 15min, 1h) –ø–æ 5 –∫–æ–ª–æ–Ω–æ–∫ –∫–∞–∂–¥—ã–π = 15 –∫–æ–ª–æ–Ω–æ–∫
            indicator_start = 15  # 3 * 5 = 15 –∫–æ–ª–æ–Ω–æ–∫ OHLCV
            if indicator_start < X.shape[1]:
                indicator_cols = range(indicator_start, X.shape[1])
                print(f"üîç –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤:")
                print(f"  ‚Ä¢ indicator_start: {indicator_start}")
                print(f"  ‚Ä¢ indicator_cols: {len(indicator_cols)} –∫–æ–ª–æ–Ω–æ–∫")
                print(f"  ‚Ä¢ indicator_means: {len(self.indicator_means)} –∑–Ω–∞—á–µ–Ω–∏–π")
                print(f"  ‚Ä¢ X.shape: {X.shape}")
                
                # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                print(f"‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞—é –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
                # normalized[:, indicator_cols] = (X[:, indicator_cols] - self.indicator_means) / self.indicator_stds
        
        # –û—á–∏—â–∞–µ–º –æ—Ç NaN
        normalized = np.nan_to_num(normalized, nan=0.0)
        
        return normalized

    def _get_state(self) -> np.ndarray:
        """
        –£–õ–¨–¢–†–ê-–ë–´–°–¢–†–ê–Ø –≤–µ—Ä—Å–∏—è _get_state —Å –ø—Ä–µ–¥–≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–º–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
        """
        current_5min_candle_idx = self.current_step - 1 
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
        if current_5min_candle_idx < self.lookback_window - 1 or current_5min_candle_idx >= len(self.precomputed_states):
            return np.zeros(self.observation_space_shape, dtype=np.float32)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–≤—ã—á–∏—Å–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        state_idx = current_5min_candle_idx - (self.lookback_window - 1)
        if state_idx < 0 or state_idx >= len(self.precomputed_states):
            return np.zeros(self.observation_space_shape, dtype=np.float32)
        
        # –ë–µ—Ä–µ–º –ø—Ä–µ–¥–≤—ã—á–∏—Å–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        precomputed_state = self.precomputed_states[state_idx].copy()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –±–∞–ª–∞–Ω—Å –∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É
        try:
            normalized_balance = self.balance_scaler.transform(np.array([[self.balance]]))[0][0]
            normalized_crypto_held = self.crypto_held_scaler.transform(np.array([[self.crypto_held]]))[0][0]
        except Exception:
            normalized_balance = 0.0
            normalized_crypto_held = 0.0
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –≤ –∫–æ–Ω–µ—Ü —Å–æ—Å—Ç–æ—è–Ω–∏—è
        final_state = np.concatenate([
            precomputed_state,
            np.array([normalized_balance, normalized_crypto_held], dtype=np.float32)
        ])
        
        return final_state

    def get_state_tensor(self, step_idx: int) -> torch.Tensor:
        """
        –£–õ–¨–¢–†–ê-–ë–´–°–¢–†–´–ô –¥–æ—Å—Ç—É–ø –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é —á–µ—Ä–µ–∑ torch —Ç–µ–Ω–∑–æ—Ä
        """
        current_5min_candle_idx = step_idx - 1 
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
        if current_5min_candle_idx < self.lookback_window - 1 or current_5min_candle_idx >= len(self.states_tensor):
            return torch.zeros(self.observation_space_shape, dtype=torch.float32)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–≤—ã—á–∏—Å–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        state_idx = current_5min_candle_idx - (self.lookback_window - 1)
        if state_idx < 0 or state_idx >= len(self.states_tensor):
            return torch.zeros(self.observation_space_shape, dtype=torch.float32)
        
        # –ë–µ—Ä–µ–º –ø—Ä–µ–¥–≤—ã—á–∏—Å–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ —Ç–µ–Ω–∑–æ—Ä–∞
        precomputed_state = self.states_tensor[state_idx].clone()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –±–∞–ª–∞–Ω—Å –∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É
        try:
            normalized_balance = self.balance_scaler.transform(np.array([[self.balance]]))[0][0]
            normalized_crypto_held = self.crypto_held_scaler.transform(np.array([[self.crypto_held]]))[0][0]
        except Exception:
            normalized_balance = 0.0
            normalized_crypto_held = 0.0
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –≤ –∫–æ–Ω–µ—Ü —Å–æ—Å—Ç–æ—è–Ω–∏—è
        final_state = torch.cat([
            precomputed_state,
            torch.tensor([normalized_balance, normalized_crypto_held], dtype=torch.float32)
        ])
        
        return final_state

    def reset(self):
        """
        –°–±—Ä–æ—Å –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ —ç–ø–∏–∑–æ–¥–∞
        """
        self._episode_idx += 1
        self._can_log = (self._episode_idx % self._log_interval == 0)
        
        # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
        initial_balance = getattr(self.cfg, 'initial_balance', 10000.0)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 10000
        self.balance = initial_balance
        self.crypto_held = 0.0
        self.last_buy_price = None
        self.last_buy_step = None
        self.trailing_stop_counter = 0
        self.max_price_during_hold = None
        
        # –û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ —Å–¥–µ–ª–æ–∫
        self.trades = []
        
        # –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫
        self.vol_buf.clear()
        self.roi_buf.clear()
        self.buy_attempts = 0
        self.buy_rejected_vol = 0
        self.buy_rejected_roi = 0
        
        # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π
        self.action_counts = {0: 0, 1: 0, 2: 0}
        
        # –í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–π –Ω–∞—á–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏ —Å —É—á–µ—Ç–æ–º –¥–ª–∏–Ω—ã —ç–ø–∏–∑–æ–¥–∞
        episode_length = getattr(self.cfg, 'episode_length', 1000)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1000 —à–∞–≥–æ–≤
        max_start = self.total_steps - episode_length
        min_start = self.min_valid_start_step
        
        if max_start <= min_start:
            self.start_step = min_start
        else:
            self.start_step = random.randint(min_start, max_start)
        
        self.current_step = self.start_step
        
        # –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —ç–ø–∏–∑–æ–¥–∞
        self.episode_start_time = time.time()
        self.episode_step_count = 0
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–¥–≤—ã—á–∏—Å–ª–µ–Ω–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
        return self._get_state()

    def step(self, action):
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏
        """
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
        current_price = self.df_5min[self.current_step - 1, 3]  # Close price
        
        # –ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞
        reward = 0.0
        done = False
        info = {}
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        self.action_counts[action] += 1
        self.episode_step_count += 1
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        if action == 1:  # BUY
            if self.crypto_held == 0:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –¥–µ—Ä–∂–∏–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
                if self._check_buy_filters():
                    # –ü–æ–∫—É–ø–∞–µ–º
                    buy_amount = self.balance * self.position_fraction
                    crypto_to_buy = buy_amount / current_price
                    self.crypto_held = crypto_to_buy
                    self.balance -= buy_amount
                    self.last_buy_price = current_price
                    self.last_buy_step = self.current_step
                    reward = 0.03  # –£–≤–µ–ª–∏—á–∏–ª –Ω–∞–≥—Ä–∞–¥—É –∑–∞ —É—Å–ø–µ—à–Ω—É—é –ø–æ–∫—É–ø–∫—É —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
                    self._log(f"[{self.current_step}] üîµ BUY: {crypto_to_buy:.4f} at {current_price:.2f}")
                else:
                    reward = -0.002  # –£–º–µ–Ω—å—à–∏–ª —à—Ç—Ä–∞—Ñ –∑–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
            else:
                reward = -0.01  # –£–º–µ–Ω—å—à–∏–ª —à—Ç—Ä–∞—Ñ –∑–∞ –ø–æ–ø—ã—Ç–∫—É –∫—É–ø–∏—Ç—å –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –ø–æ–∑–∏—Ü–∏–∏
                
        elif action == 2:  # SELL
            if self.crypto_held > 0:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–µ—Ä–∂–∏–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É
                # –ü—Ä–æ–¥–∞–µ–º
                sell_amount = self.crypto_held * current_price
                self.balance += sell_amount
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫
                pnl = (current_price - self.last_buy_price) / self.last_buy_price
                net_profit_loss = sell_amount - (self.crypto_held * self.last_buy_price)
                
                # –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –ø—Ä–æ–¥–∞–∂—É (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ)
                reward += np.tanh(pnl * 25) * 2  # –ó–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–¥–µ–ª–∫–∏
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –∫–∞—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–∫–∏
                if pnl > 0.05:  # –ü—Ä–∏–±—ã–ª—å > 5%
                    reward += 0.3  # –£–≤–µ–ª–∏—á–∏–ª –±–æ–Ω—É—Å –∑–∞ —Ö–æ—Ä–æ—à—É—é —Å–¥–µ–ª–∫—É —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
                elif pnl < -0.03:  # –£–±—ã—Ç–æ–∫ > 3%
                    reward -= 0.01  # –£–º–µ–Ω—å—à–∏–ª —à—Ç—Ä–∞—Ñ –∑–∞ –±–æ–ª—å—à–æ–π —É–±—ã—Ç–æ–∫
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–¥–µ–ª–∫—É
                self.trades.append({
                    "roi": pnl,
                    "net": net_profit_loss,
                    "reward": reward,
                    "duration": (self.current_step - self.last_buy_step) * 5 if self.last_buy_step else 0
                })
                
                self.crypto_held = 0
                self.last_buy_price = None
                self.last_buy_step = None
                self.trailing_stop_counter = 0
                self.max_price_during_hold = None
                
                self._log(f"[{self.current_step}] üî¥ SELL: {sell_amount:.2f}, PnL: {pnl:.2%}")
            else:
                reward = -0.01  # –£–º–µ–Ω—å—à–∏–ª —à—Ç—Ä–∞—Ñ –∑–∞ –ø–æ–ø—ã—Ç–∫—É –ø—Ä–æ–¥–∞—Ç—å –±–µ–∑ –ø–æ–∑–∏—Ü–∏–∏
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ HOLD –¥–µ–π—Å—Ç–≤–∏—è (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ)
        if action == 0:
            if self.crypto_held > 0 and self.last_buy_price is not None:
                # --- –¢—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ) ---
                if self.epsilon <= 0.2:  # —Ñ–∞–∑–∞ exploitation
                    # 1. –æ–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º—É–º
                    if (not hasattr(self, "max_price_during_hold") 
                        or self.max_price_during_hold is None 
                        or self.last_buy_step == self.current_step):
                        self.max_price_during_hold = current_price
                    
                    if current_price > self.max_price_during_hold:  # –Ω–æ–≤—ã–π –ø–∏–∫
                        self.max_price_during_hold = current_price
                        self.trailing_stop_counter = 0
                    
                    # 2. —Å—á–∏—Ç–∞–µ–º –ø—Ä–æ—Å–∞–¥–∫—É –æ—Ç –ø–∏–∫–∞
                    drawdown = (self.max_price_during_hold - current_price) / self.max_price_during_hold
                    if drawdown > 0.02:
                        self.trailing_stop_counter += 1
                    
                    # 3. —Ç—Ä–∏ –ø–æ–¥—Ä—è–¥ –±–∞—Ä–∞ —Å drawdown > 2% ‚Üí –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π SELL
                    if self.trailing_stop_counter >= 3:
                        reward -= 0.03
                        self._log(f"[{self.current_step}] üîª TRAILING STOP ‚Äî SELL by drawdown: {drawdown:.2%}")
                        self._force_sell(current_price, 'TRAILING STOP')
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                        self._update_stats(current_price)
                        self.current_step += 1
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —ç–ø–∏–∑–æ–¥–∞
                        episode_length = getattr(self.cfg, 'episode_length', 1000)
                        done = (
                            self.current_step >= self.start_step + episode_length or
                            self.current_step >= self.total_steps
                        )
                        
                        info.update({
                            "current_balance": self.balance,
                            "current_price": current_price,
                            "total_profit": (self.balance + self.crypto_held * current_price) - getattr(self.cfg, 'initial_balance', 10000.0),
                            "reward": reward
                        })
                        return self._get_state(), reward, done, info
                
                # --- Take Profit / Stop Loss (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ) ---
                unrealized_pnl_percent = (current_price - self.last_buy_price) / self.last_buy_price
                
                if unrealized_pnl_percent <= self.STOP_LOSS_PCT:
                    reward -= 0.05  # —à—Ç—Ä–∞—Ñ –∑–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å
                    self._force_sell(current_price, "‚ùå - STOP-LOSS triggered")
                    
                elif unrealized_pnl_percent >= self.TAKE_PROFIT_PCT:
                    reward += 0.05  # –ø–æ–æ—â—Ä–µ–Ω–∏–µ –∑–∞ —Ñ–∏–∫—Å–∞—Ü–∏—é –ø—Ä–æ—Ñ–∏—Ç–∞
                    self._force_sell(current_price, "üéØ - TAKE-PROFIT hit")
                
                # --- –ù–∞–≥—Ä–∞–¥—ã –∑–∞ —É–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ) ---
                if unrealized_pnl_percent > 0:
                    # –ß–µ–º –≤—ã—à–µ –Ω–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–∏–±—ã–ª—å, —Ç–µ–º –±–æ–ª—å—à–µ –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ —É–¥–µ—Ä–∂–∞–Ω–∏–µ
                    reward += unrealized_pnl_percent * 2  # –£–º–µ–Ω—å—à–∏–ª –º–Ω–æ–∂–∏—Ç–µ–ª—å —Å 5 –¥–æ 2
                else:
                    # –ß–µ–º –±–æ–ª—å—à–µ –Ω–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —É–±—ã—Ç–æ–∫, —Ç–µ–º –±–æ–ª—å—à–µ —à—Ç—Ä–∞—Ñ –∑–∞ —É–¥–µ—Ä–∂–∞–Ω–∏–µ
                    reward += unrealized_pnl_percent * 3  # –£–º–µ–Ω—å—à–∏–ª –º–Ω–æ–∂–∏—Ç–µ–ª—å —Å 10 –¥–æ 3
            else:
                # –ï—Å–ª–∏ action == HOLD –∏ –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏
                reward = 0.001  # –ù–µ–±–æ–ª—å—à–æ–µ –ø–æ–æ—â—Ä–µ–Ω–∏–µ –∑–∞ —Ä–∞–∑—É–º–Ω–æ–µ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏–µ –≤–º–µ—Å—Ç–æ —à—Ç—Ä–∞—Ñ–∞
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self._update_stats(current_price)
        
        # –ù–µ–±–æ–ª—å—à–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ç–æ—Ä–≥–æ–≤–ª–∏ (–ø–æ–æ—â—Ä—è–µ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ)
        if action != 0:  # –ï—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ HOLD
            reward += 0.001  # –ù–µ–±–æ–ª—å—à–æ–µ –ø–æ–æ—â—Ä–µ–Ω–∏–µ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        self.current_step += 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —ç–ø–∏–∑–æ–¥–∞
        episode_length = getattr(self.cfg, 'episode_length', 1000)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1000 —à–∞–≥–æ–≤
        
        done = (
            self.current_step >= self.start_step + episode_length or  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —ç–ø–∏–∑–æ–¥–∞
            self.current_step >= self.total_steps
        )
        
        if done:
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–¥–∞–µ–º –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏—è
            if self.crypto_held > 0:
                final_price = self.df_5min[self.current_step - 1, 3]
                final_sell_amount = self.crypto_held * final_price
                self.balance += final_sell_amount
                pnl = (final_price - self.last_buy_price) / self.last_buy_price
                net_profit_loss = final_sell_amount - (self.crypto_held * self.last_buy_price)
                
                self.trades.append({
                    "roi": pnl,
                    "net": net_profit_loss,
                    "reward": 0,
                    "duration": (self.current_step - self.last_buy_step) * 5 if self.last_buy_step else 0
                })
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —ç–ø–∏–∑–æ–¥–∞ (—Ç–µ–ø–µ—Ä—å –≤—ã–≤–æ–¥–∏—Ç—Å—è –≤ train_model_optimized.py)
            # if self.episode_start_time is not None:
            #     episode_duration = time.time() - self.episode_start_time
            #     steps_per_second = self.episode_step_count / episode_duration if episode_duration > 0 else 0
            #     print(f"‚è±Ô∏è –≠–ø–∏–∑–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω: {episode_duration:.2f}—Å, {self.episode_step_count} —à–∞–≥–æ–≤, {steps_per_second:.1f} —à–∞–≥/—Å")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        initial_balance = getattr(self.cfg, 'initial_balance', 10000.0)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 10000
        info.update({
            "current_balance": self.balance,
            "current_price": current_price,
            "total_profit": (self.balance + self.crypto_held * current_price) - initial_balance,
            "reward": reward
        })
        
        return self._get_state(), reward, done, info

    def _check_buy_filters(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏
        """
        self.buy_attempts += 1
        
        # –í–ö–õ–Æ–ß–ê–ï–ú –§–ò–õ–¨–¢–†–´ –î–õ–Ø –£–õ–£–ß–®–ï–ù–ò–Ø –ö–ê–ß–ï–°–¢–í–ê –°–î–ï–õ–û–ö
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ä–µ–º–∞ - –í–ö–õ–Æ–ß–ï–ù —Å –º—è–≥–∫–∏–º –ø–æ—Ä–æ–≥–æ–º
        current_volume = self.df_5min[self.current_step - 1, 4]
        vol_relative = calc_relative_vol_numpy(self.df_5min, self.current_step - 1, 12)
        
        if vol_relative < 0.002:  # –ú—è–≥–∫–∏–π –ø–æ—Ä–æ–≥ 0.5% –≤–º–µ—Å—Ç–æ 1%
            self.buy_rejected_vol += 1
            if self.current_step % 100 == 0:
                print(f"üîç –§–∏–ª—å—Ç—Ä –æ–±—ä–µ–º–∞: vol_relative={vol_relative:.4f} < 0.005, –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")
            return False
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ ROI - –í–ö–õ–Æ–ß–ï–ù
        if len(self.roi_buf) > 0:
            recent_roi_mean = np.mean(list(self.roi_buf))
            if recent_roi_mean < -0.03:  # –ú—è–≥–∫–∏–π –ø–æ—Ä–æ–≥ -3% –≤–º–µ—Å—Ç–æ -2%
                self.buy_rejected_roi += 1
                if self.current_step % 100 == 0:
                    print(f"üîç –§–∏–ª—å—Ç—Ä ROI: recent_roi_mean={recent_roi_mean:.4f} < -0.03, –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")
                return False
        
        # –í—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø—Ä–æ–π–¥–µ–Ω—ã - —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø–æ–∫—É–ø–∫—É
        return True

    def _update_stats(self, current_price: float):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        """
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—ä–µ–º–∞
        current_volume = self.df_5min[self.current_step - 1, 4]
        self.vol_buf.append(current_volume)
        update_vol_stats(self.vol_buf, self.vol_stats)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ROI –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏—è
        if self.crypto_held > 0 and self.last_buy_price is not None:
            unrealized_roi = (current_price - self.last_buy_price) / self.last_buy_price
            self.roi_buf.append(unrealized_roi)
            update_roi_stats(self.roi_buf, self.roi_stats)

    def _force_sell(self, current_price: float, reason: str):
        """
        –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞ (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ)
        """
        if self.crypto_held > 0:
            sell_amount = self.crypto_held * current_price
            self.balance += sell_amount
            
            pnl = (current_price - self.last_buy_price) / self.last_buy_price
            net_profit_loss = sell_amount - (self.crypto_held * self.last_buy_price)
            
            self.trades.append({
                "roi": pnl,
                "net": net_profit_loss,
                "reward": 0,
                "duration": (self.current_step - self.last_buy_step) * 5 if self.last_buy_step else 0
            })
            
            self.crypto_held = 0
            self.last_buy_price = None
            self.last_buy_step = None
            self.trailing_stop_counter = 0
            self.max_price_during_hold = None
            
            self._log(f"[{self.current_step}] üî¥ FORCE SELL ({reason}): {sell_amount:.2f}, PnL: {pnl:.2%}")

    def _log(self, *args, **kwargs):
        if self._can_log:
            print(*args, **kwargs)
