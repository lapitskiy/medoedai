from envs.dqn_model.gym.gutils_optimized import calc_relative_vol_numpy, commission_penalty, update_roi_stats, update_vol_stats
from envs.dqn_model.gym.indicators_optimized import preprocess_dataframes
import gymnasium as gym
from gymnasium import spaces
import numpy as np
import random
import torch
import time
import pandas as pd  # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º pandas –¥–ª—è datetime –æ–ø–µ—Ä–∞—Ü–∏–π
from sklearn.preprocessing import StandardScaler
from envs.dqn_model.gym.gconfig import GymConfig
from typing import Optional, Dict
from collections import deque

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é
import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..', '..', 'utils'))
try:
    from adaptive_normalization import adaptive_normalizer
    ADAPTIVE_NORMALIZATION_AVAILABLE = True
except ImportError:
    print("‚ö†Ô∏è –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
    ADAPTIVE_NORMALIZATION_AVAILABLE = False

class CryptoTradingEnvOptimized(gym.Env):
    metadata = {'render.modes': ['human']}
    
    def __init__(self, dfs: Dict, cfg: Optional[GymConfig] = None, lookback_window: int = 20, indicators_config=None, episode_length: Optional[int] = None, normalization_stats: Optional[Dict] = None):        
        super(CryptoTradingEnvOptimized, self).__init__() 
        self.cfg = cfg or GymConfig()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —ç–ø–∏–∑–æ–¥–∞
        self.episode_length = episode_length or getattr(self.cfg, 'episode_length', 10000) # Fallback –Ω–∞ 10000 —à–∞–≥–æ–≤
        if self.episode_length < 100:
            print(f"‚ö†Ô∏è –î–ª–∏–Ω–∞ —ç–ø–∏–∑–æ–¥–∞ {self.episode_length} —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é 10000")
            self.episode_length = 10000
        
        self.vol_scaled = 0
        self.epsilon = 1.0
        
        # PRINT LOG DOCKER
        self._episode_idx = -1
        self._log_interval = 20
        self._can_log = False

        # —Ñ–∏–ª—å—Ç—Ä—ã ¬´–¥—É—à–∞—Ç¬ª –ø–æ–∫—É–ø–∫–∏?
        self.buy_attempts = 0
        self.buy_rejected_vol = 0
        self.buy_rejected_roi = 0
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞ —Å –∑–Ω–∞—á–µ–Ω–∏–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        window_size = getattr(self.cfg, 'window288', 288)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 288 (24 —á–∞—Å–∞ * 12 –ø—è—Ç–∏–º–∏–Ω—É—Ç–æ–∫)
        self.vol_buf = deque(maxlen=window_size)
        self.roi_buf = deque(maxlen=window_size)
        
        # –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–ô —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
        self.base_position_fraction = 0.30  # –ë–∞–∑–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
        self.position_fraction = self.base_position_fraction  # –¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
        self.position_confidence_threshold = 0.7  # –ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏

        # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self.trade_fee_percent = 0.00055 # –ö–æ–º–∏—Å—Å–∏—è 0.055%
        
        # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º —Å–∏–º–≤–æ–ª –∏–∑ dfs (dict) –∏–ª–∏ –æ–±—ä–µ–∫—Ç–∞
        if isinstance(dfs, dict):
            self.symbol = dfs.get('symbol', 'BTCUSDT')
        else:
            self.symbol = getattr(dfs, 'symbol', 'BTCUSDT')
        
        if ADAPTIVE_NORMALIZATION_AVAILABLE:
            # –ü–æ–ª—É—á–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
            trading_params = adaptive_normalizer.get_trading_params(self.symbol, dfs['df_5min'])
            self.STOP_LOSS_PCT = trading_params['stop_loss_pct']
            self.TAKE_PROFIT_PCT = trading_params['take_profit_pct']
            self.min_hold_steps = trading_params['min_hold_steps']
            self.volume_threshold = trading_params['volume_threshold']
            print(f"üîß –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è {self.symbol}:")
            print(f"  ‚Ä¢ Stop Loss: {self.STOP_LOSS_PCT:.3f}")
            print(f"  ‚Ä¢ Take Profit: {self.TAKE_PROFIT_PCT:.3f}")
            print(f"  ‚Ä¢ Min Hold: {self.min_hold_steps} —à–∞–≥–æ–≤")
            print(f"  ‚Ä¢ Volume Threshold: {self.volume_threshold:.4f}")
        else:
            # –£–õ–£–ß–®–ï–ù–û: –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞
            self.base_stop_loss = -0.03      # –ë–∞–∑–æ–≤—ã–π stop-loss
            self.base_take_profit = +0.06    # –ë–∞–∑–æ–≤—ã–π take-profit
            self.base_min_hold = 8           # –ë–∞–∑–æ–≤–æ–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è
            self.volume_threshold = 0.0001   # –ë–∞–∑–æ–≤—ã–π –ø–æ—Ä–æ–≥ –æ–±—ä–µ–º–∞
            
            # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –≤–æ –≤—Ä–µ–º—è —Ç–æ—Ä–≥–æ–≤–ª–∏)
            self.STOP_LOSS_PCT = self.base_stop_loss
            self.TAKE_PROFIT_PCT = self.base_take_profit
            self.min_hold_steps = self.base_min_hold
            
            print(f"üîß –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–ï –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è {self.symbol}:")
            print(f"  ‚Ä¢ –ë–∞–∑–æ–≤—ã–π Stop Loss: {self.base_stop_loss:.3f}")
            print(f"  ‚Ä¢ –ë–∞–∑–æ–≤—ã–π Take Profit: {self.base_take_profit:.3f}")
            print(f"  ‚Ä¢ –ë–∞–∑–æ–≤—ã–π Min Hold: {self.base_min_hold} —à–∞–≥–æ–≤")
            print(f"  ‚Ä¢ Volume Threshold: {self.volume_threshold:.4f}")
            print(f"  ‚Ä¢ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±—É–¥—É—Ç –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫ —Ä—ã–Ω–æ—á–Ω—ã–º —É—Å–ª–æ–≤–∏—è–º")
        
        # Multi-step Learning –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.n_step = getattr(self.cfg, 'n_step', 3)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –¥–ª—è n-step learning
        self.n_step_buffer = deque(maxlen=self.n_step)  # –ë—É—Ñ–µ—Ä –¥–ª—è n-step transitions
        self.gamma = getattr(self.cfg, 'gamma', 0.99)  # Discount factor
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º pandas DataFrames –≤ numpy arrays –∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
        df_5min_raw = dfs['df_5min'].values if hasattr(dfs['df_5min'], 'values') else dfs['df_5min']
        df_15min_raw = dfs['df_15min'].values if hasattr(dfs['df_15min'], 'values') else dfs['df_15min']
        df_1h_raw = dfs['df_1h'].values if hasattr(dfs['df_1h'], 'values') else dfs['df_1h']
        
        if indicators_config is None:
            self.indicators_config = {
                'rsi': {'length': 14},
                'ema': {'lengths': [100, 200]},
                'ema_cross': {
                    'pairs': [(100, 200)],
                    'include_cross_signal': True
                },
                'sma': {'length': 14},
            }
        else:
            self.indicators_config = indicators_config
        
        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        (self.df_5min, self.df_15min, self.df_1h, 
         self.indicators, self.individual_indicators) = preprocess_dataframes(
            df_5min_raw, df_15min_raw, df_1h_raw, self.indicators_config
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º funding-—Ñ–∏—á–∏ –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã, –µ—Å–ª–∏ –µ—Å—Ç—å –≤ DataFrame
        try:
            df5_src = dfs['df_5min'] if isinstance(dfs, dict) else None
            funding_cols = ['funding_rate_bp', 'funding_rate_ema', 'funding_rate_change', 'funding_sign']
            present_cols = [c for c in funding_cols if (df5_src is not None and hasattr(df5_src, 'columns') and c in df5_src.columns)]
            if present_cols and len(self.df_5min) == len(df5_src):
                F = []
                for c in present_cols:
                    v = df5_src[c].astype(float).values
                    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É –∏ —Ç–∏–ø—É
                    if c in ('funding_rate_ema', 'funding_rate_change'):
                        v = v * 10000.0  # –≤ –±–∏–ø—Å—ã
                    # –∫–ª–∏–ø –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤ [-1,1] –Ω–∞ 50 bp
                    v = np.clip(v / 50.0, -1.0, 1.0).astype(np.float32)
                    F.append(v.reshape(-1, 1))
                if F:
                    F_arr = np.concatenate(F, axis=1).astype(np.float32)
                    if self.indicators.size > 0:
                        self.indicators = np.concatenate([self.indicators, F_arr], axis=1).astype(np.float32)
                    else:
                        self.indicators = F_arr
                    print(f"üß† Funding –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã: {present_cols} (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω—ã)")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å funding –ø—Ä–∏–∑–Ω–∞–∫–∏: {e}")
        
        # –†–ï–ñ–ò–ú –†–´–ù–ö–ê: –¥–æ–±–∞–≤–ª—è–µ–º per-window –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–µ —Ñ–∏—á–∏ (drift, vol, slope, r2) –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–∫–Ω–∞
        try:
            def _compute_regime_metrics_per_window(closes: np.ndarray, windows=(60,180,300)) -> np.ndarray:
                T = closes.shape[0]
                if T < 10:
                    return np.zeros((T, 4 * len(windows)), dtype=np.float32)
                y = closes.astype(np.float64)
                # –ø—Ä–µ–¥–≤—ã—á–∏—Å–ª–∏–º returns
                r = np.zeros_like(y)
                r[1:] = (y[1:] - y[:-1]) / np.maximum(y[:-1], 1e-12)
                all_feats = []
                for w in windows:
                    if w < 2 or T <= w:
                        all_feats.append(np.zeros((T, 4), dtype=np.float32))
                        continue
                    N = float(w)
                    # –°—É–º–º—ã –ø–æ x (0..w-1)
                    sum_x = N*(N-1.0)/2.0
                    sum_x2 = (N*(N-1.0)*(2.0*N-1.0))/6.0
                    xbar = sum_x / N
                    S_xx = sum_x2 - N*(xbar**2)
                    # –°–∫–æ–ª—å–∂–µ–Ω–∏—è –ø–æ y
                    ones_w = np.ones(w, dtype=np.float64)
                    sum_y = np.convolve(y, ones_w, mode='valid')  # len T-w+1
                    sum_y2 = np.convolve(y*y, ones_w, mode='valid')
                    # sum(x*y) —Å–æ —Å–≤—ë—Ä—Ç–∫–æ–π —è–¥—Ä–∞ x[::-1]
                    kernel = np.arange(w, dtype=np.float64)[::-1]
                    sum_xy = np.convolve(y, kernel, mode='valid')
                    # Drift: (y_t - y_{t-w})/y_{t-w}
                    drift = (y[w-1:] - y[:-w+1]) / np.maximum(y[:-w+1], 1e-12)
                    # Volatility: std returns –∑–∞ (w-1)
                    try:
                        win_r = np.lib.stride_tricks.sliding_window_view(r[1:], w-1)
                        vol = win_r.std(axis=1)
                    except Exception:
                        vol = np.array([r[i-w+2:i+1].std() if i+1 >= (w-1) else 0.0 for i in range(T-1)], dtype=np.float64)
                        vol = vol[w-2:]
                    # –†–µ–≥—Ä–µ—Å—Å–∏—è: slope –∏ R^2
                    S_xy = sum_xy - xbar*sum_y
                    slope = S_xy / np.maximum(S_xx, 1e-12)
                    ybar = sum_y / N
                    SST = sum_y2 - N*(ybar**2)
                    SSR = (slope**2) * S_xx
                    r2 = SSR / np.maximum(SST, 1e-12)
                    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –¥–ª–∏–Ω–µ T: –∑–∞–ø–æ–ª–Ω—è–µ–º –Ω—É–ª—è–º–∏ –ø–µ—Ä–≤—ã–µ w-1
                    zeros_head = np.zeros((w-1, 4), dtype=np.float32)
                    M = min(drift.shape[0], vol.shape[0], slope.shape[0], r2.shape[0])
                    tail = np.stack([
                        drift[:M].astype(np.float32),
                        vol[:M].astype(np.float32),
                        slope[:M].astype(np.float32),
                        np.clip(r2[:M], 0.0, 1.0).astype(np.float32)
                    ], axis=1)
                    feats_w = np.concatenate([zeros_head, tail], axis=0)
                    if feats_w.shape[0] < T:
                        pad = np.zeros((T - feats_w.shape[0], 4), dtype=np.float32)
                        feats_w = np.vstack([feats_w, pad])
                    all_feats.append(feats_w)
                if all_feats:
                    return np.concatenate(all_feats, axis=1).astype(np.float32)
                return np.zeros((T, 4 * len(windows)), dtype=np.float32)

            closes = self.df_5min[:, 3].astype(np.float32)
            regime_feats = _compute_regime_metrics_per_window(closes)
            if regime_feats is not None and regime_feats.shape[0] == self.df_5min.shape[0]:
                if self.indicators.size > 0:
                    self.indicators = np.concatenate([self.indicators, regime_feats], axis=1).astype(np.float32)
                else:
                    self.indicators = regime_feats.astype(np.float32)
                print("üß≠ Regime per-window metrics added: for each window [drift, vol, slope, r2]")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å regime –ø—Ä–∏–∑–Ω–∞–∫–∏: {e}")
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ–∑–¥–∞–µ–º datetime –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
        try:
            if hasattr(dfs, 'df_5min') and hasattr(dfs['df_5min'], 'index'):
                # –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å pandas DataFrame —Å datetime –∏–Ω–¥–µ–∫—Å–æ–º
                self._candle_datetimes = dfs['df_5min'].index.to_pydatetime()
            elif hasattr(dfs, 'df_5min') and hasattr(dfs['df_5min'], 'columns'):
                # –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å pandas DataFrame —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏
                if 'datetime' in dfs['df_5min'].columns:
                    self._candle_datetimes = pd.to_datetime(dfs['df_5min']['datetime']).dt.to_pydatetime()
                elif 'timestamp' in dfs['df_5min'].columns:
                    self._candle_datetimes = pd.to_datetime(dfs['df_5min']['timestamp'], unit='ms').dt.to_pydatetime()
                else:
                    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ datetime –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                    self._candle_datetimes = [pd.Timestamp.now() + pd.Timedelta(minutes=i*5) for i in range(len(self.df_5min))]
            else:
                # Fallback: —Å–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ datetime
                self._candle_datetimes = [pd.Timestamp.now() + pd.Timedelta(minutes=i*5) for i in range(len(self.df_5min))]
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å datetime –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: {e}")
            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ datetime –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            self._candle_datetimes = [pd.Timestamp.now() + pd.Timedelta(minutes=i*5) for i in range(len(self.df_5min))]
        
        self.total_steps = len(self.df_5min)
        self.lookback_window = lookback_window 
        
        self.action_space = spaces.Discrete(3) # 0: HOLD, 1: BUY, 2: SELL
        
        num_features_per_candle = 5 # Open, High, Low, Close, Volume        
        num_indicator_features = self.indicators.shape[1] if self.indicators.size > 0 else 0
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥–≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
        # 5min OHLCV + 15min OHLCV + 1h OHLCV + –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã + –±–∞–ª–∞–Ω—Å/–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞
        total_features_per_step = (
            num_features_per_candle +  # 5min OHLCV
            num_features_per_candle +  # 15min OHLCV (–∏–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
            num_features_per_candle +  # 1h OHLCV (–∏–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
            (num_indicator_features if self.indicators.size > 0 else 0)  # –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –Ω–∞ —à–∞–≥
        )
        
        # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        print(f"üîç –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è:")
        print(f"  ‚Ä¢ num_features_per_candle: {num_features_per_candle}")
        print(f"  ‚Ä¢ num_indicator_features: {num_indicator_features}")
        print(f"  ‚Ä¢ total_features_per_step: {total_features_per_step}")
        print(f"  ‚Ä¢ lookback_window: {self.lookback_window}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞–∑–º–µ—Ä—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
        if total_features_per_step <= 0:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: total_features_per_step = {total_features_per_step}")
            total_features_per_step = 15  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        
        self.observation_space_shape = (
            self.lookback_window * total_features_per_step +
            2  # normalized_balance –∏ normalized_crypto_held
        )
        
        print(f"  ‚Ä¢ observation_space_shape: {self.observation_space_shape}")

        self.observation_space = spaces.Box(low=-np.inf, high=np.inf, 
                                            shape=(self.observation_space_shape,), 
                                            dtype=np.float32)
        
        self.min_valid_start_step = self.lookback_window 
        self.current_train_start_idx = self.min_valid_start_step 
        
        # –≠—Ç–∏ –±—É–¥—É—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –≤ reset
        self.start_step = None
        self.current_step = None
        self.balance = None
        self.crypto_held = None
        self.last_buy_price = None
        self.last_buy_step = None    
        self.trailing_stop_counter = 0
        self.max_price_during_hold = None
        
        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º/—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
        if normalization_stats is not None:
            try:
                self._apply_normalization_stats(normalization_stats)
                print("‚úÖ –ü—Ä–∏–Ω—è—Ç—ã –≤–Ω–µ—à–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ (train) ‚Äî –µ–¥–∏–Ω—ã–π –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥ train/val/serving")
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –≤–Ω–µ—à–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏: {e}. –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞—é –ø–æ train split")
                self._calculate_normalization_stats()
        else:
            self._calculate_normalization_stats()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∫–∞–ª–µ—Ä—ã –¥–ª—è –±–∞–ª–∞–Ω—Å–∞ –∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        self.balance_scaler = StandardScaler()
        self.crypto_held_scaler = StandardScaler()
        
        self._precompute_all_states()
                
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å —Å –∑–Ω–∞—á–µ–Ω–∏–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        initial_balance = getattr(self.cfg, 'initial_balance', 10000.0)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 10000
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∫–∞–ª–µ—Ä–æ–≤
        max_balance = initial_balance * 10  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
        max_crypto = initial_balance / 100  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        
        balance_samples = np.array([[0], [initial_balance], [max_balance]])
        crypto_samples = np.array([[0], [max_crypto/2], [max_crypto]])
        
        self.balance_scaler.fit(balance_samples)
        self.crypto_held_scaler.fit(crypto_samples)
        
        # –°–ø–∏—Å–æ–∫ —Å–¥–µ–ª–æ–∫
        self.trades = []
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ —Å–¥–µ–ª–æ–∫ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ winrate
        self.all_trades = []
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
        self.vol_stats = {'mean': 0, 'std': 1}
        self.roi_stats = {'mean': 0, 'std': 1}
        
        # –°—á–µ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.action_counts = {0: 0, 1: 0, 2: 0}
        
        # –í—Ä–µ–º—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.episode_start_time = None
        self.episode_step_count = 0
        
        print(f"‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
        print(f"üìä –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: 5min={len(self.df_5min)}, 15min={len(self.df_15min)}, 1h={len(self.df_1h)}")
        print(f"üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {num_indicator_features}")
        print(f"üîÑ –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞: {window_size}")
        if hasattr(self, 'indicators') and self.indicators.size > 0:
            print(f"üß† –ò—Ç–æ–≥–æ–≤–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {self.indicators.shape}")

    def _calculate_normalization_stats(self):
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –¢–û–õ–¨–ö–û –ø–æ –æ–±—É—á–∞—é—â–∏–º –¥–∞–Ω–Ω—ã–º
        –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è look-ahead bias
        """
        print("–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫ –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏...")
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä train_split_ratio –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        train_split_ratio = getattr(self.cfg, 'train_split_ratio', 0.8)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 80% –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ—á–∫–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
        split_5min = int(self.df_5min.shape[0] * train_split_ratio)
        split_15min = int(self.df_15min.shape[0] * train_split_ratio)
        split_1h = int(self.df_1h.shape[0] * train_split_ratio)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ—á–∫–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Ç–æ–¥–∞—Ö
        self.train_split_points = {
            '5min': split_5min,
            '15min': split_15min,
            '1h': split_1h
        }
        
        print(f"–ò—Å–ø–æ–ª—å–∑—É—é {train_split_ratio*100:.0f}% –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫ (train split)")
        print(f"–¢–æ—á–∫–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è: 5min={split_5min}, 15min={split_15min}, 1h={split_1h}")
        
        # 1. –°–æ–±–∏—Ä–∞–µ–º —Ü–µ–Ω—ã OHLC –¢–û–õ–¨–ö–û –∏–∑ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        all_prices = np.concatenate([
            self.df_5min[:split_5min, :4].flatten(),
            self.df_15min[:split_15min, :4].flatten(),
            self.df_1h[:split_1h, :4].flatten()
        ]).astype(np.float32)
        
        self.price_mean = np.mean(all_prices)
        self.price_std = np.std(all_prices) + 1e-8

        # 2. –°–æ–±–∏—Ä–∞–µ–º –æ–±—ä–µ–º—ã –¢–û–õ–¨–ö–û –∏–∑ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        all_volumes = np.concatenate([
            self.df_5min[:split_5min, 4].flatten(),
            self.df_15min[:split_15min, 4].flatten(),
            self.df_1h[:split_1h, 4].flatten()
        ]).astype(np.float32)
        
        self.volume_mean = np.mean(all_volumes)
        self.volume_std = np.std(all_volumes) + 1e-8

        # 3. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¢–û–õ–¨–ö–û –∏–∑ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        if self.indicators.size > 0:
            train_indicators = self.indicators[:split_5min]  # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å 5min –¥–∞–Ω–Ω—ã–º–∏
            self.indicator_means = np.mean(train_indicators, axis=0)
            self.indicator_stds = np.std(train_indicators, axis=0) + 1e-8
            self.indicator_stds[self.indicator_stds == 0] = 1e-8
        else:
            self.indicator_means = np.array([])
            self.indicator_stds = np.array([])
        
        print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã (–ë–ï–ó look-ahead bias)")
        print(f"üí∞ Price (train): mean={self.price_mean:.2f}, std={self.price_std:.2f}")
        print(f"üìä Volume (train): mean={self.volume_mean:.2f}, std={self.volume_std:.2f}")

    def _apply_normalization_stats(self, stats: Dict):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏.
        –û–∂–∏–¥–∞–µ–º—ã–µ –∫–ª—é—á–∏: price_mean, price_std, volume_mean, volume_std, indicator_means, indicator_stds
        """
        self.price_mean = float(stats.get('price_mean'))
        self.price_std = float(stats.get('price_std')) + 1e-8
        self.volume_mean = float(stats.get('volume_mean'))
        self.volume_std = float(stats.get('volume_std')) + 1e-8
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å
        im = stats.get('indicator_means')
        istd = stats.get('indicator_stds')
        if im is None or istd is None:
            self.indicator_means = np.array([])
            self.indicator_stds = np.array([])
        else:
            self.indicator_means = np.array(im, dtype=np.float32)
            self.indicator_stds = np.array(istd, dtype=np.float32)
            # –∑–∞—â–∏—Ç–∞ –æ—Ç –Ω—É–ª–µ–≤—ã—Ö std
            self.indicator_stds[self.indicator_stds == 0] = 1e-8

    def export_normalization_stats(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —á–µ–∫–ø–æ–π–Ω—Ç."""
        return {
            'price_mean': float(getattr(self, 'price_mean', 0.0)),
            'price_std': float(getattr(self, 'price_std', 1.0)),
            'volume_mean': float(getattr(self, 'volume_mean', 0.0)),
            'volume_std': float(getattr(self, 'volume_std', 1.0)),
            'indicator_means': (getattr(self, 'indicator_means', np.array([])).astype(float).tolist() if hasattr(self, 'indicator_means') else []),
            'indicator_stds': (getattr(self, 'indicator_stds', np.array([])).astype(float).tolist() if hasattr(self, 'indicator_stds') else []),
        }

    def _precompute_all_states(self):
        """
        –ü—Ä–µ–¥–≤—ã—á–∏—Å–ª—è–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        """
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –≤—Å–µ—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        total_features = []
        
        # 1. 5-–º–∏–Ω—É—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (OHLCV)
        total_features.append(self.df_5min)
        
        # 2. 15-–º–∏–Ω—É—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (OHLCV) - –∏–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ–º –¥–æ 5-–º–∏–Ω—É—Ç–Ω—ã—Ö
        df_15min_interpolated = self._interpolate_15min_to_5min()
        total_features.append(df_15min_interpolated)
        
        # 3. 1-—á–∞—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (OHLCV) - –∏–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ–º –¥–æ 5-–º–∏–Ω—É—Ç–Ω—ã—Ö
        df_1h_interpolated = self._interpolate_1h_to_5min()
        total_features.append(df_1h_interpolated)
        
        # 4. –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (–¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å, –æ–Ω–∏ —É–∂–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç 5-–º–∏–Ω—É—Ç–Ω—ã–º –¥–∞–Ω–Ω—ã–º)
        if self.indicators.size > 0:
            total_features.append(self.indicators)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        X = np.concatenate(total_features, axis=1).astype(np.float32)
        
        print(f"üîç –†–∞–∑–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–µ–¥–≤—ã—á–∏—Å–ª–µ–Ω–∏—è:")
        print(f"  ‚Ä¢ df_5min: {self.df_5min.shape}")
        print(f"  ‚Ä¢ df_15min: {self.df_15min.shape}")
        print(f"  ‚Ä¢ df_1h: {self.df_1h.shape}")
        print(f"  ‚Ä¢ indicators: {self.indicators.shape if self.indicators.size > 0 else '–ø—É—Å—Ç–æ–π'}")
        print(f"  ‚Ä¢ –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π X: {X.shape}")
        print(f"  ‚Ä¢ indicator_means: {self.indicator_means.shape if len(self.indicator_means) > 0 else '–ø—É—Å—Ç–æ–π'}")
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
        X_normalized = self._normalize_features(X)
        
        # –°–æ–∑–¥–∞–µ–º —Å–∫–æ–ª—å–∑—è—â–∏–µ –æ–∫–Ω–∞
        W = self.lookback_window
        if len(X_normalized) >= W:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º sliding_window_view –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            sw = np.lib.stride_tricks.sliding_window_view(X_normalized, (W, X_normalized.shape[1]))[:, 0]
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ [T-W+1, W*features]
            self.precomputed_states = sw.reshape(sw.shape[0], -1).astype(np.float32)
        else:
            # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–Ω—å—à–µ –æ–∫–Ω–∞, —Å–æ–∑–¥–∞–µ–º –Ω—É–ª–µ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            self.precomputed_states = np.zeros((1, self.observation_space_shape), dtype=np.float32)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ torch —Ç–µ–Ω–∑–æ—Ä –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        self.states_tensor = torch.from_numpy(self.precomputed_states)
        
        print(f"üìä –ü—Ä–µ–¥–≤—ã—á–∏—Å–ª–µ–Ω–æ {len(self.precomputed_states)} —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–∞–∑–º–µ—Ä–æ–º {self.precomputed_states.shape[1]}")
        print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤:")
        print(f"  ‚Ä¢ precomputed_states.shape: {self.precomputed_states.shape}")
        print(f"  ‚Ä¢ observation_space_shape: {self.observation_space_shape}")
        print(f"  ‚Ä¢ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: {'‚úÖ' if self.precomputed_states.shape[1] == self.observation_space_shape - 2 else '‚ùå'}")
        
        # –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º
        if self.precomputed_states.shape[1] != self.observation_space_shape - 2:
            print(f"‚ö†Ô∏è –ò—Å–ø—Ä–∞–≤–ª—è—é —Ä–∞–∑–º–µ—Ä observation_space_shape")
            self.observation_space_shape = self.precomputed_states.shape[1] + 2
            print(f"  ‚Ä¢ –ù–æ–≤—ã–π observation_space_shape: {self.observation_space_shape}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º observation_space
            self.observation_space = spaces.Box(low=-np.inf, high=np.inf, 
                                                shape=(self.observation_space_shape,), 
                                                dtype=np.float32)

    def _interpolate_15min_to_5min(self):
        """
        –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ—Ç 15-–º–∏–Ω—É—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ 5-–º–∏–Ω—É—Ç–Ω—ã—Ö
        """
        if len(self.df_15min) == 0:
            return np.zeros((len(self.df_5min), 5), dtype=np.float32)
        
        # –ö–∞–∂–¥—ã–µ 3 –ø—è—Ç–∏–º–∏–Ω—É—Ç–∫–∏ = 1 –ø—è—Ç–Ω–∞–¥—Ü–∞—Ç–∏–º–∏–Ω—É—Ç–∫–∞
        interpolated = np.zeros((len(self.df_5min), 5), dtype=np.float32)
        
        for i in range(len(self.df_5min)):
            # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é 15-–º–∏–Ω—É—Ç–Ω—É—é —Å–≤–µ—á—É
            idx_15min = i // 3
            if idx_15min < len(self.df_15min):
                interpolated[i] = self.df_15min[idx_15min]
            else:
                # –ï—Å–ª–∏ –≤—ã—Ö–æ–¥–∏–º –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–æ—Å—Ç—É–ø–Ω—É—é
                interpolated[i] = self.df_15min[-1] if len(self.df_15min) > 0 else 0
        
        return interpolated

    def _interpolate_1h_to_5min(self):
        """
        –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ—Ç 1-—á–∞—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ 5-–º–∏–Ω—É—Ç–Ω—ã—Ö
        """
        if len(self.df_1h) == 0:
            return np.zeros((len(self.df_5min), 5), dtype=np.float32)
        
        # –ö–∞–∂–¥—ã–µ 12 –ø—è—Ç–∏–º–∏–Ω—É—Ç–æ–∫ = 1 —á–∞—Å
        interpolated = np.zeros((len(self.df_5min), 5), dtype=np.float32)
        
        for i in range(len(self.df_5min)):
            # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é 1-—á–∞—Å–æ–≤—É—é —Å–≤–µ—á—É
            idx_1h = i // 12
            if idx_1h < len(self.df_1h):
                interpolated[i] = self.df_1h[idx_1h]
            else:
                # –ï—Å–ª–∏ –≤—ã—Ö–æ–¥–∏–º –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–æ—Å—Ç—É–ø–Ω—É—é
                interpolated[i] = self.df_1h[-1] if len(self.df_1h) > 0 else 0
        
        return interpolated

    def _normalize_features(self, X):
        """
        –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–µ–¥–≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        """
        normalized = X.copy()
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ü–µ–Ω (–ø–µ—Ä–≤—ã–µ 4 –∫–æ–ª–æ–Ω–∫–∏ –∫–∞–∂–¥–æ–≥–æ –±–ª–æ–∫–∞ OHLCV)
        price_cols = []
        for i in range(0, X.shape[1], 5):
            if i + 4 <= X.shape[1]:
                price_cols.extend(range(i, i + 4))
        
        if price_cols:
            normalized[:, price_cols] = (X[:, price_cols] - self.price_mean) / self.price_std
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–º–æ–≤ (5-—è –∫–æ–ª–æ–Ω–∫–∞ –∫–∞–∂–¥–æ–≥–æ –±–ª–æ–∫–∞ OHLCV)
        volume_cols = list(range(4, X.shape[1], 5))
        if volume_cols:
            normalized[:, volume_cols] = (X[:, volume_cols] - self.volume_mean) / self.volume_std
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if self.indicators.size > 0:
            # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –ø–æ—Å–ª–µ –≤—Å–µ—Ö OHLCV –¥–∞–Ω–Ω—ã—Ö
            # –£ –Ω–∞—Å 3 –±–ª–æ–∫–∞ OHLCV (5min, 15min, 1h) –ø–æ 5 –∫–æ–ª–æ–Ω–æ–∫ –∫–∞–∂–¥—ã–π = 15 –∫–æ–ª–æ–Ω–æ–∫
            indicator_start = 15  # 3 * 5 = 15 –∫–æ–ª–æ–Ω–æ–∫ OHLCV
            if indicator_start < X.shape[1]:
                indicator_cols = range(indicator_start, X.shape[1])
                print(f"üîç –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤:")
                print(f"  ‚Ä¢ indicator_start: {indicator_start}")
                print(f"  ‚Ä¢ indicator_cols: {len(indicator_cols)} –∫–æ–ª–æ–Ω–æ–∫")
                print(f"  ‚Ä¢ indicator_means: {len(self.indicator_means)} –∑–Ω–∞—á–µ–Ω–∏–π")
                print(f"  ‚Ä¢ X.shape: {X.shape}")
                # –í–∫–ª—é—á–∞–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
                if hasattr(self, 'indicator_stds') and self.indicator_stds is not None:
                    normalized[:, indicator_cols] = (X[:, indicator_cols] - self.indicator_means) / np.where(self.indicator_stds==0, 1.0, self.indicator_stds)
        
        # –û—á–∏—â–∞–µ–º –æ—Ç NaN
        normalized = np.nan_to_num(normalized, nan=0.0)
        
        return normalized

    def _get_state(self) -> np.ndarray:
        """
        –£–õ–¨–¢–†–ê-–ë–´–°–¢–†–ê–Ø –≤–µ—Ä—Å–∏—è _get_state —Å –ø—Ä–µ–¥–≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–º–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
        """
        current_5min_candle_idx = self.current_step - 1 
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
        if current_5min_candle_idx < self.lookback_window - 1 or current_5min_candle_idx >= len(self.precomputed_states):
            return np.zeros(self.observation_space_shape, dtype=np.float32)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–≤—ã—á–∏—Å–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        state_idx = current_5min_candle_idx - (self.lookback_window - 1)
        if state_idx < 0 or state_idx >= len(self.precomputed_states):
            return np.zeros(self.observation_space_shape, dtype=np.float32)
        
        # –ë–µ—Ä–µ–º –ø—Ä–µ–¥–≤—ã—á–∏—Å–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        precomputed_state = self.precomputed_states[state_idx].copy()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –±–∞–ª–∞–Ω—Å –∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É
        try:
            normalized_balance = self.balance_scaler.transform(np.array([[self.balance]]))[0][0]
            normalized_crypto_held = self.crypto_held_scaler.transform(np.array([[self.crypto_held]]))[0][0]
        except Exception:
            normalized_balance = 0.0
            normalized_crypto_held = 0.0
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –≤ –∫–æ–Ω–µ—Ü —Å–æ—Å—Ç–æ—è–Ω–∏—è
        final_state = np.concatenate([
            precomputed_state,
            np.array([normalized_balance, normalized_crypto_held], dtype=np.float32)
        ])
        
        return final_state

    def get_state_tensor(self, step_idx: int) -> torch.Tensor:
        """
        –£–õ–¨–¢–†–ê-–ë–´–°–¢–†–´–ô –¥–æ—Å—Ç—É–ø –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é —á–µ—Ä–µ–∑ torch —Ç–µ–Ω–∑–æ—Ä
        """
        current_5min_candle_idx = step_idx - 1 
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
        if current_5min_candle_idx < self.lookback_window - 1 or current_5min_candle_idx >= len(self.states_tensor):
            return torch.zeros(self.observation_space_shape, dtype=torch.float32)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–≤—ã—á–∏—Å–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        state_idx = current_5min_candle_idx - (self.lookback_window - 1)
        if state_idx < 0 or state_idx >= len(self.states_tensor):
            return torch.zeros(self.observation_space_shape, dtype=torch.float32)
        
        # –ë–µ—Ä–µ–º –ø—Ä–µ–¥–≤—ã—á–∏—Å–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ —Ç–µ–Ω–∑–æ—Ä–∞
        precomputed_state = self.states_tensor[state_idx].clone()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –±–∞–ª–∞–Ω—Å –∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É
        try:
            normalized_balance = self.balance_scaler.transform(np.array([[self.balance]]))[0][0]
            normalized_crypto_held = self.crypto_held_scaler.transform(np.array([[self.crypto_held]]))[0][0]
        except Exception:
            normalized_balance = 0.0
            normalized_crypto_held = 0.0
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –≤ –∫–æ–Ω–µ—Ü —Å–æ—Å—Ç–æ—è–Ω–∏—è
        final_state = torch.cat([
            precomputed_state,
            torch.tensor([normalized_balance, normalized_crypto_held], dtype=torch.float32)
        ])
        
        return final_state

    def reset(self):
        """
        –°–±—Ä–æ—Å –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ —ç–ø–∏–∑–æ–¥–∞
        """
        self._episode_idx += 1
        self._can_log = (self._episode_idx % self._log_interval == 0)
        
        # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
        initial_balance = getattr(self.cfg, 'initial_balance', 10000.0)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 10000
        self.balance = initial_balance
        self.crypto_held = 0.0
        self.fee_entry = 0.0  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º fee_entry
        self.last_buy_price = None
        self.last_buy_step = None
        self.trailing_stop_counter = 0
        self.max_price_during_hold = None
        self.balance_history = [self.balance]
        
        # –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –ù–ï –æ—á–∏—â–∞–µ–º —Å–¥–µ–ª–∫–∏ –º–µ–∂–¥—É —ç–ø–∏–∑–æ–¥–∞–º–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ winrate
        # self.trades = []  # –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û
        if not hasattr(self, 'all_trades'):
            self.all_trades = []  # –°–æ–∑–¥–∞–µ–º –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ —Å–¥–µ–ª–æ–∫ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç

        
        # –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫
        self.vol_buf.clear()
        self.roi_buf.clear()
        self.buy_attempts = 0
        self.buy_rejected_vol = 0
        self.buy_rejected_roi = 0
        
        # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π
        self.action_counts = {0: 0, 1: 0, 2: 0}
        
        # –í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–π –Ω–∞—á–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏ —Å —É—á–µ—Ç–æ–º –¥–ª–∏–Ω—ã —ç–ø–∏–∑–æ–¥–∞
        if self._can_log:
            print(f"üåÄ episode_length = {self.episode_length} —à–∞–≥–æ–≤ (‚âà {self.episode_length*5/60:.1f} —á–∞—Å–æ–≤)")
        max_start = self.total_steps - self.episode_length
        min_start = self.min_valid_start_step
        
        if max_start <= min_start:
            self.start_step = min_start
        else:
            self.start_step = random.randint(min_start, max_start)
        
        self.current_step = self.start_step
        
        # –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —ç–ø–∏–∑–æ–¥–∞
        self.episode_start_time = time.time()
        self.episode_step_count = 0
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–¥–≤—ã—á–∏—Å–ª–µ–Ω–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
        return self._get_state()

    def step(self, action):
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏
        """
        # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã
        reward_scale = float(getattr(self.cfg, 'reward_scale', 1.0))
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
        current_price = self.df_5min[self.current_step - 1, 3]  # Close price
        
        # –ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞
        reward = 0.0
        done = False
        info = {}
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        self.action_counts[action] += 1
        self.episode_step_count += 1
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        if action == 1:  # BUY
            if self.crypto_held == 0:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –¥–µ—Ä–∂–∏–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
                if self._check_buy_filters():
                    # –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–ô —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                    entry_confidence = self._calculate_entry_confidence()
                    
                    # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: –≤—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å = –±–æ–ª—å—à–∞—è –ø–æ–∑–∏—Ü–∏—è
                    if entry_confidence > self.position_confidence_threshold:
                        # –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
                        self.position_fraction = min(self.base_position_fraction * 1.5, 0.5)  # –ú–∞–∫—Å–∏–º—É–º 50%
                        if self._can_log:
                            print(f"üéØ –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å ({entry_confidence:.2f}): —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–æ {self.position_fraction:.1%}")
                    elif entry_confidence > 0.5:
                        # –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
                        self.position_fraction = self.base_position_fraction
                    else:
                        # –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å - —É–º–µ–Ω—å—à–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
                        self.position_fraction = max(self.base_position_fraction * 0.7, 0.15)  # –ú–∏–Ω–∏–º—É–º 15%
                        if self._can_log:
                            print(f"üéØ –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å ({entry_confidence:.2f}): —É–º–µ–Ω—å—à–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–æ {self.position_fraction:.1%}")
                    
                    # –ü–æ–∫—É–ø–∞–µ–º —Å —É—á—ë—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏
                    buy_amount = self.balance * self.position_fraction
                    self.fee_entry = buy_amount * self.trade_fee_percent
                    crypto_to_buy = (buy_amount - self.fee_entry) / current_price
                    self.crypto_held = crypto_to_buy
                    self.balance -= buy_amount  # —Å–ø–∏—Å—ã–≤–∞–µ–º –≤—Å—é —Å—É–º–º—É, –∫–æ–º–∏—Å—Å–∏—è —É—á—Ç–µ–Ω–∞ –≤ –∫—É–ø–ª–µ–Ω–Ω–æ–π –∫—Ä–∏–ø—Ç–µ
                    reward -= self.fee_entry / max(self.balance, 1e-9)  # –º–µ–ª–∫–∏–π —à—Ç—Ä–∞—Ñ –∑–∞ –∫–æ–º–∏—Å—Å–∏—é
                    self.last_buy_price = current_price
                    self.last_buy_step = self.current_step
                    
                    # –ù–∞–≥—Ä–∞–¥–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤—Ö–æ–¥–∞
                    base_reward = 0.03
                    confidence_bonus = entry_confidence * 0.02  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ –≤—ã—Å–æ–∫—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
                    reward = base_reward + confidence_bonus
                    
                    if self._can_log:
                        print(f"üîµ BUY: {crypto_to_buy:.4f} at {current_price:.2f}, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {entry_confidence:.2f}, –Ω–∞–≥—Ä–∞–¥–∞: {reward:.4f}")
                else:
                    reward = -0.002  # –£–º–µ–Ω—å—à–∏–ª —à—Ç—Ä–∞—Ñ –∑–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
            else:
                reward = -0.01  # –£–º–µ–Ω—å—à–∏–ª —à—Ç—Ä–∞—Ñ –∑–∞ –ø–æ–ø—ã—Ç–∫—É –∫—É–ø–∏—Ç—å –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –ø–æ–∑–∏—Ü–∏–∏
                
        elif action == 2:  # SELL
            if self.crypto_held > 0:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–µ—Ä–∂–∏–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è
                if hasattr(self, 'last_buy_step') and self.last_buy_step is not None:
                    hold_time = self.current_step - self.last_buy_step
                    if hold_time < self.min_hold_steps:
                        # –®—Ç—Ä–∞—Ñ –∑–∞ —Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–Ω—é—é –ø—Ä–æ–¥–∞–∂—É
                        reward = -0.02
                        #self._log(f"[{self.current_step}] ‚ö†Ô∏è –°–ª–∏—à–∫–æ–º —Ä–∞–Ω–Ω—è—è –ø—Ä–æ–¥–∞–∂–∞: {hold_time} —à–∞–≥–æ–≤ < {self.min_hold_steps}")
                        # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –Ω–∞–≥—Ä–∞–¥—É –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º
                        reward = reward * reward_scale
                        return self._get_state(), reward, False, {}
                
                # –ü—Ä–æ–¥–∞–µ–º
                sell_amount = self.crypto_held * current_price
                fee_exit = sell_amount * self.trade_fee_percent
                self.balance += (sell_amount - fee_exit)
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫
                pnl = ((current_price - self.last_buy_price) / self.last_buy_price) - (self.fee_entry + fee_exit)/max(self.last_buy_price * self.crypto_held,1e-9)
                net_profit_loss = sell_amount - (self.crypto_held * self.last_buy_price)
                
                # –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –ø—Ä–æ–¥–∞–∂—É (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ)
                reward += np.tanh(pnl * 25) * 2  # –ó–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–¥–µ–ª–∫–∏
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –∫–∞—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–∫–∏ (–£–õ–£–ß–®–ï–ù–û)
                if pnl > 0.05:  # –ü—Ä–∏–±—ã–ª—å > 5%
                    reward += 0.5  # –£–≤–µ–ª–∏—á–∏–ª —Å 0.3 –¥–æ 0.5 –¥–ª—è –±–æ–ª—å—à–∏—Ö –ø—Ä–∏–±—ã–ª–µ–π
                elif pnl > 0.02:  # –ü—Ä–∏–±—ã–ª—å > 2%
                    reward += 0.2  # –ù–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ —Å—Ä–µ–¥–Ω—é—é –ø—Ä–∏–±—ã–ª—å
                elif pnl < -0.03:  # –£–±—ã—Ç–æ–∫ > 3%
                    reward -= 0.005  # –£–º–µ–Ω—å—à–∏–ª —à—Ç—Ä–∞—Ñ —Å -0.01 –¥–æ -0.005
                elif pnl < -0.01:  # –£–±—ã—Ç–æ–∫ > 1%
                    reward -= 0.001  # –ù–µ–±–æ–ª—å—à–æ–π —à—Ç—Ä–∞—Ñ –∑–∞ –º–∞–ª—ã–µ —É–±—ã—Ç–∫–∏
                
                # –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–¥–µ–ª–∫—É –≤ –æ–±–∞ —Å–ø–∏—Å–∫–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ winrate
                trade_data = {
                    "roi": pnl,
                    "net": net_profit_loss,
                    "reward": reward,
                    "duration": (self.current_step - self.last_buy_step) * 5 if self.last_buy_step else 0
                }
                self.trades.append(trade_data)
                
                # –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ —Å–¥–µ–ª–æ–∫
                if not hasattr(self, 'all_trades'):
                    self.all_trades = []                    
                self.all_trades.append(trade_data)
                                
                
                self.crypto_held = 0
                self.last_buy_price = None
                self.last_buy_step = None
                self.trailing_stop_counter = 0
                self.max_price_during_hold = None
                
                #self._log(f"[{self.current_step}] üî¥ SELL: {sell_amount:.2f}, PnL: {pnl:.2%}")
            else:
                reward = -0.01  # –£–º–µ–Ω—å—à–∏–ª —à—Ç—Ä–∞—Ñ –∑–∞ –ø–æ–ø—ã—Ç–∫—É –ø—Ä–æ–¥–∞—Ç—å –±–µ–∑ –ø–æ–∑–∏—Ü–∏–∏
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –≤ n-step buffer —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ terminal
        if not done:
            transition = {
                'state': self._get_state(),
                'action': action,
                'reward': reward,
                'next_state': None,  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–∑–∂–µ
                'done': done
            }
            self.n_step_buffer.append(transition)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ HOLD –¥–µ–π—Å—Ç–≤–∏—è (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ)
        if action == 0:
            if self.crypto_held > 0 and self.last_buy_price is not None:
                # –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–µ —É–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
                if hasattr(self, 'last_buy_step') and self.last_buy_step is not None:
                    hold_time = self.current_step - self.last_buy_step
                    if hold_time >= self.min_hold_steps * 2:  # –î–≤–æ–π–Ω–æ–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
                        reward += 0.001  # –ù–µ–±–æ–ª—å—à–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ —Ç–µ—Ä–ø–µ–Ω–∏–µ
                        if self.current_step % 100 == 0:
                            self._log(f"[{self.current_step}] üïê –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —Ç–µ—Ä–ø–µ–Ω–∏–µ: {hold_time} —à–∞–≥–æ–≤")
                # --- –¢—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ) ---
                if self.epsilon <= 0.2:  # —Ñ–∞–∑–∞ exploitation
                    # 1. –æ–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º—É–º
                    if (not hasattr(self, "max_price_during_hold") 
                        or self.max_price_during_hold is None 
                        or self.last_buy_step == self.current_step):
                        self.max_price_during_hold = current_price
                    
                    if current_price > self.max_price_during_hold:  # –Ω–æ–≤—ã–π –ø–∏–∫
                        self.max_price_during_hold = current_price
                        self.trailing_stop_counter = 0
                    
                    # 2. —Å—á–∏—Ç–∞–µ–º –ø—Ä–æ—Å–∞–¥–∫—É –æ—Ç –ø–∏–∫–∞
                    drawdown = (self.max_price_during_hold - current_price) / self.max_price_during_hold
                    if drawdown > 0.02:
                        self.trailing_stop_counter += 1
                    
                    # 3. —Ç—Ä–∏ –ø–æ–¥—Ä—è–¥ –±–∞—Ä–∞ —Å drawdown > 2% ‚Üí –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π SELL
                    # –ù–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –¥–µ—Ä–∂–∏—Ç—Å—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ–ª–≥–æ
                    if (self.trailing_stop_counter >= 3 and 
                        hasattr(self, 'last_buy_step') and 
                        self.last_buy_step is not None and
                        (self.current_step - self.last_buy_step) >= self.min_hold_steps):
                        
                        reward -= 0.03
                        self._log(f"[{self.current_step}] üîª TRAILING STOP ‚Äî SELL by drawdown: {drawdown:.2%}")
                        self._force_sell(current_price, 'TRAILING STOP')
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                        self._update_stats(current_price)
                        self.current_step += 1
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —ç–ø–∏–∑–æ–¥–∞
                        done = (
                            self.current_step >= self.start_step + self.episode_length or
                            self.current_step >= self.total_steps
                        )
                        
                        info.update({
                            "current_balance": self.balance,
                            "current_price": current_price,
                            "total_profit": (self.balance + self.crypto_held * current_price) - getattr(self.cfg, 'initial_balance', 10000.0),
                        })
                        # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –Ω–∞–≥—Ä–∞–¥—É –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º
                        reward = reward * reward_scale
                        info["reward"] = reward
                        return self._get_state(), reward, done, info
                
                # --- Take Profit / Stop Loss (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ) ---
                unrealized_pnl_percent = (current_price - self.last_buy_price) / self.last_buy_price
                
                if unrealized_pnl_percent <= self.STOP_LOSS_PCT:
                    reward -= 0.05  # —à—Ç—Ä–∞—Ñ –∑–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å
                    self._force_sell(current_price, "‚ùå - STOP-LOSS triggered")
                    
                elif unrealized_pnl_percent >= self.TAKE_PROFIT_PCT:
                    reward += 0.05  # –ø–æ–æ—â—Ä–µ–Ω–∏–µ –∑–∞ —Ñ–∏–∫—Å–∞—Ü–∏—é –ø—Ä–æ—Ñ–∏—Ç–∞
                    self._force_sell(current_price, "üéØ - TAKE-PROFIT hit")
                
                # --- –ù–∞–≥—Ä–∞–¥—ã –∑–∞ —É–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ (–£–õ–£–ß–®–ï–ù–û) ---
                if unrealized_pnl_percent > 0:
                    # –ß–µ–º –≤—ã—à–µ –Ω–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–∏–±—ã–ª—å, —Ç–µ–º –±–æ–ª—å—à–µ –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ —É–¥–µ—Ä–∂–∞–Ω–∏–µ
                    reward += unrealized_pnl_percent * 3  # –£–≤–µ–ª–∏—á–∏–ª —Å 2 –¥–æ 3 –¥–ª—è –ª—É—á—à–µ–≥–æ —É–¥–µ—Ä–∂–∞–Ω–∏—è –ø—Ä–∏–±—ã–ª–∏
                else:
                    # –ß–µ–º –±–æ–ª—å—à–µ –Ω–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —É–±—ã—Ç–æ–∫, —Ç–µ–º –±–æ–ª—å—à–µ —à—Ç—Ä–∞—Ñ –∑–∞ —É–¥–µ—Ä–∂–∞–Ω–∏–µ
                    reward += unrealized_pnl_percent * 2  # –£–º–µ–Ω—å—à–∏–ª —Å 3 –¥–æ 2 –¥–ª—è –º–µ–Ω—å—à–µ–≥–æ –¥–∞–≤–ª–µ–Ω–∏—è
            else:
                # –ï—Å–ª–∏ action == HOLD –∏ –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏
                reward = 0.001  # –ù–µ–±–æ–ª—å—à–æ–µ –ø–æ–æ—â—Ä–µ–Ω–∏–µ –∑–∞ —Ä–∞–∑—É–º–Ω–æ–µ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏–µ –≤–º–µ—Å—Ç–æ —à—Ç—Ä–∞—Ñ–∞
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self._update_stats(current_price)
        
        # –ê–î–ê–ü–¢–ò–í–ù–´–ï –ù–ê–ì–†–ê–î–´ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
        if action != 0:  # –ï—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ HOLD
            base_activity_reward = 0.001
            
            # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –Ω–∞–≥—Ä–∞–¥—É –∫ –≤—Ä–µ–º–µ–Ω–∏ –¥–Ω—è (–ù–ï –±–ª–æ–∫–∏—Ä—É–µ–º, –∞ –æ–±—É—á–∞–µ–º)
            if hasattr(self, '_candle_datetimes') and self.current_step - 1 < len(self._candle_datetimes):
                current_hour = self._candle_datetimes[self.current_step - 1].hour
                
                if 6 <= current_hour <= 22:
                    # –ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Å—ã - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞
                    reward += base_activity_reward
                else:
                    # –ù–∏–∑–∫–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å - –ø–æ–≤—ã—à–µ–Ω–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ —Å–º–µ–ª–æ—Å—Ç—å
                    # –ê–≥–µ–Ω—Ç —É—á–∏—Ç—Å—è —Ç–æ—Ä–≥–æ–≤–∞—Ç—å –≤ —Å–ª–æ–∂–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö
                    reward += base_activity_reward * 1.5
                    
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Ä–µ–º–µ–Ω–∏ - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞
                reward += base_activity_reward
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        self.current_step += 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —ç–ø–∏–∑–æ–¥–∞
        episode_length = getattr(self.cfg, 'episode_length')
        
        done = (
            self.current_step >= self.start_step + episode_length or  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —ç–ø–∏–∑–æ–¥–∞
            self.current_step >= self.total_steps
        )
        
        if done:
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–¥–∞–µ–º –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏—è
            if self.crypto_held > 0:
                final_price = self.df_5min[self.current_step - 1, 3]
                final_sell_amount = self.crypto_held * final_price
                self.balance += final_sell_amount
                pnl = (final_price - self.last_buy_price) / self.last_buy_price
                net_profit_loss = final_sell_amount - (self.crypto_held * self.last_buy_price)
                
                trade_data = {
                    "roi": pnl,
                    "net": net_profit_loss,
                    "reward": 0,
                    "duration": (self.current_step - self.last_buy_step) * 5 if self.last_buy_step else 0
                }
                self.trades.append(trade_data)
                if self._can_log:
                    print(f"    üìù –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–¥–µ–ª–∫–∞: ROI={pnl:.4f}, –ø—Ä–∏–±—ã–ª—å={trade_data['roi'] > 0}, –≤—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫={len(self.trades)}")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —ç–ø–∏–∑–æ–¥–∞ (—Ç–µ–ø–µ—Ä—å –≤—ã–≤–æ–¥–∏—Ç—Å—è –≤ train_model_optimized.py)
            # if self.episode_start_time is not None:
            #     episode_duration = time.time() - self.episode_start_time
            #     steps_per_second = self.episode_step_count / episode_duration if episode_duration > 0 else 0
            #     print(f"‚è±Ô∏è –≠–ø–∏–∑–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω: {episode_duration:.2f}—Å, {self.episode_step_count} —à–∞–≥–æ–≤, {steps_per_second:.1f} —à–∞–≥/—Å")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        initial_balance = getattr(self.cfg, 'initial_balance', 10000.0)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 10000
        info.update({
            "current_balance": self.balance,
            "current_price": current_price,
            "total_profit": (self.balance + self.crypto_held * current_price) - initial_balance,
            "reward": reward
        })
        self.balance_history.append(self.balance + self.crypto_held * current_price)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º next_state –¥–ª—è –≤—Å–µ—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –≤ n-step buffer
        for transition in self.n_step_buffer:
            if transition['next_state'] is None:
                transition['next_state'] = self._get_state()
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è        
        # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –Ω–∞–≥—Ä–∞–¥—É –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º
        reward = reward * reward_scale
        info["reward"] = reward
        return self._get_state(), reward, done, info

    def _check_buy_filters(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏ (–£–õ–£–ß–®–ï–ù–û)
        """
        self.buy_attempts += 1
        
        # –ê–î–ê–ü–¢–ò–í–ù–ê–Ø –°–¢–†–û–ì–û–°–¢–¨ –§–ò–õ–¨–¢–†–û–í –ü–û –≠–ü–°–ò–õ–û–ù–£
        # eps > 0.8 ‚Üí —Å–≤–æ–±–æ–¥–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ (–ø–æ—á—Ç–∏ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤)
        # eps 0.8..0.2 ‚Üí –ø–ª–∞–≤–Ω–æ–µ —É–∂–µ—Å—Ç–æ—á–µ–Ω–∏–µ
        # eps <= 0.2 ‚Üí —Å—Ç—Ä–æ–≥–∏–µ –ø–æ—Ä–æ–≥–∏
        eps = 1.0
        try:
            eps = float(getattr(self, 'epsilon', 1.0))
        except Exception:
            eps = 1.0
        
        if eps > 0.8:
            return True
        # –°—Ç–µ–ø–µ–Ω—å —Å—Ç—Ä–æ–≥–æ—Å—Ç–∏ [0..1]
        strictness = np.clip((0.8 - eps) / (0.8 - 0.2), 0.0, 1.0)
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ä–µ–º–∞ - –ê–î–ê–ü–¢–ò–í–ù–´–ô –ø–æ—Ä–æ–≥
        current_volume = self.df_5min[self.current_step - 1, 4]
        vol_relative = calc_relative_vol_numpy(self.df_5min, self.current_step - 1, 12)
        
        # –ü–æ—Ä–æ–≥ –æ–±—ä–µ–º–∞: –æ—Ç –º—è–≥–∫–æ–≥–æ 0.0010 –∫ —Å—Ç—Ä–æ–≥–æ–º—É 0.0030 (–∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É, –µ—Å–ª–∏ –≤—ã—à–µ)
        cfg_thr = float(getattr(self, 'volume_threshold', 0.0005))
        base_lenient_vol = max(cfg_thr, 0.0010)
        base_strict_vol  = max(cfg_thr, 0.0030)
        vol_thr = base_lenient_vol + strictness * (base_strict_vol - base_lenient_vol)
        if vol_relative < vol_thr:
            self.buy_rejected_vol += 1
            if self.current_step % 100 == 0:
                print(f"üîç –§–∏–ª—å—Ç—Ä –æ–±—ä–µ–º–∞: vol_relative={vol_relative:.4f} < {vol_thr:.4f}, –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")
            return False
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ ROI - –£–õ–£–ß–®–ï–ù–û: –ë–æ–ª–µ–µ —É–º–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
        if len(self.roi_buf) > 0:
            recent_roi_mean = np.mean(list(self.roi_buf))
            # –ü–æ—Ä–æ–≥ –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É ROI: –æ—Ç -6% (–º—è–≥–∫–æ) –∫ -1% (—Å—Ç—Ä–æ–≥–æ)
            roi_thr = -0.06 + strictness * ( -0.01 + 0.06 )  # -0.06 ‚Üí -0.01
            if recent_roi_mean < roi_thr:
                self.buy_rejected_roi += 1
                if self.current_step % 100 == 0:
                    print(f"üîç –§–∏–ª—å—Ç—Ä ROI: recent_roi_mean={recent_roi_mean:.4f} < {roi_thr:.4f}, –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")
                return False
        
        # 3. –ù–û–í–´–ô: –§–∏–ª—å—Ç—Ä –ø–æ —Ç—Ä–µ–Ω–¥—É —Ü–µ–Ω—ã
        if self.current_step >= 20:
            recent_prices = self.df_5min[self.current_step-20:self.current_step, 3]  # Close prices
            price_trend = (recent_prices[-1] - recent_prices[0]) / recent_prices[0]
            # –ü–æ—Ä–æ–≥ —Ç—Ä–µ–Ω–¥–∞: –æ—Ç -2.0% (–º—è–≥–∫–æ) –∫ -0.5% (—Å—Ç—Ä–æ–≥–æ)
            trend_thr = -0.02 + strictness * ( -0.005 + 0.02 )  # -0.02 ‚Üí -0.005
            if price_trend < trend_thr:
                if self.current_step % 100 == 0:
                    print(f"üîç –§–∏–ª—å—Ç—Ä —Ç—Ä–µ–Ω–¥–∞: price_trend={price_trend:.4f} < {trend_thr:.4f}, –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")
                return False
        
        # 4. –ù–û–í–´–ô: –§–∏–ª—å—Ç—Ä –ø–æ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        if self.current_step >= 12:
            recent_highs = self.df_5min[self.current_step-12:self.current_step, 1]  # High prices
            recent_lows = self.df_5min[self.current_step-12:self.current_step, 2]   # Low prices
            volatility = np.mean((recent_highs - recent_lows) / recent_lows)
            # –ü–æ—Ä–æ–≥ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏: –æ—Ç 0.002 (–º—è–≥–∫–æ) –∫ 0.0045 (—Å—Ç—Ä–æ–≥–æ)
            volat_thr = 0.002 + strictness * (0.0045 - 0.002)
            if volatility < volat_thr:
                if self.current_step % 100 == 0:
                    print(f"üîç –§–∏–ª—å—Ç—Ä –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏: volatility={volatility:.4f} < {volat_thr:.4f}, –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")
                return False
        
        # 5. –ù–û–í–´–ô: –§–∏–ª—å—Ç—Ä –ø–æ —Å–∏–ª–µ —Ç—Ä–µ–Ω–¥–∞ (ADX-–ø–æ–¥–æ–±–Ω—ã–π)
        if self.current_step >= 20:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∏–ª—É —Ç—Ä–µ–Ω–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
            recent_prices = self.df_5min[self.current_step-20:self.current_step, 3]  # Close prices
            price_changes = np.diff(recent_prices)
            trend_strength = np.abs(np.mean(price_changes)) / (np.std(price_changes) + 1e-8)
            # –ü–æ—Ä–æ–≥ —Å–∏–ª—ã —Ç—Ä–µ–Ω–¥–∞: –æ—Ç 0.15 (–º—è–≥–∫–æ) –∫ 0.35 (—Å—Ç—Ä–æ–≥–æ)
            ts_thr = 0.15 + strictness * (0.35 - 0.15)
            if trend_strength < ts_thr:
                if self.current_step % 100 == 0:
                    print(f"üîç –§–∏–ª—å—Ç—Ä —Ç—Ä–µ–Ω–¥–∞: trend_strength={trend_strength:.4f} < {ts_thr:.4f}, –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")
                return False
        
        # –í—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø—Ä–æ–π–¥–µ–Ω—ã - —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø–æ–∫—É–ø–∫—É
        return True
    
    def _calculate_entry_confidence(self) -> float:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–∞ –≤ –ø–æ–∑–∏—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤
        """
        confidence = 0.0
        
        try:
            # 1. –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø–æ –æ–±—ä–µ–º—É (0-25%)
            if self.current_step >= 12:
                vol_relative = calc_relative_vol_numpy(self.df_5min, self.current_step - 1, 12)
                vol_confidence = min(vol_relative / (self.volume_threshold * 2), 1.0) * 0.25
                confidence += vol_confidence
            
            # 2. –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø–æ —Ç—Ä–µ–Ω–¥—É (0-25%)
            if self.current_step >= 20:
                recent_prices = self.df_5min[self.current_step-20:self.current_step, 3]
                price_changes = np.diff(recent_prices)
                trend_strength = np.abs(np.mean(price_changes)) / (np.std(price_changes) + 1e-8)
                trend_confidence = min(trend_strength / 0.5, 1.0) * 0.25
                confidence += trend_confidence
            
            # 3. –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–º—É ROI (0-25%)
            if len(self.roi_buf) >= 10:
                recent_roi_mean = np.mean(list(self.roi_buf)[-10:])
                roi_confidence = max(0, (recent_roi_mean + 0.1) / 0.2) * 0.25  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ—Ç -10% –¥–æ +10%
                confidence += roi_confidence
            
            # 4. –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–Ω—è (0-25%)
            if hasattr(self, '_candle_datetimes') and self.current_step - 1 < len(self._candle_datetimes):
                current_hour = self._candle_datetimes[self.current_step - 1].hour
                if 6 <= current_hour <= 22:  # –ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Å—ã
                    time_confidence = 0.25
                else:  # –ù–∏–∑–∫–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å
                    time_confidence = 0.15  # –ù–µ–º–Ω–æ–≥–æ —Å–Ω–∏–∂–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
                confidence += time_confidence
            else:
                confidence += 0.20  # –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –µ—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Ä–µ–º–µ–Ω–∏
            
        except Exception as e:
            if self._can_log:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {e}")
            confidence = 0.5  # –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–∏ –æ—à–∏–±–∫–µ
        
        return min(max(confidence, 0.0), 1.0)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ—Ç 0 –¥–æ 1

    def _update_stats(self, current_price: float):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        """
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—ä–µ–º–∞
        current_volume = self.df_5min[self.current_step - 1, 4]
        self.vol_buf.append(current_volume)
        update_vol_stats(self.vol_buf, self.vol_stats)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ROI –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏—è
        if self.crypto_held > 0 and self.last_buy_price is not None:
            unrealized_roi = (current_price - self.last_buy_price) / self.last_buy_price
            self.roi_buf.append(unrealized_roi)
            update_roi_stats(self.roi_buf, self.roi_stats)
        
        # –î–ò–ù–ê–ú–ò–ß–ï–°–ö–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –ü–ê–†–ê–ú–ï–¢–†–û–í –†–ò–°–ö-–ú–ï–ù–ï–î–ñ–ú–ï–ù–¢–ê
        self._update_dynamic_parameters(current_price)

    def _force_sell(self, current_price: float, reason: str):
        """
        –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞ (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ)
        """
        if self.crypto_held > 0:
            sell_amount = self.crypto_held * current_price
            self.balance += sell_amount
            
            pnl = (current_price - self.last_buy_price) / self.last_buy_price
            net_profit_loss = sell_amount - (self.crypto_held * self.last_buy_price)
            
            # –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–¥–µ–ª–∫—É –≤ –æ–±–∞ —Å–ø–∏—Å–∫–∞
            trade_data = {
                "roi": pnl,
                "net": net_profit_loss,
                "reward": 0,
                "duration": (self.current_step - self.last_buy_step) * 5 if self.last_buy_step else 0
            }
            self.trades.append(trade_data)
            
            # –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ —Å–¥–µ–ª–æ–∫
            if not hasattr(self, 'all_trades'):
                self.all_trades = []
            self.all_trades.append(trade_data)
            
            self.crypto_held = 0
            self.last_buy_price = None
            self.last_buy_step = None
            self.trailing_stop_counter = 0
            self.max_price_during_hold = None
            
            self._log(f"[{self.current_step}] üî¥ FORCE SELL ({reason}): {sell_amount:.2f}, PnL: {pnl:.2%}")

    def _log(self, *args, **kwargs):
        if self._can_log:
            print(*args, **kwargs)
    
    def _update_dynamic_parameters(self, current_price: float):
        """
        –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
        """
        if not hasattr(self, 'base_stop_loss'):
            return  # –ï—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞–∂–¥—ã–µ 100 —à–∞–≥–æ–≤ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        if self.current_step % 100 != 0:
            return
        
        try:
            # 1. –ê–¥–∞–ø—Ç–∞—Ü–∏—è –∫ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            if len(self.vol_buf) >= 20:
                recent_volatility = np.std(list(self.vol_buf)[-20:]) / (np.mean(list(self.vol_buf)[-20:]) + 1e-8)
                
                # –ï—Å–ª–∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –≤—ã—Å–æ–∫–∞—è - —É–∂–µ—Å—Ç–æ—á–∞–µ–º stop-loss
                if recent_volatility > 0.5:  # –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                    self.STOP_LOSS_PCT = self.base_stop_loss * 1.5  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º stop-loss
                    self.TAKE_PROFIT_PCT = self.base_take_profit * 1.2  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º take-profit
                    if self._can_log:
                        print(f"üîß –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: SL={self.STOP_LOSS_PCT:.3f}, TP={self.TAKE_PROFIT_PCT:.3f}")
                elif recent_volatility < 0.1:  # –ù–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                    self.STOP_LOSS_PCT = self.base_stop_loss * 0.8  # –£–º–µ–Ω—å—à–∞–µ–º stop-loss
                    self.TAKE_PROFIT_PCT = self.base_take_profit * 0.9  # –£–º–µ–Ω—å—à–∞–µ–º take-profit
                    if self._can_log:
                        print(f"üîß –ù–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: SL={self.STOP_LOSS_PCT:.3f}, TP={self.TAKE_PROFIT_PCT:.3f}")
                else:
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –±–∞–∑–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º
                    self.STOP_LOSS_PCT = self.base_stop_loss
                    self.TAKE_PROFIT_PCT = self.base_take_profit
            
            # 2. –ê–¥–∞–ø—Ç–∞—Ü–∏—è –∫ —Ç—Ä–µ–Ω–¥—É
            if len(self.roi_buf) >= 30:
                recent_trend = np.mean(list(self.roi_buf)[-30:])
                
                # –ï—Å–ª–∏ —Ç—Ä–µ–Ω–¥ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º take-profit
                if recent_trend > 0.02:  # –•–æ—Ä–æ—à–∏–π —Ç—Ä–µ–Ω–¥
                    self.TAKE_PROFIT_PCT = min(self.base_take_profit * 1.3, 0.15)  # –ú–∞–∫—Å–∏–º—É–º 15%
                    self.min_hold_steps = max(self.base_min_hold - 2, 4)  # –£–º–µ–Ω—å—à–∞–µ–º –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è
                    if self._can_log:
                        print(f"üîß –•–æ—Ä–æ—à–∏–π —Ç—Ä–µ–Ω–¥: TP={self.TAKE_PROFIT_PCT:.3f}, MinHold={self.min_hold_steps}")
                elif recent_trend < -0.02:  # –ü–ª–æ—Ö–æ–π —Ç—Ä–µ–Ω–¥
                    self.STOP_LOSS_PCT = self.base_stop_loss * 0.7  # –£–∂–µ—Å—Ç–æ—á–∞–µ–º stop-loss
                    self.min_hold_steps = self.base_min_hold + 4  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è
                    if self._can_log:
                        print(f"üîß –ü–ª–æ—Ö–æ–π —Ç—Ä–µ–Ω–¥: SL={self.STOP_LOSS_PCT:.3f}, MinHold={self.min_hold_steps}")
                else:
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –±–∞–∑–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º
                    self.TAKE_PROFIT_PCT = self.base_take_profit
                    self.min_hold_steps = self.base_min_hold
            
            # 3. –ê–¥–∞–ø—Ç–∞—Ü–∏—è –∫ –≤—Ä–µ–º–µ–Ω–∏ –¥–Ω—è (–ù–ï –±–ª–æ–∫–∏—Ä—É–µ–º, –∞ –∞–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã)
            if hasattr(self, '_candle_datetimes') and self.current_step - 1 < len(self._candle_datetimes):
                current_hour = self._candle_datetimes[self.current_step - 1].hour
                
                # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫ –≤—Ä–µ–º–µ–Ω–∏ –¥–Ω—è, –Ω–æ –ù–ï –±–ª–æ–∫–∏—Ä—É–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é
                # –ê–≥–µ–Ω—Ç —Å–∞–º –Ω–∞—É—á–∏—Ç—Å—è —Ç–æ—Ä–≥–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö
                if 6 <= current_hour <= 22:
                    # –ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Å—ã - –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                    self.TAKE_PROFIT_PCT = min(self.TAKE_PROFIT_PCT * 1.1, 0.15)
                    self.min_hold_steps = max(self.min_hold_steps - 1, 4)
                    if self._can_log:
                        print(f"üîß –ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Å—ã ({current_hour}:00 UTC): –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
                else:
                    # –ù–∏–∑–∫–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å - –±–æ–ª–µ–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –Ω–æ —Ç–æ—Ä–≥–æ–≤–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∞
                    self.STOP_LOSS_PCT = self.STOP_LOSS_PCT * 0.9
                    self.min_hold_steps = self.min_hold_steps + 2
                    if self._can_log:
                        print(f"üîß –ù–∏–∑–∫–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å ({current_hour}:00 UTC): –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (—Ç–æ—Ä–≥–æ–≤–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∞)")
            
            # 4. –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞–∑—É–º–Ω—ã–º–∏ –ø—Ä–µ–¥–µ–ª–∞–º–∏
            self.STOP_LOSS_PCT = max(self.STOP_LOSS_PCT, -0.08)  # –ù–µ –±–æ–ª–µ–µ -8%
            self.STOP_LOSS_PCT = min(self.STOP_LOSS_PCT, -0.01)  # –ù–µ –º–µ–Ω–µ–µ -1%
            self.TAKE_PROFIT_PCT = max(self.TAKE_PROFIT_PCT, 0.03)   # –ù–µ –º–µ–Ω–µ–µ 3%
            self.TAKE_PROFIT_PCT = min(self.TAKE_PROFIT_PCT, 0.20)   # –ù–µ –±–æ–ª–µ–µ 20%
            self.min_hold_steps = max(self.min_hold_steps, 4)     # –ù–µ –º–µ–Ω–µ–µ 4 —à–∞–≥–æ–≤
            self.min_hold_steps = min(self.min_hold_steps, 20)    # –ù–µ –±–æ–ª–µ–µ 20 —à–∞–≥–æ–≤
            
            # 5. –ù–û–í–´–ô: –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
            if hasattr(self, 'base_position_fraction'):
                # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –∫ —Ç–µ–∫—É—â–∏–º —Ä—ã–Ω–æ—á–Ω—ã–º —É—Å–ª–æ–≤–∏—è–º
                market_conditions_score = 0.0
                
                # –û—Ü–µ–Ω–∫–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –ø–æ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
                if len(self.vol_buf) >= 20:
                    recent_volatility = np.std(list(self.vol_buf)[-20:]) / (np.mean(list(self.vol_buf)[-20:]) + 1e-8)
                    if 0.1 <= recent_volatility <= 0.5:  # –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                        market_conditions_score += 0.3
                    elif recent_volatility > 0.5:  # –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                        market_conditions_score += 0.1  # –°–Ω–∏–∂–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
                    else:  # –ù–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                        market_conditions_score += 0.2
                
                # –û—Ü–µ–Ω–∫–∞ –ø–æ —Ç—Ä–µ–Ω–¥—É
                if len(self.roi_buf) >= 30:
                    recent_trend = np.mean(list(self.roi_buf)[-30:])
                    if recent_trend > 0.02:  # –•–æ—Ä–æ—à–∏–π —Ç—Ä–µ–Ω–¥
                        market_conditions_score += 0.4
                    elif recent_trend > -0.01:  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥
                        market_conditions_score += 0.3
                    else:  # –ü–ª–æ—Ö–æ–π —Ç—Ä–µ–Ω–¥
                        market_conditions_score += 0.1
                
                # –û—Ü–µ–Ω–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–Ω—è
                if hasattr(self, '_candle_datetimes') and self.current_step - 1 < len(self._candle_datetimes):
                    current_hour = self._candle_datetimes[self.current_step - 1].hour
                    if 6 <= current_hour <= 22:  # –ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Å—ã
                        market_conditions_score += 0.3
                    else:  # –ù–∏–∑–∫–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å
                        market_conditions_score += 0.1
                else:
                    market_conditions_score += 0.2
                
                # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ—Ü–µ–Ω–∫—É —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π (0-1)
                market_conditions_score = min(max(market_conditions_score, 0.0), 1.0)
                
                # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
                if market_conditions_score > 0.7:  # –û—Ç–ª–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
                    self.base_position_fraction = min(0.4, self.base_position_fraction * 1.1)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ 40%
                elif market_conditions_score > 0.5:  # –•–æ—Ä–æ—à–∏–µ —É—Å–ª–æ–≤–∏—è
                    self.base_position_fraction = min(0.35, self.base_position_fraction * 1.05)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ 35%
                elif market_conditions_score > 0.3:  # –°—Ä–µ–¥–Ω–∏–µ —É—Å–ª–æ–≤–∏—è
                    self.base_position_fraction = max(0.25, self.base_position_fraction * 0.95)  # –£–º–µ–Ω—å—à–∞–µ–º –¥–æ 25%
                else:  # –ü–ª–æ—Ö–∏–µ —É—Å–ª–æ–≤–∏—è
                    self.base_position_fraction = max(0.2, self.base_position_fraction * 0.9)   # –£–º–µ–Ω—å—à–∞–µ–º –¥–æ 20%
                
                if self._can_log:
                    print(f"üîß –†—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è: {market_conditions_score:.2f}, –±–∞–∑–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {self.base_position_fraction:.1%}")
            
        except Exception as e:
            if self._can_log:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –±–∞–∑–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º –ø—Ä–∏ –æ—à–∏–±–∫–µ
            self.STOP_LOSS_PCT = self.base_stop_loss
            self.TAKE_PROFIT_PCT = self.base_take_profit
            self.min_hold_steps = self.base_min_hold
    
    def get_n_step_return(self, n_steps: int = None) -> list:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç n-step transitions –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
        
        Args:
            n_steps: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ—Ç self.n_step)
            
        Returns:
            list: —Å–ø–∏—Å–æ–∫ n-step transitions
        """
        if n_steps is None:
            n_steps = self.n_step
            
        if len(self.n_step_buffer) < n_steps:
            return []
            
        transitions = []
        for i in range(len(self.n_step_buffer) - n_steps + 1):
            # –ë–µ—Ä–µ–º n –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
            n_step_transitions = list(self.n_step_buffer)[i:i+n_steps]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ next_state –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
            if any(t['next_state'] is None for t in n_step_transitions):
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–ø–æ–ª–Ω—ã–µ transitions
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º n-step return
            total_reward = 0
            for j, transition in enumerate(n_step_transitions):
                total_reward += transition['reward'] * (self.gamma ** j)
            
            # –°–æ–∑–¥–∞–µ–º n-step transition
            first_transition = n_step_transitions[0]
            last_transition = n_step_transitions[-1]
            
            n_step_transition = {
                'state': first_transition['state'],
                'action': first_transition['action'],
                'reward': total_reward,
                'next_state': last_transition['next_state'],
                'done': last_transition['done']
            }
            
            transitions.append(n_step_transition)
            
        return transitions
