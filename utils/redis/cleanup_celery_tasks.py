#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞—á Celery –∏–∑ Redis
"""

import redis
import json
import sys
from datetime import datetime, timedelta

def cleanup_celery_tasks():
    """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏ Celery –∏–∑ Redis"""
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Redis
        redis_hosts = ['redis', 'localhost', '127.0.0.1']
        r = None
        
        for host in redis_hosts:
            try:
                r = redis.Redis(host=host, port=6379, db=0, socket_connect_timeout=5)
                r.ping()
                print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ Redis –Ω–∞ {host}")
                break
            except Exception:
                continue
        
        if r is None:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ –∑–∞–¥–∞—á
        task_keys = r.keys('celery-task-meta-*')
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(task_keys)} –∑–∞–¥–∞—á –≤ Redis")
        
        if not task_keys:
            print("‚úÖ –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –æ—á–∏—Å—Ç–∫–∏")
            return True
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏
        now = datetime.now()
        old_tasks = []
        recent_tasks = []
        
        for key in task_keys:
            try:
                task_data = r.get(key)
                if not task_data:
                    continue
                
                # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
                try:
                    task_info = json.loads(task_data)
                except:
                    # –ï—Å–ª–∏ –Ω–µ JSON, —Å—á–∏—Ç–∞–µ–º –∑–∞–¥–∞—á—É —Å—Ç–∞—Ä–æ–π
                    old_tasks.append(key)
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
                date_done = task_info.get('date_done')
                if date_done:
                    try:
                        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                        task_time = datetime.fromisoformat(date_done.replace('Z', '+00:00'))
                        # –ó–∞–¥–∞—á–∏ —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π —Å—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ä—ã–º–∏
                        if now - task_time > timedelta(days=7):
                            old_tasks.append(key)
                        else:
                            recent_tasks.append(key)
                    except:
                        old_tasks.append(key)
                else:
                    # –ó–∞–¥–∞—á–∏ –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ä—ã–º–∏
                    old_tasks.append(key)
                    
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏ {key}: {e}")
                old_tasks.append(key)
        
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   ‚Ä¢ –°—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏ (>7 –¥–Ω–µ–π): {len(old_tasks)}")
        print(f"   ‚Ä¢ –ù–µ–¥–∞–≤–Ω–∏–µ –∑–∞–¥–∞—á–∏ (<7 –¥–Ω–µ–π): {len(recent_tasks)}")
        
        if not old_tasks:
            print("‚úÖ –ù–µ—Ç —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return True
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏
        deleted_count = 0
        for key in old_tasks:
            try:
                r.delete(key)
                deleted_count += 1
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {key}: {e}")
        
        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞—á")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–¥–∞—á–∏
        remaining = r.keys('celery-task-meta-*')
        print(f"üìà –û—Å—Ç–∞–ª–æ—Å—å {len(remaining)} –∑–∞–¥–∞—á –≤ Redis")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∑–∞–¥–∞—á Celery: {e}")
        return False

if __name__ == "__main__":
    success = cleanup_celery_tasks()
    sys.exit(0 if success else 1)
