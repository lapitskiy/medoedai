#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ Redis
"""

import redis
import sys

def clear_redis():
    """–û—á–∏—â–∞–µ—Ç Redis"""
    try:
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ö–æ—Å—Ç—ã
        redis_hosts = ['redis', 'localhost', '127.0.0.1']
        r = None
        
        for host in redis_hosts:
            try:
                r = redis.Redis(host=host, port=6379, db=0, socket_connect_timeout=5)
                r.ping()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ Redis –Ω–∞ {host}")
                break
            except Exception:
                continue
        
        if r is None:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis")
            return False
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏ –∏ –∑–∞–¥–∞—á–∏ celery-trade –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
        trading_keys_to_preserve = [
            'trading:model_paths',
            'trading:last_model_paths', 
            'trading:consensus',
            'trading:last_consensus',
            'trading:symbols',
            'trading:model_path',
            'trading:account_id',
            'trading:current_status',
            'trading:current_status_ts'
        ]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á–∏ celery-trade (–æ—á–µ—Ä–µ–¥—å trade –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
        celery_trade_keys_to_preserve = []
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ Redis
            all_keys = r.keys('*')
            for key in all_keys:
                key_str = key.decode('utf-8') if isinstance(key, bytes) else str(key)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—á–µ—Ä–µ–¥—å trade –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–µ–π –¥–∞–Ω–Ω—ã–µ
                if (key_str == 'trade' or  # –û—á–µ—Ä–µ–¥—å celery-trade
                    key_str.startswith('_kombu.binding.trade') or  # –ë–∏–Ω–¥–∏–Ω–≥–∏ –æ—á–µ—Ä–µ–¥–∏ trade
                    key_str.startswith('unacked_trade') or  # –ù–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ trade
                    key_str.startswith('_celery-trade') or  # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ celery-trade
                    key_str.startswith('trade:')):  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–ª—é—á–∏ trade
                    celery_trade_keys_to_preserve.append(key_str)
                    
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª—é—á–µ–π celery-trade: {e}")
        
        # –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º celery-task-meta-* - –æ–Ω–∏ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–µ–Ω—ã
        print("üßπ –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º celery-task-meta-* –∫–ª—é—á–∏ - –æ–Ω–∏ –±—É–¥—É—Ç –æ—á–∏—â–µ–Ω—ã")
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ trading:* –∫–ª—é—á–∏ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        try:
            trading_dynamic_keys = [
                k.decode('utf-8') for k in r.keys('trading:*')
                if k.decode('utf-8') not in trading_keys_to_preserve
                and not k.decode('utf-8').startswith('trading:agent_lock')  # –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∏ –∞–≥–µ–Ω—Ç–∞
            ]
            trading_keys_to_preserve.extend(trading_dynamic_keys)
            if trading_dynamic_keys:
                print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(trading_dynamic_keys)} –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö trading:* –∫–ª—é—á–µ–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
                print("üìã –°–ø–∏—Å–æ–∫: " + ", ".join(trading_dynamic_keys))  # –û—Ç–ª–∞–¥–∫–∞: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º, –∫–∞–∫–∏–µ –∫–ª—é—á–∏ –Ω–∞–π–¥–µ–Ω—ã
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ trading:* –∫–ª—é—á–µ–π: {e}")
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∫–ª—é—á–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è, –∏—Å–∫–ª—é—á–∞—è –ª—é–±—ã–µ agent_lock
        safe_trading_keys = [k for k in trading_keys_to_preserve if not str(k).startswith('trading:agent_lock')]
        all_keys_to_preserve = safe_trading_keys + celery_trade_keys_to_preserve
        
        print(f"üîë –ö–ª—é—á–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ({len(all_keys_to_preserve)}): " + ", ".join(all_keys_to_preserve))  # –û—Ç–ª–∞–¥–∫–∞: –≤—Å–µ –∫–ª—é—á–∏

        preserved_data = {}
        for key in all_keys_to_preserve:
            try:
                key_type = r.type(key).decode('utf-8')
                print(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º {key} (—Ç–∏–ø: {key_type})")  # –û—Ç–ª–∞–¥–∫–∞: –∫–ª—é—á –∏ —Ç–∏–ø
                
                if key_type == 'list':
                    value = r.lrange(key, 0, -1)
                elif key_type == 'set':
                    value = r.smembers(key)
                elif key_type == 'hash':
                    value = r.hgetall(key)
                elif key_type == 'string':
                    value = r.get(key)
                else:
                    value = r.get(key)  # Fallback
                
                if value is not None and value != b'none':  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º 'none'
                    preserved_data[key] = (key_type, value)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å —Ç–∏–ø–æ–º
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–ª—é—á–∞ {key}: {e}")
                pass
        
        # –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        r.flushall()
        print("‚úÖ Redis –æ—á–∏—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏ –∏ –∑–∞–¥–∞—á–∏ celery-trade
        restored_count = 0
        for key, (orig_type, value) in preserved_data.items():
            try:
                value_type = type(value).__name__
                print(f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º {key} (–æ—Ä–∏–≥. —Ç–∏–ø: {orig_type}, –∑–Ω–∞—á. —Ç–∏–ø: {value_type})")  # –û—Ç–ª–∞–¥–∫–∞
                
                if orig_type == 'list':
                    for item in value:
                        r.lpush(key, item)
                elif orig_type == 'set':
                    for item in value:
                        r.sadd(key, item)
                elif orig_type == 'hash':
                    r.hmset(key, value)
                else:
                    r.set(key, value)
                restored_count += 1
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞ {key}: {e}")
                pass
        
        if restored_count > 0:
            print(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {restored_count} –∫–ª—é—á–µ–π (—Ç–æ—Ä–≥–æ–≤–ª—è + celery-trade)")
            print("üí° –û—á–µ—Ä–µ–¥—å 'trade' –∏ –∑–∞–¥–∞—á–∏ celery-trade —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        
        # –û—Ç–ª–∞–¥–∫–∞: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á trading:current_status –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        try:
            status_value = r.get('trading:current_status')
            if status_value:
                print(f"üîë trading:current_status –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {status_value.decode('utf-8')}")
            else:
                print("‚ö†Ô∏è trading:current_status –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ trading:current_status: {e}")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
        if r.dbsize() == 0:
            print("‚úÖ Redis –ø—É—Å—Ç, –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        else:
            print(f"‚ö†Ô∏è –í Redis –æ—Å—Ç–∞–ª–æ—Å—å {r.dbsize()} –∫–ª—é—á–µ–π")
            
        return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ Redis: {e}")
        return False

if __name__ == "__main__":
    success = clear_redis()
    sys.exit(0 if success else 1)
