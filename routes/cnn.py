
@app.route('/cnn_training')
def cnn_training_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±—É—á–µ–Ω–∏—è CNN –º–æ–¥–µ–ª–µ–π"""
    return render_template('cnn_training.html')

# === CNN Training API Endpoints ===

@app.route('/cnn/start_training', methods=['POST'])
def cnn_start_training():
    """–ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è CNN –º–æ–¥–µ–ª–∏"""
    try:
        data = request.get_json()
        symbols = data.get('symbols', ['BTCUSDT'])
        timeframes = data.get('timeframes', ['5m'])
        model_type = data.get('model_type', 'multiframe')
        
        print(f"üîç Flask: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ CNN –æ–±—É—á–µ–Ω–∏–µ")
        print(f"üîç Flask: symbols={symbols}, model_type={model_type}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é Celery –∑–∞–¥–∞—á—É –¥–ª—è –æ–±—É—á–µ–Ω–∏—è CNN
        try:
            print(f"üîç Flask: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º train_cnn_model...")
            from tasks.celery_tasks import train_cnn_model
            print(f"‚úÖ Flask: train_cnn_model –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        except ImportError as e:
            print(f"‚ùå Flask: –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ train_cnn_model: {e}")
            raise
        
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–ø–∏—Å–æ–∫
        if isinstance(symbols, str):
            symbols = [symbols]
            print(f"üîç Flask: –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–ª–∏ —Å–∏–º–≤–æ–ª –≤ —Å–ø–∏—Å–æ–∫: {symbols}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –û–î–ù–£ –∑–∞–¥–∞—á—É –æ–±—É—á–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Å–∞–º–∞ –æ–±—É—á–∏—Ç –Ω–∞ –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–∞—Ö –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        print(f"üîç Flask: –ó–∞–ø—É—Å–∫–∞–µ–º –æ–¥–Ω—É –∑–∞–¥–∞—á—É –æ–±—É—á–µ–Ω–∏—è –¥–ª—è —Å–∏–º–≤–æ–ª–æ–≤: {symbols}...")
        try:
            # –ü–µ—Ä–µ–¥–∞–µ–º –ø–µ—Ä–≤—ã–π —Å–∏–º–≤–æ–ª –∫–∞–∫ —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç (–∑–∞–¥–∞—á–∞ –≤–Ω—É—Ç—Ä–∏ –≤–æ–∑—å–º–µ—Ç –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ config)
            task = train_cnn_model.delay(
                symbol=symbols[0] if symbols else "BTCUSDT",
                model_type=model_type
            )
            print(f"‚úÖ Flask: –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å ID: {task.id}")
            task_results = [{
                "symbols": symbols,
                "task_id": task.id
            }]
        except Exception as e:
            print(f"‚ùå Flask: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
            raise
        
        print(f"‚úÖ Flask: –í—Å–µ –∑–∞–¥–∞—á–∏ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç.")
        
        result = {
            "success": True,
            "message": f"üß† CNN –æ–±—É—á–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –¥–ª—è {symbols}",
            "task_results": task_results,
            "details": {
                "symbols": symbols,
                "timeframes": timeframes,
                "model_type": model_type,
                "note": "–í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è –±–µ—Ä—É—Ç—Å—è –∏–∑ config.py"
            }
        }
        
        print(f"üîç Flask: –û—Ç–≤–µ—Ç: {result}")
        return jsonify(result)
    except Exception as e:
        print(f"‚ùå Flask: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ CNN endpoint: {str(e)}")
        import traceback
        print(f"‚ùå Flask: Traceback: {traceback.format_exc()}")
        return jsonify({
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ CNN –æ–±—É—á–µ–Ω–∏—è: {str(e)}"
        }), 500

@app.route('/cnn/models', methods=['GET'])
def cnn_get_models():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ CNN –º–æ–¥–µ–ª–µ–π –∏–∑ cnn_training/result"""
    try:
        import os
        import json
        from datetime import datetime
        
        models = []
        result_dir = "cnn_training/result"
        
        if not os.path.exists(result_dir):
            return jsonify({
                "success": True,
                "models": []
            })
        
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Å–∏–º–≤–æ–ª–∞–º –≤ result/
        for symbol in os.listdir(result_dir):
            symbol_path = os.path.join(result_dir, symbol)
            if not os.path.isdir(symbol_path):
                continue
                
            runs_dir = os.path.join(symbol_path, "runs")
            if not os.path.exists(runs_dir):
                continue
            
            # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º run_id
            for run_id in os.listdir(runs_dir):
                run_path = os.path.join(runs_dir, run_id)
                if not os.path.isdir(run_path):
                    continue
                
                # –ò—â–µ–º manifest.json –∏ result_*.json
                manifest_path = os.path.join(run_path, "manifest.json")
                if not os.path.exists(manifest_path):
                    continue
                
                try:
                    # –ß–∏—Ç–∞–µ–º manifest.json
                    with open(manifest_path, 'r', encoding='utf-8') as f:
                        manifest = json.load(f)
                    
                    # –ò—â–µ–º result —Ñ–∞–π–ª—ã
                    result_files = [f for f in os.listdir(run_path) if f.startswith('result_') and f.endswith('.json')]
                    
                    # –ò—â–µ–º –º–æ–¥–µ–ª–∏ (–±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ª—É—á—à—É—é –º–æ–¥–µ–ª—å)
                    model_files = [f for f in os.listdir(run_path) if f.endswith('.pth')]
                    
                    if model_files:
                        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —Å–Ω–∞—á–∞–ª–∞ best, –ø–æ—Ç–æ–º –æ–±—ã—á–Ω—É—é
                        best_model = None
                        regular_model = None
                        
                        for model_file in model_files:
                            if 'best' in model_file.lower():
                                best_model = model_file
                            else:
                                regular_model = model_file
                        
                        # –ë–µ—Ä–µ–º –ª—É—á—à—É—é –º–æ–¥–µ–ª—å, –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –æ–±—ã—á–Ω—É—é
                        model_file = best_model if best_model else regular_model
                        model_path = os.path.join(run_path, model_file)
                        model_size = os.path.getsize(model_path)
                        
                        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ manifest
                        model_type = manifest.get('model_type', 'unknown')
                        timeframes = manifest.get('timeframes', [])
                        created_at = manifest.get('created_at', '')
                        symbols_trained = manifest.get('symbols', [])
                        
                        # –ß–∏—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
                        accuracy = None
                        epochs_trained = None
                        train_loss = None
                        val_loss = None
                        
                        if result_files:
                            try:
                                result_path = os.path.join(run_path, result_files[0])
                                with open(result_path, 'r', encoding='utf-8') as f:
                                    result_data = json.load(f)
                                
                                accuracy = result_data.get('best_val_accuracy')
                                epochs_trained = result_data.get('epochs_trained')
                                train_loss = result_data.get('train_loss_last')
                                val_loss = result_data.get('val_loss_last')
                            except Exception:
                                pass
                        
                        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏
                        model_info = {
                            "symbol": symbol,
                            "run_id": run_id,
                            "model_type": model_type,
                            "timeframes": timeframes,
                            "symbols_trained": symbols_trained,
                            "accuracy": accuracy,
                            "epochs_trained": epochs_trained,
                            "train_loss": train_loss,
                            "val_loss": val_loss,
                            "size": model_size,
                            "created": created_at,
                            "path": model_path,
                            "manifest": manifest,
                            "model_file": model_file
                        }
                        
                        models.append(model_info)
                        
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {manifest_path}: {e}")
                    continue
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
        models.sort(key=lambda x: x.get('created', ''), reverse=True)
        
        return jsonify({
            "success": True,
            "models": models,
            "total": len(models)
        })
        
    except Exception as e:
        return jsonify({
            "success": False,
            "error": str(e)
        }), 500

@app.route('/cnn/test_model', methods=['POST'])
def cnn_test_model():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CNN –º–æ–¥–µ–ª–∏"""
    try:
        data = request.get_json()
        model_path = data.get('model_path')
        
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CNN –º–æ–¥–µ–ª–∏
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        return jsonify({
            "success": True,
            "test_results": f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ {model_path} –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ.\n–¢–æ—á–Ω–æ—Å—Ç—å: 75.2%\nLoss: 0.234\n–í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: 45 —Å–µ–∫—É–Ω–¥"
        })
    except Exception as e:
        return jsonify({
            "success": False,
            "error": str(e)
        }), 500

@app.route('/cnn/test_extraction', methods=['POST'])
def cnn_test_extraction():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
    try:
        import time
        import torch
        import numpy as np
        
        data = request.get_json()
        model_path = data.get('model_path')
        test_symbol = data.get('test_symbol', 'BTCUSDT')
        
        if not model_path:
            return jsonify({
                "success": False,
                "error": "–ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω"
            }), 400
        
        print(f"üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –º–æ–¥–µ–ª–∏: {model_path}")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
        try:
            from cnn_training.feature_extractor import CNNFeatureExtractor
            from cnn_training.config import CNNTrainingConfig
            from cnn_training.data_loader import CryptoDataLoader
        except ImportError as e:
            return jsonify({
                "success": False,
                "error": f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π: {e}"
            }), 500
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = CNNTrainingConfig(
            symbols=[test_symbol],
            timeframes=["5m", "15m", "1h"],
            device="auto"
        )
        
        # –°–æ–∑–¥–∞–µ–º feature extractor
        extractor = CNNFeatureExtractor(config)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
        try:
            extractor.load_model(model_path)
            print(f"‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {model_path}")
        except Exception as e:
            return jsonify({
                "success": False,
                "error": f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}"
            }), 500
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        data_loader = CryptoDataLoader(config)
        data_dict = data_loader.prepare_training_data([test_symbol], config.timeframes)
        
        if not data_dict:
            return jsonify({
                "success": False,
                "error": f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {test_symbol}"
            }), 500
        
        # –°–æ–∑–¥–∞–µ–º –º—É–ª—å—Ç–∏—Ñ—Ä–µ–π–º–æ–≤—ã–π –¥–∞—Ç–∞—Å–µ—Ç
        train_dataset, val_dataset = data_loader.create_multiframe_dataset(data_dict)
        
        # –ë–µ—Ä–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—Ä–∞–∑—Ü–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_samples = []
        for i in range(min(10, len(val_dataset))):
            sample = val_dataset[i]
            test_samples.append(sample)
        
        print(f"üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ {len(test_samples)} –æ–±—Ä–∞–∑—Ü–∞—Ö")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        start_time = time.time()
        features_list = []
        
        for sample in test_samples:
            try:
                features = extractor.extract_features(sample)
                features_list.append(features)
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –æ–±—Ä–∞–∑—Ü–∞: {e}")
                continue
        
        extraction_time = (time.time() - start_time) * 1000  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        
        if not features_list:
            return jsonify({
                "success": False,
                "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –ø—Ä–∏–∑–Ω–∞–∫–∏ –Ω–∏ –∏–∑ –æ–¥–Ω–æ–≥–æ –æ–±—Ä–∞–∑—Ü–∞"
            }), 500
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        features_array = np.array(features_list)
        
        results = {
            "success": True,
            "feature_size": int(features_array.shape[1]),
            "extraction_time": round(extraction_time, 2),
            "samples_tested": len(features_list),
            "feature_mean": round(float(np.mean(features_array)), 6),
            "feature_std": round(float(np.std(features_array)), 6),
            "feature_min": round(float(np.min(features_array)), 6),
            "feature_max": round(float(np.max(features_array)), 6),
            "feature_sample": features_array[0].tolist()[:10],  # –ü–µ—Ä–≤—ã–µ 10 –∑–Ω–∞—á–µ–Ω–∏–π
            "model_path": model_path,
            "test_symbol": test_symbol
        }
        
        print(f"‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {results}")
        return jsonify(results)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return jsonify({
            "success": False,
            "error": str(e)
        }), 500

@app.route('/cnn/integrate_dqn', methods=['POST'])
def cnn_integrate_dqn():
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è CNN —Å DQN"""
    try:
        data = request.get_json()
        model_path = data.get('model_path')
        
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é CNN —Å DQN
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        return jsonify({
            "success": True,
            "model_path": model_path,
            "cnn_features_size": 64,
            "total_state_size": 128,
            "config_updated": True
        })
    except Exception as e:
        return jsonify({
            "success": False,
            "error": str(e)
        }), 500

@app.route('/cnn/monitoring', methods=['GET'])
def cnn_monitoring():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–±—É—á–µ–Ω–∏—è CNN"""
    try:
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–±—É—á–µ–Ω–∏—è
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        return jsonify({
            "success": True,
            "metrics": {
                "current_epoch": 25,
                "train_loss": 0.234,
                "val_loss": 0.267,
                "val_accuracy": 0.752
            },
            "logs": [
                "Epoch 25/50: Train Loss: 0.234, Val Loss: 0.267, Val Acc: 75.2%",
                "Epoch 24/50: Train Loss: 0.241, Val Loss: 0.271, Val Acc: 74.8%",
                "Epoch 23/50: Train Loss: 0.248, Val Loss: 0.275, Val Acc: 74.5%"
            ]
        })
    except Exception as e:
        return jsonify({
            "success": False,
            "error": str(e)
        }), 500

@app.route('/cnn/validate_model', methods=['POST'])
def cnn_validate_model():
    """–í–∞–ª–∏–¥–∞—Ü–∏—è CNN –º–æ–¥–µ–ª–∏ –Ω–∞ –Ω–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–∞—Ö"""
    try:
        data = request.get_json()
        model_path = data.get('model_path')
        test_symbols = data.get('test_symbols', ['SOLUSDT', 'XRPUSDT', 'TONUSDT'])
        test_period = data.get('test_period', 'last_year')
        validation_type = data.get('validation_type', 'cross_symbol')
        
        if not model_path:
            return jsonify({
                "success": False,
                "error": "–ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω"
            }), 400
        
        print(f"üß™ –í–∞–ª–∏–¥–∞—Ü–∏—è CNN –º–æ–¥–µ–ª–∏: {model_path}")
        print(f"üìä –¢–µ—Å—Ç–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã: {test_symbols}")
        print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {test_period}")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä
        try:
            from cnn_training.model_validator import validate_cnn_model
        except ImportError as e:
            return jsonify({
                "success": False,
                "error": f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞: {e}"
            }), 500
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
        try:
            result = validate_cnn_model(
                model_path=model_path,
                test_symbols=test_symbols,
                test_period=test_period
            )
            
            if result['success']:
                print(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                print(f"üìà –û–±—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {result.get('overall_accuracy', 0):.2%}")
                return jsonify(result)
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                return jsonify(result), 500
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}")
            import traceback
            print(f"‚ùå Traceback: {traceback.format_exc()}")
            return jsonify({
                "success": False,
                "error": f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}"
            }), 500
            
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ endpoint –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}")
        import traceback
        print(f"‚ùå Traceback: {traceback.format_exc()}")
        return jsonify({
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}"
        }), 500

@app.route('/cnn/examples', methods=['GET'])
def cnn_examples():
    """–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è CNN –º–æ–¥—É–ª—è"""
    try:
        examples = """# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è CNN –º–æ–¥—É–ª—è

from cnn_training.config import CNNTrainingConfig
from cnn_training.trainer import CNNTrainer
from cnn_training.feature_extractor import create_cnn_wrapper

# 1. –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config = CNNTrainingConfig(
    symbols=["BTCUSDT", "ETHUSDT"],
    timeframes=["5m", "15m", "1h"],
    sequence_length=50,
    output_features=64
)

# 2. –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
trainer = CNNTrainer(config)
result = trainer.train_single_model("BTCUSDT", "5m", "prediction")

# 3. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è DQN
cnn_wrapper = create_cnn_wrapper(config)
features = cnn_wrapper.get_cnn_features("BTCUSDT", ohlcv_data)

# 4. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å DQN
combined_state = np.concatenate([base_dqn_state, features])"""
        
        return jsonify({
            "success": True,
            "examples": examples
        })
    except Exception as e:
        return jsonify({
            "success": False,
            "error": str(e)
        }), 500
