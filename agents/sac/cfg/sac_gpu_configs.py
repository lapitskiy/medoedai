"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è SAC –∞–≥–µ–Ω—Ç–∞ –ø–æ–¥ —Ä–∞–∑–Ω—ã–µ GPU –∫–∞—Ä—Ç—ã
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç GPU –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ SAC
"""

from dataclasses import dataclass
from typing import Dict, Any
import os
import torch

@dataclass
class SACGPUConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è SAC –∞–≥–µ–Ω—Ç–∞ –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é GPU"""
    name: str
    vram_gb: float
    batch_size: int
    memory_size: int
    hidden_sizes: tuple
    use_amp: bool
    learning_rate: float
    target_entropy_scale: float
    description: str

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è SAC –ø–æ–¥ —Ä–∞–∑–Ω—ã–µ GPU
SAC_GPU_CONFIGS: Dict[str, SACGPUConfig] = {
    # Tesla P100 - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –¥–ª—è SAC
    "tesla_p100": SACGPUConfig(
        name="Tesla P100",
        vram_gb=16.0,
        batch_size=512,  # SAC —Ä–∞–±–æ—Ç–∞–µ—Ç –ª—É—á—à–µ —Å –±–∞—Ç—á–∞–º–∏ 256-512
        memory_size=150_000,  # –ë–æ–ª—å—à–µ –ø–∞–º—è—Ç–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è SAC
        hidden_sizes=(1024, 512, 256),
        use_amp=True,
        learning_rate=3e-4,
        target_entropy_scale=1.0,
        description="–í—ã—Å–æ–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è SAC –Ω–∞ Tesla P100"
    ),

    # Tesla V100 - —Å Tensor Cores –¥–ª—è SAC
    "tesla_v100": SACGPUConfig(
        name="Tesla V100",
        vram_gb=16.0,
        batch_size=384,
        memory_size=120_000,
        hidden_sizes=(1024, 512, 256),
        use_amp=False,
        learning_rate=1e-4,
        target_entropy_scale=0.9,
        description="–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è SAC –¥–ª—è Tesla V100 —Å —É–ø–æ—Ä–æ–º –Ω–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å"
    ),

    # GTX 1660 Super - –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –¥–ª—è SAC
    "gtx_1660_super": SACGPUConfig(
        name="GTX 1660 Super",
        vram_gb=6.0,
        batch_size=256,  # –û–ø—Ç–∏–º–∞–ª—å–Ω–æ –¥–ª—è SAC
        memory_size=20_000,  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —É–º–µ–Ω—å—à–µ–Ω–æ —Å 30_000
        hidden_sizes=(512, 256, 128),  # –ö–æ–º–ø–∞–∫—Ç–Ω—ã–µ —Å–µ—Ç–∏ –¥–ª—è SAC
        use_amp=True,  # –í–∫–ª—é—á–∞–µ–º –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
        learning_rate=1e-5,
        target_entropy_scale=1.0,
        description="–û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è SAC –¥–ª—è GTX 1660 Super"
    ),

    # RTX 3080 - –≤—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–∞—è –¥–ª—è SAC
    "rtx_3080": SACGPUConfig(
        name="RTX 3080",
        vram_gb=10.0,
        batch_size=512,
        memory_size=200_000,  # –ú–æ–∂–Ω–æ –ø–æ–∑–≤–æ–ª–∏—Ç—å –±–æ–ª—å—à–µ –ø–∞–º—è—Ç–∏
        hidden_sizes=(1024, 512, 256),
        use_amp=True,
        learning_rate=3e-4,
        target_entropy_scale=1.0,
        description="–í—ã—Å–æ–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å SAC –¥–ª—è RTX 3080"
    ),

    # RTX 4090 - —Ç–æ–ø–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –¥–ª—è SAC
    "rtx_4090": SACGPUConfig(
        name="RTX 4090",
        vram_gb=24.0,
        batch_size=1024,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞—Ç—á –¥–ª—è SAC
        memory_size=500_000,  # –ú–Ω–æ–≥–æ –ø–∞–º—è—Ç–∏ –¥–ª—è SAC
        hidden_sizes=(2048, 1024, 512),  # –ë–æ–ª—å—à–∏–µ —Å–µ—Ç–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        use_amp=True,
        learning_rate=3e-4,
        target_entropy_scale=1.0,
        description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å SAC –¥–ª—è RTX 4090"
    ),

    # CPU fallback –¥–ª—è SAC
    "cpu": SACGPUConfig(
        name="CPU",
        vram_gb=0.0,
        batch_size=64,  # –ú–∞–ª–µ–Ω—å–∫–∏–π –±–∞—Ç—á –¥–ª—è CPU
        memory_size=25_000,  # –ú–∏–Ω–∏–º—É–º –¥–ª—è SAC –æ–±—É—á–µ–Ω–∏—è
        hidden_sizes=(256, 128, 64),  # –ö–æ–º–ø–∞–∫—Ç–Ω—ã–µ —Å–µ—Ç–∏ –¥–ª—è CPU
        use_amp=False,  # –ù–µ—Ç —Å–º—ã—Å–ª–∞ –Ω–∞ CPU
        learning_rate=1e-3,  # –ù–∏–∂–µ learning rate –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ CPU
        target_entropy_scale=1.0,
        description="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è SAC –¥–ª—è CPU"
    )
}

def detect_gpu() -> str:
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø GPU –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª—é—á –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è SAC
    """
    if not torch.cuda.is_available():
        return "cpu"

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ GPU
        gpu_name = torch.cuda.get_device_name(0).lower()
        gpu_memory = torch.cuda.get_device_properties(0).total_memory / (1024**3)

        print(f"üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ GPU –¥–ª—è SAC: {torch.cuda.get_device_name(0)}")
        print(f"üíæ VRAM: {gpu_memory:.1f} GB")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø GPU –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è SAC)
        if "tesla v100" in gpu_name:
            return "tesla_v100"
        elif "tesla p100" in gpu_name:
            return "tesla_p100"
        elif "gtx 1660" in gpu_name or "1660 super" in gpu_name:
            return "gtx_1660_super"
        elif "rtx 3080" in gpu_name:
            return "rtx_3080"
        elif "rtx 4090" in gpu_name:
            return "rtx_4090"
        else:
            # –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö GPU –≤—ã–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ VRAM
            if gpu_memory >= 20:
                return "rtx_4090"  # 24GB+
            elif gpu_memory >= 15:
                # –î–ª—è 16GB –≤—ã–±–∏—Ä–∞–µ–º V100 –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã Tensor Cores, –∏–Ω–∞—á–µ P100
                if "volta" in gpu_name or "tensor" in gpu_name:
                    return "tesla_v100"  # 16GB —Å Tensor Cores
                else:
                    return "tesla_p100"  # 16GB –±–µ–∑ Tensor Cores
            elif gpu_memory >= 8:
                return "rtx_3080"  # 10GB
            elif gpu_memory >= 4:
                return "gtx_1660_super"  # 6GB
            else:
                return "cpu"  # <4GB

    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è GPU –¥–ª—è SAC: {e}")
        return "cpu"

def get_sac_gpu_config(gpu_key: str = None) -> SACGPUConfig:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π GPU –∏–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç
    """
    if gpu_key is None:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ GPU
        forced_gpu = os.environ.get('FORCE_SAC_GPU_CONFIG', '').strip().lower()
        if forced_gpu and forced_gpu in SAC_GPU_CONFIGS:
            print(f"üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–±—Ä–∞–Ω–∞ SAC GPU –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {forced_gpu}")
            gpu_key = forced_gpu
        else:
            gpu_key = detect_gpu()

    if gpu_key not in SAC_GPU_CONFIGS:
        print(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è SAC GPU: {gpu_key}, –∏—Å–ø–æ–ª—å–∑—É–µ–º CPU –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
        gpu_key = "cpu"

    config = SAC_GPU_CONFIGS[gpu_key]
    print(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ SAC –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {config.name}")
    print(f"üìä Batch size: {config.batch_size}")
    print(f"üíæ Memory size: {config.memory_size}")
    print(f"üß† Hidden sizes: {config.hidden_sizes}")
    print(f"‚ö° AMP: {config.use_amp}")

    return config

def apply_sac_gpu_config_to_sacconfig(sac_config, gpu_config: SACGPUConfig) -> None:
    """
    –ü—Ä–∏–º–µ–Ω—è–µ—Ç SAC GPU –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫ SacConfig
    """
    # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    sac_config.batch_size = gpu_config.batch_size
    sac_config.memory_size = gpu_config.memory_size
    sac_config.hidden_sizes = gpu_config.hidden_sizes
    sac_config.use_amp = gpu_config.use_amp
    sac_config.lr_actor = gpu_config.learning_rate
    sac_config.lr_critic = gpu_config.learning_rate
    sac_config.lr_alpha = gpu_config.learning_rate
    sac_config.target_entropy_scale = gpu_config.target_entropy_scale

    print(f"üîß SAC –ø—Ä–∏–º–µ–Ω–µ–Ω—ã GPU –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è {gpu_config.name}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
def get_optimal_sac_config() -> SACGPUConfig:
    """–ü–æ–ª—É—á–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Ç–µ–∫—É—â–µ–π GPU –¥–ª—è SAC"""
    return get_sac_gpu_config()
