#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–∏–π DQN –∞–≥–µ–Ω—Ç–∞
"""

import torch
import numpy as np
from agents.vdqn.dqnn import DQNN
from agents.vdqn.dqnsolver import DQNSolver
from agents.vdqn.cfg.vconfig import vDqnConfig

def test_neural_network():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏"""
    print("üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏...")
    
    cfg = vDqnConfig()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º Dueling DQN
    obs_dim = 100
    act_dim = 3
    hidden_sizes = (512, 256, 128)
    
    model = DQNN(
        obs_dim=obs_dim,
        act_dim=act_dim,
        hidden_sizes=hidden_sizes,
        dropout_rate=cfg.dropout_rate,
        layer_norm=cfg.layer_norm,
        dueling=cfg.dueling_dqn
    )
    
    print(f"‚úÖ –ú–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    print(f"   - –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {hidden_sizes}")
    print(f"   - Dropout: {cfg.dropout_rate}")
    print(f"   - Layer Norm: {cfg.layer_norm}")
    print(f"   - Dueling: {cfg.dueling_dqn}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º forward pass
    test_input = torch.randn(1, obs_dim)
    with torch.no_grad():
        output = model(test_input)
    
    print(f"‚úÖ Forward pass —É—Å–ø–µ—à–µ–Ω")
    print(f"   - –í—Ö–æ–¥: {test_input.shape}")
    print(f"   - –í—ã—Ö–æ–¥: {output.shape}")
    print(f"   - Q-–∑–Ω–∞—á–µ–Ω–∏—è: {output.squeeze().tolist()}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ NaN
    if torch.isnan(output).any():
        print("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã NaN –∑–Ω–∞—á–µ–Ω–∏—è –≤ –≤—ã—Ö–æ–¥–µ!")
        return False, "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã NaN –∑–Ω–∞—á–µ–Ω–∏—è –≤ –≤—ã—Ö–æ–¥–µ"
    else:
        print("‚úÖ NaN –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
        return True, "–ú–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞ –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ"

def test_dqn_solver():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π DQN solver"""
    print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ DQN solver...")
    
    cfg = vDqnConfig()
    
    # –°–æ–∑–¥–∞–µ–º solver
    observation_space = 100
    action_space = 3
    
    solver = DQNSolver(observation_space, action_space, load=False)
    
    print(f"‚úÖ DQN Solver —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    print(f"   - Prioritized Replay: {cfg.prioritized}")
    print(f"   - Memory Size: {cfg.memory_size}")
    print(f"   - Batch Size: {cfg.batch_size}")
    print(f"   - Learning Rate: {cfg.lr}")
    print(f"   - Gamma: {cfg.gamma}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
    test_state = np.random.randn(100)
    test_action = 1
    test_reward = 0.5
    test_next_state = np.random.randn(100)
    test_done = False
    
    solver.store_transition(test_state, test_action, test_reward, test_next_state, test_done)
    print(f"‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω –≤ replay buffer")
    print(f"   - –†–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞: {len(solver.memory)}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è
    action = solver.act(test_state)
    print(f"‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –≤—ã–±—Ä–∞–Ω–æ: {action}")
    print(f"   - Epsilon: {solver.epsilon:.4f}")
    
    return True, "DQN Solver –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ"

def test_configuration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
    print("\n‚öôÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    cfg = vDqnConfig()
    
    print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞:")
    print(f"   - Epsilon: {cfg.eps_start} ‚Üí {cfg.eps_final} –∑–∞ {cfg.eps_decay_steps} —à–∞–≥–æ–≤")
    print(f"   - –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {cfg.hidden_sizes}")
    print(f"   - –û–±—É—á–µ–Ω–∏–µ: lr={cfg.lr}, gamma={cfg.gamma}")
    print(f"   - Replay: size={cfg.memory_size}, batch={cfg.batch_size}")
    print(f"   - PER: {cfg.prioritized}, alpha={cfg.alpha}, beta={cfg.beta}")
    print(f"   - –£–ª—É—á—à–µ–Ω–∏—è: dropout={cfg.dropout_rate}, layer_norm={cfg.layer_norm}")
    print(f"   - DQN: double={cfg.double_dqn}, dueling={cfg.dueling_dqn}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if cfg.batch_size > cfg.memory_size:
        print("‚ùå Batch size –±–æ–ª—å—à–µ memory size!")
        return False, "Batch size –±–æ–ª—å—à–µ memory size"
    else:
        print("‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–≤–º–µ—Å—Ç–∏–º—ã")
    
    if cfg.eps_final >= cfg.eps_start:
        print("‚ùå Epsilon final –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω—å—à–µ eps start!")
        return False, "Epsilon final –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω—å—à–µ eps start"
    else:
        print("‚úÖ Epsilon –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
    
    return True, "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ"

def test_nan_handling():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É NaN –∑–Ω–∞—á–µ–Ω–∏–π"""
    print("\nüõ°Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ NaN –∑–Ω–∞—á–µ–Ω–∏–π...")
    
    cfg = vDqnConfig()
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å
    model = DQNN(100, 3, (512, 256, 128))
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å NaN –≤—Ö–æ–¥–æ–º
    test_input = np.random.randn(100)
    test_input[0] = np.nan  # –î–æ–±–∞–≤–ª—è–µ–º NaN
    
    print(f"   - –í—Ö–æ–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç NaN: {np.isnan(test_input).any()}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ solver
    solver = DQNSolver(100, 3, load=False)
    
    # –î–æ–ª–∂–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–º–µ–Ω–∏—Ç—å NaN –Ω–∞ –Ω—É–ª–∏
    action = solver.act(test_input)
    print(f"‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –≤—ã–±—Ä–∞–Ω–æ –¥–∞–∂–µ —Å NaN –≤—Ö–æ–¥–æ–º: {action}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ NaN –∑–∞–º–µ–Ω–µ–Ω—ã
    cleaned_input = np.nan_to_num(test_input, nan=0.0)
    print(f"   - NaN –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ –Ω—É–ª–∏: {np.isnan(cleaned_input).any()}")
    
    return True, "–û–±—Ä–∞–±–æ—Ç–∫–∞ NaN –∑–Ω–∞—á–µ–Ω–∏–π –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ"

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π DQN –∞–≥–µ–Ω—Ç–∞")
    print("=" * 50)
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        test_configuration()
        test_neural_network()
        test_dqn_solver()
        test_nan_handling()
        
        print("\n" + "=" * 50)
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("üéØ DQN –∞–≥–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ —É–ª—É—á—à–µ–Ω–∏—è
        print("\nüìä –û–∂–∏–¥–∞–µ–º—ã–µ —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
        print("   - Winrate: 50.23% ‚Üí 55-65%")
        print("   - P/L Ratio: 1.01 ‚Üí 1.3-1.5")
        print("   - Bad Trades: 31,352 ‚Üí 15,000-20,000")
        print("   - –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–ª—É—á—à–µ–Ω–∞")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
