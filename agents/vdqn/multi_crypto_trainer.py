#!/usr/bin/env python3
"""
–ú—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä DQN
–û–±—É—á–∞–µ—Ç –º–æ–¥–µ–ª—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö
"""

import os
import sys
import time
import logging
import numpy as np
import pandas as pd
from typing import Dict, List, Tuple, Optional
from collections import defaultdict
import torch

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..'))
from agents.vdqn.v_train_model_optimized import train_model_optimized
from agents.vdqn.cfg.vconfig import vDqnConfig
from utils.adaptive_normalization import adaptive_normalizer

logger = logging.getLogger(__name__)

class MultiCryptoTrainer:
    """
    –¢—Ä–µ–Ω–µ—Ä –¥–ª—è –æ–±—É—á–µ–Ω–∏—è DQN –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    """
    
    def __init__(self, config: Optional[vDqnConfig] = None):
        self.config = config or vDqnConfig()
        self.training_history = defaultdict(list)
        self.model_performance = {}
        
    def prepare_multi_crypto_data(self, crypto_data: Dict[str, Dict]) -> Dict[str, Dict]:
        """
        –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
        
        Args:
            crypto_data: {symbol: {df_5min, df_15min, df_1h}}
            
        Returns:
            –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π
        """
        prepared_data = {}
        
        for symbol, data in crypto_data.items():
            print(f"üîß –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}...")
            
            try:
                # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
                if hasattr(adaptive_normalizer, 'normalize_features'):
                    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º 5-–º–∏–Ω—É—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    df_5min_normalized = adaptive_normalizer.normalize_features(
                        data['df_5min'], symbol
                    )
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                    trading_params = adaptive_normalizer.get_trading_params(symbol, data['df_5min'])
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –¥–∞–Ω–Ω—ã–µ
                    data['trading_params'] = trading_params
                    data['df_5min'] = df_5min_normalized
                    
                    print(f"  ‚úÖ {symbol}: volatility_mult={trading_params['volatility_multiplier']:.2f}, "
                          f"min_hold={trading_params['min_hold_steps']}")
                
                prepared_data[symbol] = data
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
                print(f"  ‚ùå {symbol}: –æ—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ - {e}")
                continue
        
        return prepared_data
    
    def train_on_single_crypto(self, symbol: str, data: Dict, 
                              episodes: int = 1000, 
                              model_path: Optional[str] = None) -> Dict:
        """
        –û–±—É—á–∞–µ—Ç –º–æ–¥–µ–ª—å –Ω–∞ –æ–¥–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ
        
        Args:
            symbol: –°–∏–º–≤–æ–ª –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
            data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
            episodes: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–∏–∑–æ–¥–æ–≤
            model_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è
        """
        print(f"\nüöÄ –û–±—É—á–µ–Ω–∏–µ –Ω–∞ {symbol} ({episodes} —ç–ø–∏–∑–æ–¥–æ–≤)")
        print("=" * 60)
        
        try:
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ–¥ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É
            crypto_config = self.config.copy()
            
            # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É
            if 'trading_params' in data:
                params = data['trading_params']
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                crypto_config.min_episodes_before_stopping = max(500, episodes // 10)
                crypto_config.early_stopping_patience = max(2000, episodes // 3)
                
                print(f"üîß –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è {symbol}:")
                print(f"  ‚Ä¢ Stop Loss: {params['stop_loss_pct']:.3f}")
                print(f"  ‚Ä¢ Take Profit: {params['take_profit_pct']:.3f}")
                print(f"  ‚Ä¢ Min Hold: {params['min_hold_steps']} —à–∞–≥–æ–≤")
                print(f"  ‚Ä¢ Volume Threshold: {params['volume_threshold']:.4f}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ
            start_time = time.time()
            model_path = train_model_optimized(
                dfs=data,
                cfg=crypto_config,
                episodes=episodes,
                patience_limit=crypto_config.early_stopping_patience,
                use_wandb=False
            )
            training_time = time.time() - start_time
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            result = {
                'symbol': symbol,
                'episodes': episodes,
                'model_path': model_path,
                'training_time': training_time,
                'trading_params': data.get('trading_params', {}),
                'status': 'success'
            }
            
            print(f"‚úÖ {symbol}: –æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {training_time/60:.1f} –º–∏–Ω—É—Ç")
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ {symbol}: {e}")
            print(f"‚ùå {symbol}: –æ—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è - {e}")
            
            return {
                'symbol': symbol,
                'episodes': episodes,
                'model_path': None,
                'training_time': 0,
                'trading_params': {},
                'status': 'error',
                'error': str(e)
            }
    
    def train_sequentially(self, crypto_data: Dict[str, Dict], 
                          episodes_per_crypto: int = 1000) -> Dict:
        """
        –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ –∫–∞–∂–¥–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ
        
        Args:
            crypto_data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
            episodes_per_crypto: –≠–ø–∏–∑–æ–¥–æ–≤ –Ω–∞ –∫–∞–∂–¥—É—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è
        """
        print(f"üéØ –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–ï –û–ë–£–ß–ï–ù–ò–ï")
        print(f"üìä –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç: {len(crypto_data)}")
        print(f"üé¨ –≠–ø–∏–∑–æ–¥–æ–≤ –Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É: {episodes_per_crypto}")
        print("=" * 80)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        prepared_data = self.prepare_multi_crypto_data(crypto_data)
        
        results = {}
        total_episodes = 0
        
        for symbol, data in prepared_data.items():
            print(f"\n{'='*20} {symbol} {'='*20}")
            
            # –û–±—É—á–∞–µ–º –Ω–∞ —Ç–µ–∫—É—â–µ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ
            result = self.train_on_single_crypto(
                symbol=symbol,
                data=data,
                episodes=episodes_per_crypto
            )
            
            results[symbol] = result
            total_episodes += episodes_per_crypto
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
            self.training_history[symbol].append(result)
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏
            time.sleep(2)
        
        # –°–≤–æ–¥–∫–∞ –ø–æ –≤—Å–µ–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º
        self._print_training_summary(results, total_episodes)
        
        return results
    
    def train_parallel_episodes(self, crypto_data: Dict[str, Dict], 
                               total_episodes: int = 10000) -> Dict:
        """
        –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ: —á–µ—Ä–µ–¥—É–µ–º —ç–ø–∏–∑–æ–¥—ã –º–µ–∂–¥—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏
        
        Args:
            crypto_data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
            total_episodes: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–∏–∑–æ–¥–æ–≤
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è
        """
        print(f"üéØ –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û–ï –û–ë–£–ß–ï–ù–ò–ï")
        print(f"üìä –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç: {len(crypto_data)}")
        print(f"üé¨ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–∏–∑–æ–¥–æ–≤: {total_episodes}")
        print("=" * 80)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        prepared_data = self.prepare_multi_crypto_data(crypto_data)
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–ø–∏–∑–æ–¥—ã –º–µ–∂–¥—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏
        episodes_per_crypto = total_episodes // len(prepared_data)
        remaining_episodes = total_episodes % len(prepared_data)
        
        print(f"üìà –≠–ø–∏–∑–æ–¥–æ–≤ –Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É: {episodes_per_crypto}")
        print(f"üìà –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —ç–ø–∏–∑–æ–¥–æ–≤: {remaining_episodes}")
        
        results = {}
        
        # –û–±—É—á–∞–µ–º –Ω–∞ –∫–∞–∂–¥–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ
        for i, (symbol, data) in enumerate(prepared_data.items()):
            # –ü–µ—Ä–≤—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –ø–æ–ª—É—á–∞—é—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —ç–ø–∏–∑–æ–¥
            crypto_episodes = episodes_per_crypto + (1 if i < remaining_episodes else 0)
            
            print(f"\n{'='*20} {symbol} ({crypto_episodes} —ç–ø–∏–∑–æ–¥–æ–≤) {'='*20}")
            
            result = self.train_on_single_crypto(
                symbol=symbol,
                data=data,
                episodes=crypto_episodes
            )
            
            results[symbol] = result
            self.training_history[symbol].append(result)
            
            time.sleep(1)
        
        # –°–≤–æ–¥–∫–∞ –ø–æ –≤—Å–µ–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º
        self._print_training_summary(results, total_episodes)
        
        return results
    
    def _print_training_summary(self, results: Dict, total_episodes: int):
        """–í—ã–≤–æ–¥–∏—Ç —Å–≤–æ–¥–∫—É –ø–æ –æ–±—É—á–µ–Ω–∏—é"""
        
        print(f"\n{'='*80}")
        print(f"üìä –°–í–û–î–ö–ê –ü–û –û–ë–£–ß–ï–ù–ò–Æ")
        print(f"{'='*80}")
        
        successful = 0
        total_time = 0
        
        for symbol, result in results.items():
            if result['status'] == 'success':
                successful += 1
                total_time += result['training_time']
                print(f"‚úÖ {symbol}: {result['episodes']} —ç–ø–∏–∑–æ–¥–æ–≤, "
                      f"{result['training_time']/60:.1f} –º–∏–Ω")
            else:
                print(f"‚ùå {symbol}: –æ—à–∏–±–∫–∞ - {result.get('error', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        
        print(f"\nüìà –ò–¢–û–ì–û:")
        print(f"  ‚Ä¢ –£—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–æ: {successful}/{len(results)}")
        print(f"  ‚Ä¢ –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time/60:.1f} –º–∏–Ω—É—Ç")
        print(f"  ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É: {total_time/successful/60:.1f} –º–∏–Ω—É—Ç")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self._save_training_results(results)
    
    def _save_training_results(self, results: Dict):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è"""
        
        timestamp = int(time.time())
        results_file = f"temp/multi_crypto_results_{timestamp}.pkl"
        
        try:
            import pickle
            os.makedirs("temp", exist_ok=True)
            
            with open(results_file, 'wb') as f:
                pickle.dump({
                    'results': results,
                    'training_history': dict(self.training_history),
                    'timestamp': timestamp
                }, f)
            
            print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {results_file}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
    test_data = {
        'BTCUSDT': {
            'df_5min': pd.DataFrame({
                'open': np.random.uniform(45000, 55000, 1000),
                'high': np.random.uniform(45000, 55000, 1000),
                'low': np.random.uniform(45000, 55000, 1000),
                'close': np.random.uniform(45000, 55000, 1000),
                'volume': np.random.uniform(1000, 10000, 1000)
            }),
            'df_15min': pd.DataFrame({
                'open': np.random.uniform(45000, 55000, 1000),
                'high': np.random.uniform(45000, 55000, 1000),
                'low': np.random.uniform(45000, 55000, 1000),
                'close': np.random.uniform(45000, 55000, 1000),
                'volume': np.random.uniform(1000, 10000, 1000)
            }),
            'df_1h': pd.DataFrame({
                'open': np.random.uniform(45000, 55000, 1000),
                'high': np.random.uniform(45000, 55000, 1000),
                'low': np.random.uniform(45000, 55000, 1000),
                'close': np.random.uniform(45000, 55000, 1000),
                'volume': np.random.uniform(1000, 10000, 1000)
            })
        },
        'TONUSDT': {
            'df_5min': pd.DataFrame({
                'open': np.random.uniform(1.5, 2.5, 1000),
                'high': np.random.uniform(1.5, 2.5, 1000),
                'low': np.random.uniform(1.5, 2.5, 1000),
                'close': np.random.uniform(1.5, 2.5, 1000),
                'volume': np.random.uniform(50000, 500000, 1000)
            }),
            'df_15min': pd.DataFrame({
                'open': np.random.uniform(1.5, 2.5, 1000),
                'high': np.random.uniform(1.5, 2.5, 1000),
                'low': np.random.uniform(1.5, 2.5, 1000),
                'close': np.random.uniform(1.5, 2.5, 1000),
                'volume': np.random.uniform(50000, 500000, 1000)
            }),
            'df_1h': pd.DataFrame({
                'open': np.random.uniform(1.5, 2.5, 1000),
                'high': np.random.uniform(1.5, 2.5, 1000),
                'low': np.random.uniform(1.5, 2.5, 1000),
                'close': np.random.uniform(1.5, 2.5, 1000),
                'volume': np.random.uniform(50000, 500000, 1000)
            })
        }
    }
    
    # –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–Ω–µ—Ä
    trainer = MultiCryptoTrainer()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–£–õ–¨–¢–ò–í–ê–õ–Æ–¢–ù–û–ì–û –û–ë–£–ß–ï–ù–ò–Ø")
    print("=" * 80)
    
    # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ (–∫–∞–∫ —É –≤–∞—Å —Å–µ–π—á–∞—Å)
    print("\n1Ô∏è‚É£ –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–ï –û–ë–£–ß–ï–ù–ò–ï:")
    sequential_results = trainer.train_sequentially(test_data, episodes_per_crypto=100)
    
    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ (–Ω–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è)
    print("\n2Ô∏è‚É£ –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û–ï –û–ë–£–ß–ï–ù–ò–ï:")
    parallel_results = trainer.train_parallel_episodes(test_data, total_episodes=200)

if __name__ == "__main__":
    main()
