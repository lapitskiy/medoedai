import os
import sys
import logging
import numpy as np
import torch
import wandb
import time
import psutil
from typing import Dict, List, Optional
import pickle
from pickle import HIGHEST_PROTOCOL
import hashlib
import platform
from datetime import datetime
import subprocess
from utils.adaptive_normalization import adaptive_normalizer

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

from agents.vdqn.dqnsolver import DQNSolver
from agents.vdqn.cfg.vconfig import vDqnConfig
from envs.dqn_model.gym.crypto_trading_env_optimized import CryptoTradingEnvOptimized


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def _format_bytes(num_bytes: int) -> str:
    try:
        gb = num_bytes / (1024 ** 3)
        if gb >= 1:
            return f"{gb:.1f} GB"
        mb = num_bytes / (1024 ** 2)
        return f"{mb:.0f} MB"
    except Exception:
        return str(num_bytes)


def log_resource_usage(tag: str = "train", extra: str = "") -> None:
    try:
        process = psutil.Process(os.getpid())
        total_cpus = os.cpu_count() or 1
        cpu_total_pct = psutil.cpu_percent(interval=0.0)
        cpu_proc_pct = process.cpu_percent(interval=0.0)
        mem = psutil.virtual_memory()
        mem_total_pct = mem.percent
        mem_proc = process.memory_info().rss
        try:
            load1, _load5, _load15 = os.getloadavg()
            load_str = f"{load1:.1f}/{total_cpus}"
        except Exception:
            load_str = "n/a"
        omp = os.environ.get('OMP_NUM_THREADS')
        mkl = os.environ.get('MKL_NUM_THREADS')
        tor = os.environ.get('TORCH_NUM_THREADS')
        frac = os.environ.get('TRAIN_CPU_FRACTION')
        line = (
            f"[RES-{tag}] CPU {cpu_total_pct:.0f}% (proc {cpu_proc_pct:.0f}%), load {load_str}, "
            f"mem {mem_total_pct:.0f}% (proc {_format_bytes(mem_proc)}), "
            f"OMP/MKL/TORCH={omp}/{mkl}/{tor}"
            + (f", FRACTION={frac}" if frac else "")
            + (f" | {extra}" if extra else "")
        )
        print(line, flush=True)
    except Exception:
        pass


def _sha256_of_file(path: str) -> Optional[str]:
    try:
        h = hashlib.sha256()
        with open(path, 'rb') as f:
            for chunk in iter(lambda: f.read(1024 * 1024), b''):
                h.update(chunk)
        return h.hexdigest()
    except Exception:
        return None


def _safe_cfg_snapshot(cfg_obj) -> Dict:
    try:
        snap = {}
        for k, v in (cfg_obj.__dict__.items() if hasattr(cfg_obj, '__dict__') else []):
            try:
                if str(type(v)).endswith("torch.device'>"):
                    snap[k] = str(v)
                elif hasattr(v, 'tolist'):
                    snap[k] = v.tolist()
                else:
                    snap[k] = v
            except Exception:
                snap[k] = str(v)
        return snap
    except Exception:
        return {}


def _architecture_summary(model: torch.nn.Module) -> Dict:
    try:
        total_params = sum(p.numel() for p in model.parameters())
        trainable_params = sum(p.numel() for p in model.parameters() if p.requires_grad)
        sample_keys = []
        try:
            sd = model.state_dict()
            for i, k in enumerate(sd.keys()):
                if i >= 10:
                    break
                sample_keys.append(k)
        except Exception:
            pass
        return {
            'model_class': model.__class__.__name__,
            'total_params': int(total_params),
            'trainable_params': int(trainable_params),
            'state_dict_keys_sample': sample_keys,
        }
    except Exception:
        return {}

def prepare_data_for_training(dfs: Dict) -> Dict:
    """
    –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—è DataFrame –≤ numpy –º–∞—Å—Å–∏–≤—ã
    
    Args:
        dfs: —Å–ª–æ–≤–∞—Ä—å —Å DataFrame –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
        
    Returns:
        Dict: —Å–ª–æ–≤–∞—Ä—å —Å numpy –º–∞—Å—Å–∏–≤–∞–º–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
    """
    print(f"üìä –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    required_keys = ['df_5min', 'df_15min', 'df_1h']
    for key in required_keys:
        if key not in dfs:
            raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç {key} –≤ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        if dfs[key] is None or dfs[key].empty:
            raise ValueError(f"{key} –ø—É—Å—Ç–æ–π –∏–ª–∏ None")
    
    print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã: 5min={len(dfs['df_5min'])}, 15min={len(dfs['df_15min'])}, 1h={len(dfs['df_1h'])}")
    
    return dfs

def train_model_optimized(
    dfs: Dict,
    cfg: Optional[vDqnConfig] = None,
    episodes: int = 10,
    patience_limit: int = 3000,  # –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 2000 –¥–æ 3000 –¥–ª—è –±–æ–ª–µ–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
    use_wandb: bool = False,
    load_model_path: Optional[str] = None,
    load_buffer_path: Optional[str] = None
) -> str:
    """
    –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏ –±–µ–∑ pandas –≤ hot-path
    
    Args:
        dfs: —Å–ª–æ–≤–∞—Ä—å —Å DataFrame –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ (df_5min, df_15min, df_1h)
        cfg: –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
        episodes: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–∏–∑–æ–¥–æ–≤ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        patience_limit: –ª–∏–º–∏—Ç —Ç–µ—Ä–ø–µ–Ω–∏—è –¥–ª—è early stopping (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2000 —ç–ø–∏–∑–æ–¥–æ–≤)
        use_wandb: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ Weights & Biases
        
    Returns:
        str: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    """
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è wandb
    wandb_run = None
    if use_wandb:
        try:
            run_name = getattr(cfg, 'run_name', 'default') if cfg else 'default'
            config_dict = cfg.__dict__ if cfg else {}
            
            wandb_run = wandb.init(
                project="medoedai-optimized",
                name=f"vDQN-optimized-{run_name}",
                config=config_dict
            )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å wandb: {e}")
            use_wandb = False
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if cfg is None:
            cfg = vDqnConfig()
            print("‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö: –º—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω—ã–µ –∏–ª–∏ –æ–¥–∏–Ω–æ—á–Ω—ã–µ
        is_multi_crypto = False
        if dfs and isinstance(dfs, dict):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–ª—é—á–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
            first_key = list(dfs.keys())[0]
            if isinstance(first_key, str) and first_key.endswith('USDT'):
                # –≠—Ç–æ –º—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                is_multi_crypto = True
                print(f"üåç –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –º—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {len(dfs)} –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç")
                for symbol, data in dfs.items():
                    print(f"  ‚Ä¢ {symbol}: {data.get('candle_count', 'N/A')} —Å–≤–µ—á–µ–π")
        
        if is_multi_crypto:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
            from envs.dqn_model.gym.crypto_trading_env_multi import MultiCryptoTradingEnv
            env = MultiCryptoTradingEnv(dfs=dfs, cfg=cfg)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –º—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è {len(dfs)} –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç")
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è –æ–¥–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
            dfs = prepare_data_for_training(dfs)
            env = CryptoTradingEnvOptimized(
                dfs=dfs,
                cfg=cfg,
                lookback_window=20,
                indicators_config=None  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            )
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –æ–±—ã—á–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è –æ–¥–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã")
        
        # –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        training_start_time = time.time()

        # --- –°–Ω–∏–º–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏) ---
        gym_snapshot = {}
        try:
            df5 = dfs.get('df_5min') if isinstance(dfs, dict) else None
            funding_cols = ['funding_rate_bp', 'funding_rate_ema', 'funding_rate_change', 'funding_sign']
            funding_present = []
            try:
                if df5 is not None and hasattr(df5, 'columns'):
                    funding_present = [c for c in funding_cols if c in df5.columns]
            except Exception:
                funding_present = []

            # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞
            gym_snapshot = {
                'symbol': getattr(env, 'symbol', None),
                'lookback_window': lookback_window if 'lookback_window' in locals() else getattr(env, 'lookback_window', None),
                'indicators_config': getattr(env, 'indicators_config', None),
                'funding_features': {
                    'present_in_input_df': funding_present,
                    'included': bool(funding_present),
                },
                'risk_management': {
                    'STOP_LOSS_PCT': getattr(env, 'STOP_LOSS_PCT', None),
                    'TAKE_PROFIT_PCT': getattr(env, 'TAKE_PROFIT_PCT', None),
                    'min_hold_steps': getattr(env, 'min_hold_steps', None),
                    'volume_threshold': getattr(env, 'volume_threshold', None),
                    'base_stop_loss': getattr(env, 'base_stop_loss', None),
                    'base_take_profit': getattr(env, 'base_take_profit', None),
                    'base_min_hold': getattr(env, 'base_min_hold', None),
                },
                'position_sizing': {
                    'base_position_fraction': getattr(env, 'base_position_fraction', None),
                    'position_fraction': getattr(env, 'position_fraction', None),
                    'position_confidence_threshold': getattr(env, 'position_confidence_threshold', None),
                },
                'observation_space_shape': getattr(env, 'observation_space_shape', None),
                'step_minutes': getattr(env.cfg, 'step_minutes', 5) if hasattr(env, 'cfg') else 5,
            }
        except Exception:
            gym_snapshot = {}

        # --- –°–Ω–∏–º–æ–∫ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ (–ø–æ —Å–∏–º–≤–æ–ª–∞–º) ---
        adaptive_snapshot = {}
        try:
            if is_multi_crypto:
                per_symbol = {}
                for sym, data in dfs.items():
                    try:
                        df5s = data.get('df_5min') if isinstance(data, dict) else None
                        if df5s is None:
                            continue
                        base_profile = adaptive_normalizer.get_crypto_profile(sym)
                        market = adaptive_normalizer.analyze_market_conditions(df5s)
                        adapted = adaptive_normalizer.adapt_parameters(sym, df5s)
                        per_symbol[sym] = {
                            'base_profile': base_profile,
                            'market_conditions': market,
                            'adapted_params': adapted,
                        }
                    except Exception:
                        continue
                adaptive_snapshot = {'per_symbol': per_symbol}
            else:
                df5s = dfs.get('df_5min') if isinstance(dfs, dict) else None
                sym = crypto_symbol
                if df5s is not None and isinstance(sym, str):
                    base_profile = adaptive_normalizer.get_crypto_profile(sym)
                    market = adaptive_normalizer.analyze_market_conditions(df5s)
                    adapted = adaptive_normalizer.adapt_parameters(sym, df5s)
                    adaptive_snapshot = {
                        'symbol': sym,
                        'base_profile': base_profile,
                        'market_conditions': market,
                        'adapted_params': adapted,
                    }
        except Exception:
            adaptive_snapshot = {}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ
        if not hasattr(env, 'observation_space_shape'):
            # –ü–æ–ø—Ä–æ–±—É–µ–º –≤—ã—á–∏—Å–ª–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ observation_space
            if hasattr(env, 'observation_space') and hasattr(env.observation_space, 'shape'):
                env.observation_space_shape = env.observation_space.shape[0]
                print(f"‚ö†Ô∏è –í—ã—á–∏—Å–ª–µ–Ω —Ä–∞–∑–º–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ observation_space: {env.observation_space_shape}")
            else:
                raise ValueError("–û–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –∏–º–µ–µ—Ç observation_space_shape –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–∏–º–≤–æ–ª –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        if is_multi_crypto:
            crypto_symbol = "–ú–£–õ–¨–¢–ò–í–ê–õ–Æ–¢–ê"  # –î–ª—è –º—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            print(f"‚úÖ –ú—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ, —Ä–∞–∑–º–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è: {env.observation_space_shape}")
        else:
            crypto_symbol = getattr(env, 'symbol', 'UNKNOWN')
            print(f"‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è {crypto_symbol}, —Ä–∞–∑–º–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è: {env.observation_space_shape}")

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤—ã–≤–æ–¥–∞ –∏ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –ø–æ–¥ —Å–∏–º–≤–æ–ª
        def _symbol_code(sym: str) -> str:
            if not isinstance(sym, str) or not sym:
                return "model"
            s = sym.upper().replace('/', '')
            for suffix in ["USDT", "USD", "USDC", "BUSD", "USDP"]:
                if s.endswith(suffix):
                    s = s[:-len(suffix)]
                    break
            s = s.lower() if s else "model"
            if s in ("–º—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–∞", "multi", "multicrypto"):
                s = "multi"
            return s

        result_dir = os.path.join("result")
        os.makedirs(result_dir, exist_ok=True)
        symbol_code = _symbol_code(crypto_symbol)
        # –ö–æ—Ä–æ—Ç–∫–∏–π UUID –¥–ª—è –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        import uuid
        short_id = str(uuid.uuid4())[:4].lower()
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ù–û–í–´–ï –ø—É—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ–∫–ø–æ–π–Ω—Ç–∞)
        new_model_path = os.path.join(result_dir, f"dqn_model_{symbol_code}_{short_id}.pth")
        new_buffer_path = os.path.join(result_dir, f"replay_buffer_{symbol_code}_{short_id}.pkl")

        # –ï—Å–ª–∏ —Å–∏–º–≤–æ–ª BNB ‚Äî –º—è–≥–∫–∏–µ –æ–≤–µ—Ä—Ä–∞–π–¥—ã –æ–±—É—á–µ–Ω–∏—è –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        try:
            if not is_multi_crypto and isinstance(crypto_symbol, str) and 'BNB' in crypto_symbol.upper():
                # –°–Ω–∏–∂–∞–µ–º exploration –∏ lr, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º batch
                cfg.eps_start = min(getattr(cfg, 'eps_start', 1.0), 0.20)
                cfg.eps_final = max(getattr(cfg, 'eps_final', 0.01), 0.02)
                cfg.eps_decay_steps = int(getattr(cfg, 'eps_decay_steps', 1_000_000) * 0.75)
                cfg.batch_size = max(192, getattr(cfg, 'batch_size', 128))
                cfg.lr = min(getattr(cfg, 'lr', 1e-3), 2e-4)
                # –ß—É—Ç—å —Ä–µ–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –±—É—Ñ–µ—Ä, —á—Ç–æ–±—ã –Ω–µ —Ç–æ—Ä–º–æ–∑–∏—Ç—å I/O
                cfg.buffer_save_frequency = max(
                    400,
                    int(getattr(cfg, 'buffer_save_frequency', 800))
                )
                print(
                    f"üîß BNB overrides: eps_start={cfg.eps_start}, eps_final={cfg.eps_final}, "
                    f"eps_decay_steps={cfg.eps_decay_steps}, batch_size={cfg.batch_size}, lr={cfg.lr}, "
                    f"buffer_save_frequency={getattr(cfg, 'buffer_save_frequency', 'n/a')}"
                )
        except Exception as _e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å BNB-–æ–≤–µ—Ä—Ä–∞–π–¥—ã: {_e}")

        # –°–æ–∑–¥–∞–µ–º DQN solver
        print(f"üöÄ –°–æ–∑–¥–∞—é DQN solver")
        
        dqn_solver = DQNSolver(
            observation_space=env.observation_space_shape,
            action_space=env.action_space.n
        )
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –º–æ–¥–µ–ª–∏/–±—É—Ñ–µ—Ä–∞ ‚Äî –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–Ω–∞—á–∞–ª–∞
        if load_model_path and isinstance(load_model_path, str):
            try:
                dqn_solver.cfg.model_path = load_model_path
            except Exception:
                pass
        if load_buffer_path and isinstance(load_buffer_path, str):
            try:
                dqn_solver.cfg.buffer_path = load_buffer_path
            except Exception:
                pass
        
        # üöÄ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è PyTorch 2.x
        if torch.cuda.is_available():
            # –í–∫–ª—é—á–∞–µ–º cudnn benchmark –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Å–∫–æ—Ä–µ–Ω–∏—è
            torch.backends.cudnn.benchmark = True
            torch.backends.cudnn.deterministic = False
            
            # –í–∫–ª—é—á–∞–µ–º TF32 –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –Ω–∞ Ampere+ GPU
            if hasattr(torch.backends.cuda, 'matmul.allow_tf32'):
                torch.backends.cuda.matmul.allow_tf32 = True
            if hasattr(torch.backends.cudnn, 'allow_tf32'):
                torch.backends.cudnn.allow_tf32 = True
                
            print("üöÄ CUDA –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤–∫–ª—é—á–µ–Ω—ã: cudnn.benchmark, TF32")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ú–û–î–ï–õ–¨ –µ—Å–ª–∏ –µ—Å—Ç—å (–ª–∏–±–æ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø—É—Ç–µ–π, –ª–∏–±–æ –ø–æ –¥–µ—Ñ–æ–ª—Ç—É)
        dqn_solver.load_model()
        # –ó–∞–≥—Ä—É–∂–∞–µ–º replay buffer, –µ—Å–ª–∏ –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω –ø—É—Ç—å –∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        try:
            if load_buffer_path and isinstance(load_buffer_path, str) and os.path.exists(load_buffer_path):
                print(f"üß† –ó–∞–≥—Ä—É–∂–∞—é replay buffer –∏–∑ {load_buffer_path}")
                dqn_solver.load_state()
            else:
                print("‚ÑπÔ∏è Replay buffer –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –∏–ª–∏ —Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî –Ω–∞—á–Ω–µ–º —Å –ø—É—Å—Ç–æ–π –ø–∞–º—è—Ç–∏")
        except Exception as _e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å replay buffer: {_e}")

        # –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∞–µ–º –ø—É—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞ –ù–û–í–´–ï –≤ result/<symbol>_<id>
        try:
            cfg.model_path = new_model_path
            cfg.buffer_path = new_buffer_path
            dqn_solver.cfg.model_path = cfg.model_path
            dqn_solver.cfg.buffer_path = cfg.buffer_path
        except Exception:
            pass
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        all_trades = []
        episode_winrates = []
        best_winrate = 0.0
        patience_counter = 0
        global_step = 0
        grad_steps = 0
        actual_episodes = episodes  # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç–ø–∏–∑–æ–¥–æ–≤
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ exploration –≤ –Ω–∞—á–∞–ª–µ –¥–ª—è Noisy Networks
        if getattr(cfg, 'use_noisy_networks', True):
            dqn_solver.epsilon = 0.3  # –ù–∞—á–∏–Ω–∞–µ–º —Å 30% exploration
            #print(f"üîÄ Noisy Networks: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ exploration —Å epsilon={dqn_solver.epsilon}")
        
        # –£–ª—É—á—à–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è early stopping (–£–õ–£–ß–®–ï–ù–û)
        min_episodes_before_stopping = getattr(cfg, 'min_episodes_before_stopping', max(4000, episodes // 3))  # –£–≤–µ–ª–∏—á–∏–ª —Å 3000 –¥–æ 4000 –∏ —Å 1/4 –¥–æ 1/3
        winrate_history = []  # –ò—Å—Ç–æ—Ä–∏—è winrate –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤
        recent_improvement_threshold = 0.002  # –£–≤–µ–ª–∏—á–∏–ª —Å 0.001 –¥–æ 0.002 –¥–ª—è –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
        
        # --- –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∞–≥—Ä–µ–≥–∞—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è ---
        action_counts_total = {0: 0, 1: 0, 2: 0}
        buy_attempts_total = 0
        buy_rejected_vol_total = 0
        buy_rejected_roi_total = 0
        episodes_with_trade_count = 0
        total_steps_processed = 0
        
        # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π patience_limit –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç–ø–∏–∑–æ–¥–æ–≤
        if episodes >= 10000:
            patience_limit = max(patience_limit, episodes // 3)  # –î–ª—è –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ - –º–∏–Ω–∏–º—É–º 1/3 (–±—ã–ª–æ 1/2)
        elif episodes >= 5000:
            patience_limit = max(patience_limit, episodes // 4)  # –î–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ - –º–∏–Ω–∏–º—É–º 1/4 (–±—ã–ª–æ 1/3)
        elif episodes >= 2000:
            patience_limit = max(patience_limit, episodes // 3)  # –î–ª—è —Å—Ä–µ–¥–Ω–∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ - –º–∏–Ω–∏–º—É–º 1/3 (–±—ã–ª–æ 1/2)
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º patience –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
        patience_limit = max(patience_limit, 8000)  # –ú–∏–Ω–∏–º—É–º 8000 —ç–ø–∏–∑–æ–¥–æ–≤ (–±—ã–ª–æ 5000)
        
        long_term_patience = int(patience_limit * getattr(cfg, 'long_term_patience_multiplier', 2.5))
        trend_threshold = getattr(cfg, 'early_stopping_trend_threshold', 0.05)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ—Ä–æ–≥ —Ç—Ä–µ–Ω–¥–∞ —Å 0.03 –¥–æ 0.05
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        training_name = "–ú–£–õ–¨–¢–ò–í–ê–õ–Æ–¢–ê" if is_multi_crypto else crypto_symbol
        print(f"üéØ –ù–∞—á–∏–Ω–∞—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –Ω–∞ {episodes} —ç–ø–∏–∑–æ–¥–æ–≤ –¥–ª—è {training_name}")
        print(f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã Early Stopping:")
        print(f"  ‚Ä¢ min_episodes_before_stopping: {min_episodes_before_stopping}")
        print(f"  ‚Ä¢ patience_limit: {patience_limit}")
        print(f"  ‚Ä¢ long_term_patience: {long_term_patience}")
        print(f"  ‚Ä¢ trend_threshold: {trend_threshold}")
        print(f"  ‚Ä¢ –°–∞–º—ã–π —Ä–∞–Ω–Ω–∏–π stopping: {min_episodes_before_stopping + patience_limit} —ç–ø–∏–∑–æ–¥–æ–≤")            
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        save_frequency = getattr(cfg, 'save_frequency', 50)
        save_only_on_improvement = getattr(cfg, 'save_only_on_improvement', False)

        # –ß–∞—Å—Ç–æ—Ç–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ (–∫–∞–∂–¥—ã–µ N —ç–ø–∏–∑–æ–¥–æ–≤)
        try:
            resource_log_every = int(os.getenv('TRAIN_LOG_EVERY_EPISODES', '100'))
        except Exception:
            resource_log_every = 100

        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        for episode in range(episodes):
            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–æ —á–∞—Å—Ç–æ—Ç–µ
            if resource_log_every > 0 and (episode % resource_log_every == 0):
                log_resource_usage(tag="episode", extra=f"episode={episode}/{episodes}")

            state = env.reset()            
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ state —è–≤–ª—è–µ—Ç—Å—è numpy –º–∞—Å—Å–∏–≤–æ–º
            if isinstance(state, (list, tuple)):
                state = np.array(state, dtype=np.float32)
            elif not isinstance(state, np.ndarray):
                state = np.array(state, dtype=np.float32)

            episode_reward = 0
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –º—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            current_crypto = crypto_symbol
            if is_multi_crypto and hasattr(env, 'current_symbol'):
                current_crypto = env.current_symbol
            
            print(f"  üéØ –≠–ø–∏–∑–æ–¥ {episode} –¥–ª—è {current_crypto} –Ω–∞—á–∞—Ç, reward={episode_reward}")
            
            # –≠–ø–∏–∑–æ–¥
            step_count = 0
            while True:
                step_count += 1
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 100 —à–∞–≥–æ–≤ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
                if step_count % 10000 == 0:
                    print(f"    üîÑ Step {step_count} –≤ —ç–ø–∏–∑–æ–¥–µ {episode}")
                
                env.epsilon = dqn_solver.epsilon
                
                action = dqn_solver.act(state)
                state_next, reward, terminal, info = env.step(action)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º next_state –Ω–∞ NaN
                if isinstance(state_next, (list, tuple)):
                    state_next = np.array(state_next, dtype=np.float32)
                elif not isinstance(state_next, np.ndarray):
                    state_next = np.array(state_next, dtype=np.float32)
                
                # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ NaN
                try:
                    if np.isnan(state_next).any():
                        state_next = np.nan_to_num(state_next, nan=0.0)
                except (TypeError, ValueError):
                    # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ NaN, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ numpy –∏ –ø–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞ (–±–µ–∑ —Å–ø–∞–º–∞ –≤ –ª–æ–≥)
                    state_next = np.array(state_next, dtype=np.float32)
                    if np.isnan(state_next).any():
                        state_next = np.nan_to_num(state_next, nan=0.0)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –≤ replay buffer
                dqn_solver.store_transition(state, action, reward, state_next, terminal)
                
                # –ü–æ–ª—É—á–∞–µ–º n-step transitions –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ replay buffer
                # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç–ø–∏–∑–æ–¥ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω (–Ω–µ terminal)
                if not terminal:
                    n_step_transitions = env.get_n_step_return()
                    if n_step_transitions:
                        dqn_solver.memory.push_n_step(n_step_transitions)
                

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                state = state_next
                
                # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π state —è–≤–ª—è–µ—Ç—Å—è numpy –º–∞—Å—Å–∏–≤–æ–º
                if isinstance(state, (list, tuple)):
                    state = np.array(state, dtype=np.float32)
                elif not isinstance(state, np.ndarray):
                    state = np.array(state, dtype=np.float32)
                
                episode_reward += reward
                global_step += 1
                total_steps_processed += 1
                
                # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å —á–∞—â–µ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ–±—É—á–µ–Ω–∏—è (–£–õ–£–ß–®–ï–ù–û)
                soft_update_every = getattr(cfg, 'soft_update_every', 50)   # –£–º–µ–Ω—å—à–∏–ª —Å 100 –¥–æ 50 –¥–ª—è –±–æ–ª–µ–µ —á–∞—Å—Ç–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
                batch_size = getattr(cfg, 'batch_size', 128)               # –£–≤–µ–ª–∏—á–∏–ª —Å 64 –¥–æ 128 –¥–ª—è –ª—É—á—à–µ–π —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                target_update_freq = getattr(cfg, 'target_update_freq', 500)  # –£–º–µ–Ω—å—à–∏–ª —Å 1000 –¥–æ 500 –¥–ª—è –±–æ–ª–µ–µ —á–∞—Å—Ç–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è target
                
                if global_step % soft_update_every == 0 and len(dqn_solver.memory) >= batch_size:                    
                    success, loss, abs_q, q_gap = dqn_solver.experience_replay(need_metrics=True)
                    if success:
                        grad_steps += 1                        
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º target network —á–∞—â–µ
                        if global_step % target_update_freq == 0:
                            dqn_solver.update_target_model()
                    else:
                        print(f"      ‚ö†Ô∏è   –û–±—É—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")

                if terminal:
                    break
            
            # –û–±–Ω–æ–≤–ª—è–µ–º epsilon (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º Noisy Networks)
            if not getattr(cfg, 'use_noisy_networks', True):
                eps_final = getattr(cfg, 'eps_final', 0.01)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π epsilon 0.01
                dqn_solver.epsilon = max(eps_final, dqn_solver.epsilon * dqn_solver._eps_decay_rate)
            else:
                # –ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ Noisy Networks –æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π epsilon –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                dqn_solver.epsilon = max(0.05, dqn_solver.epsilon * 0.999)  # –ú–∏–Ω–∏–º—É–º 5%
            
            # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —ç–ø–∏–∑–æ–¥–∞
            # –†–ê–î–ò–ö–ê–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º env.all_trades –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ winrate
            trades_before = len(all_trades)
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º —Å–¥–µ–ª–∫–∏ –∏–∑ env.all_trades –≤–º–µ—Å—Ç–æ env.trades
            if hasattr(env, 'all_trades') and env.all_trades:
                episode_trades = env.all_trades
            else:
                # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º env.trades
                episode_trades = env.trades if hasattr(env, 'trades') and env.trades else []
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º episode_winrate –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            episode_winrate = 0.0
            
            if hasattr(env, 'all_trades') and env.all_trades:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ —Å–¥–µ–ª–∫–∏ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ winrate
                all_profitable = [t for t in env.all_trades if t.get('roi', 0) > 0]
                episode_winrate = len(all_profitable) / len(env.all_trades) if env.all_trades else 0
                episode_winrates.append(episode_winrate)
                
                # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–ø–∏–∑–æ–¥–∞
                episode_stats = dqn_solver.print_trade_stats(env.all_trades)
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–¥–µ–ª–∫–∏ –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –µ—Å–ª–∏ –∏—Ö —Ç–∞–º –Ω–µ—Ç
                if len(all_trades) < len(env.all_trades):
                    all_trades.extend(env.all_trades[len(all_trades):])
                    
            elif episode_trades:
                # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º env.trades
                all_trades.extend(episode_trades)
                
                # –í—ã—á–∏—Å–ª—è–µ–º winrate –¥–ª—è —ç–ø–∏–∑–æ–¥–∞
                profitable_trades = [t for t in episode_trades if t.get('roi', 0) > 0]
                episode_winrate = len(profitable_trades) / len(episode_trades) if episode_trades else 0
                episode_winrates.append(episode_winrate)
                
                # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–ø–∏–∑–æ–¥–∞
                episode_stats = dqn_solver.print_trade_stats(episode_trades)
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç —Å–¥–µ–ª–æ–∫ –≤–æ–æ–±—â–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –∏–∑ all_trades
                if len(all_trades) > 0:
                    # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ winrate
                    recent_trades = all_trades[-min(10, len(all_trades)):]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–¥–µ–ª–æ–∫
                    profitable_trades = [t for t in recent_trades if t.get('roi', 0) > 0]
                    episode_winrate = len(profitable_trades) / len(recent_trades) if recent_trades else 0
                    episode_winrates.append(episode_winrate)
                    episode_stats = dqn_solver.print_trade_stats(recent_trades)
                else:
                    # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ—Ç —Å–¥–µ–ª–æ–∫
                    episode_winrate = 0.0  # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–ø—Ä–µ–¥–µ–ª—è–µ–º episode_winrate
                    episode_winrates.append(episode_winrate)
                    episode_stats = "–ù–µ—Ç —Å–¥–µ–ª–æ–∫"
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —ç–ø–∏–∑–æ–¥–∞ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
                action_stats = ""
                if hasattr(env, 'action_counts'):
                    action_stats = f" | HOLD={env.action_counts.get(0, 0)}, BUY={env.action_counts.get(1, 0)}, SELL={env.action_counts.get(2, 0)}"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                time_stats = ""
                if hasattr(env, 'episode_start_time') and env.episode_start_time is not None:
                    episode_duration = time.time() - env.episode_start_time
                    steps_per_second = env.episode_step_count / episode_duration if episode_duration > 0 else 0
                    time_stats = f" | {episode_duration:.2f}—Å, {env.episode_step_count} —à–∞–≥–æ–≤, {steps_per_second:.1f} —à–∞–≥/—Å"
                
                print(f"  üèÅ –≠–ø–∏–∑–æ–¥ {episode} –¥–ª—è {current_crypto} –∑–∞–≤–µ—Ä—à–µ–Ω | reward={episode_reward:.4f}{action_stats}{time_stats} | {episode_stats}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —É–ª—É—á—à–µ–Ω–∏–µ —Å –±–æ–ª–µ–µ —É–º–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
                if episode_winrate > best_winrate:
                    best_winrate = episode_winrate
                    patience_counter = 0
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å, –∞ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ ‚Äî –∏ replay buffer –ø—Ä–∏ —É–ª—É—á—à–µ–Ω–∏–∏
                    save_replay_on_improvement = getattr(cfg, 'save_replay_on_improvement', True)
                    if save_replay_on_improvement:
                        dqn_solver.save()
                        logger.info("[INFO] New best winrate: %.3f, saving model + replay buffer", best_winrate)
                    else:
                        dqn_solver.save_model()
                        logger.info("[INFO] New best winrate: %.3f, saving model", best_winrate)
                else:
                    # –ú—è–≥–∫–∞—è –ª–æ–≥–∏–∫–∞ patience - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —è–≤–Ω–æ–º —É—Ö—É–¥—à–µ–Ω–∏–∏
                    if episode >= min_episodes_before_stopping:
                        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥ winrate
                        if len(episode_winrates) >= 30:  # –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 20 –¥–æ 30 –¥–ª—è –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                            recent_avg = np.mean(episode_winrates[-30:])  # –£–≤–µ–ª–∏—á–µ–Ω–æ –æ–∫–Ω–æ –∞–Ω–∞–ª–∏–∑–∞
                            older_avg = np.mean(episode_winrates[-60:-30]) if len(episode_winrates) >= 60 else recent_avg  # –£–≤–µ–ª–∏—á–µ–Ω–æ –æ–∫–Ω–æ
                            
                            # –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥ —É–ª—É—á—à–µ–Ω–∏—è, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º patience
                            if recent_avg > older_avg + recent_improvement_threshold:
                                patience_counter = max(0, patience_counter - 5)  # –£–º–µ–Ω—å—à–∞–µ–º patience —Å–∏–ª—å–Ω–µ–µ (–±—ã–ª–æ -3)
                            elif recent_avg > older_avg:
                                patience_counter = max(0, patience_counter - 2)  # –ù–µ–±–æ–ª—å—à–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ (–±—ã–ª–æ -1)
                            elif recent_avg < older_avg - 0.05:  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ—Ä–æ–≥ —É—Ö—É–¥—à–µ–Ω–∏—è —Å 0.03 –¥–æ 0.05
                                patience_counter += 1
                            # –ï—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ–±–æ–ª—å—à–∏–µ, –Ω–µ –º–µ–Ω—è–µ–º patience
                        else:
                            patience_counter += 0  # –ù–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º patience –≤ –Ω–∞—á–∞–ª–µ
                    else:
                        # –í –Ω–∞—á–∞–ª–µ –æ–±—É—á–µ–Ω–∏—è –Ω–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º patience
                        patience_counter = 0

            # --- –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏ —ç–ø–∏–∑–æ–¥–∞ ---
            try:
                # –°—É–º–º–∞—Ä–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
                if hasattr(env, 'action_counts') and isinstance(env.action_counts, dict):
                    action_counts_total[0] = action_counts_total.get(0, 0) + int(env.action_counts.get(0, 0) or 0)
                    action_counts_total[1] = action_counts_total.get(1, 0) + int(env.action_counts.get(1, 0) or 0)
                    action_counts_total[2] = action_counts_total.get(2, 0) + int(env.action_counts.get(2, 0) or 0)
                # –ü–æ–ø—ã—Ç–∫–∏ –ø–æ–∫—É–ø–æ–∫ –∏ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–∞–∑–æ–≤
                buy_attempts_total += int(getattr(env, 'buy_attempts', 0) or 0)
                buy_rejected_vol_total += int(getattr(env, 'buy_rejected_vol', 0) or 0)
                buy_rejected_roi_total += int(getattr(env, 'buy_rejected_roi', 0) or 0)
                # –ë—ã–ª–∞ –ª–∏ —Å–¥–µ–ª–∫–∞ –≤ —ç–ø–∏–∑–æ–¥–µ
                new_trades_added = len(all_trades) - trades_before
                if new_trades_added > 0:
                    episodes_with_trade_count += 1
            except Exception:
                pass

            # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å
            if episode % 10 == 0:
                avg_winrate = np.mean(episode_winrates[-10:]) if episode_winrates else 0
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                log_crypto = current_crypto
                
                logger.info(f"[INFO] Episode {episode}/{episodes} –¥–ª—è {log_crypto}, Avg Winrate: {avg_winrate:.3f}, Epsilon: {dqn_solver.epsilon:.4f}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ early stopping
                if episode >= min_episodes_before_stopping:
                    remaining_patience = patience_limit - patience_counter
                    print(f"  üìä Early stopping –¥–ª—è {log_crypto}: patience {patience_counter}/{patience_limit} (–æ—Å—Ç–∞–ª–æ—Å—å {remaining_patience})")
                    if patience_counter > patience_limit * 0.8:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ –∫ –ª–∏–º–∏—Ç—É
                        print(f"  ‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: patience_counter –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è –∫ –ª–∏–º–∏—Ç—É!")                    
                
                # –û—á–∏—â–∞–µ–º GPU –ø–∞–º—è—Ç—å –∫–∞–∂–¥—ã–µ 10 —ç–ø–∏–∑–æ–¥–æ–≤
                if torch.cuda.is_available():
                    torch.cuda.empty_cache()
            
            # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∏ –±—É—Ñ–µ—Ä–∞
            save_frequency = getattr(cfg, 'save_frequency', 50)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–∞–∂–¥—ã–µ 50 —ç–ø–∏–∑–æ–¥–æ–≤
            save_only_on_improvement = getattr(cfg, 'save_only_on_improvement', False)
            buffer_save_frequency = getattr(cfg, 'buffer_save_frequency', max(200, save_frequency * 4))
            
            if not save_only_on_improvement and episode > 0 and episode % save_frequency == 0:
                dqn_solver.save_model()
                logger.info("[INFO] Periodic save model at episode %d", episode)
            
            if episode > 0 and episode % buffer_save_frequency == 0:
                dqn_solver.save()
                logger.info("[INFO] Periodic save model + replay buffer at episode %d", episode)
            
            # –£–ª—É—á—à–µ–Ω–Ω—ã–π Early stopping —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏
            if episode >= min_episodes_before_stopping:
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–Ω–µ–≥–æ stopping
                if episode < episodes // 2:  # –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –≤ –ø–µ—Ä–≤–æ–π –ø–æ–ª–æ–≤–∏–Ω–µ –æ–±—É—á–µ–Ω–∏—è (–±—ã–ª–æ 1/3)
                    patience_counter = min(patience_counter, patience_limit // 4)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º patience —Å–∏–ª—å–Ω–µ–µ (–±—ã–ª–æ 1/3)
                elif episode < episodes * 3 // 4:  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –¥–æ 3/4 (–±—ã–ª–æ 1/2)
                    patience_counter = min(patience_counter, patience_limit // 2)
                
                # –û—Å–Ω–æ–≤–Ω–æ–π –∫—Ä–∏—Ç–µ—Ä–∏–π - patience
                if patience_counter >= patience_limit:
                    logger.info(f"[INFO] Early stopping triggered for {training_name} after {episode} episodes (patience limit reached)")
                    print(f"  ‚ö†Ô∏è Early stopping: –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç patience ({patience_limit})")
                    print(f"  üîç –û—Ç–ª–∞–¥–∫–∞: patience_counter={patience_counter}, patience_limit={patience_limit}")
                    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª—è–µ–º actual_episodes –ø—Ä–∏ early stopping
                    actual_episodes = episode
                    break
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫—Ä–∏—Ç–µ—Ä–∏–π - –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ (–£–õ–£–ß–®–ï–ù–û)
                if len(episode_winrates) >= 400 and episode >= episodes * 4 // 5:  # –£–≤–µ–ª–∏—á–∏–ª —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è: 400 —ç–ø–∏–∑–æ–¥–æ–≤ –∏ –ø–æ—Å–ª–µ–¥–Ω—è—è 1/5
                    recent_winrate = np.mean(episode_winrates[-80:])   # –£–≤–µ–ª–∏—á–∏–ª –æ–∫–Ω–æ –∞–Ω–∞–ª–∏–∑–∞ —Å 50 –¥–æ 80
                    mid_winrate = np.mean(episode_winrates[-160:-80])  # –£–≤–µ–ª–∏—á–∏–ª –æ–∫–Ω–æ —Å 100:-50 –¥–æ 160:-80
                    early_winrate = np.mean(episode_winrates[-240:-160])  # –£–≤–µ–ª–∏—á–∏–ª –æ–∫–Ω–æ —Å 150:-100 –¥–æ 240:-160
                    
                    # –ï—Å–ª–∏ winrate —Å—Ç–∞–±–∏–ª—å–Ω–æ –ø–∞–¥–∞–µ—Ç –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ 240 —ç–ø–∏–∑–æ–¥–æ–≤ (–±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–æ–µ —É—Å–ª–æ–≤–∏–µ)
                    if (recent_winrate < mid_winrate < early_winrate and 
                        mid_winrate - recent_winrate > trend_threshold * 2.5 and  # –£–≤–µ–ª–∏—á–∏–ª –ø–æ—Ä–æ–≥ —Å 2.0 –¥–æ 2.5
                        early_winrate - mid_winrate > trend_threshold * 2.5):
                        
                        logger.info(f"[INFO] Early stopping triggered for {training_name} after {episode} episodes (declining trend)")
                        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª—è–µ–º actual_episodes –ø—Ä–∏ early stopping
                        actual_episodes = episode
                        break
                
                                # –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π –∫—Ä–∏—Ç–µ—Ä–∏–π - –µ—Å–ª–∏ –º–æ–¥–µ–ª—å —Å—Ç–∞–±–∏–ª—å–Ω–∞, –¥–∞–µ–º –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏
                if patience_counter >= long_term_patience:
                    logger.info(f"[INFO] Early stopping triggered for {training_name} after {episode} episodes (long-term patience)")
                    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª—è–µ–º actual_episodes –ø—Ä–∏ early stopping
                    actual_episodes = episode
                    break

        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        training_end_time = time.time()
        total_training_time = training_end_time - training_start_time
        
        print("\n" + "="*60)
        print(f"üìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ë–£–ß–ï–ù–ò–Ø –¥–ª—è {training_name}")
        print("="*60)
        
        print(f"‚è±Ô∏è –í–†–ï–ú–Ø –û–ë–£–ß–ï–ù–ò–Ø:")
        print(f"  ‚Ä¢ –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_training_time:.2f} —Å–µ–∫—É–Ω–¥ ({total_training_time/60:.1f} –º–∏–Ω—É—Ç)")
        print(f"  ‚Ä¢ –í—Ä–µ–º—è –Ω–∞ —ç–ø–∏–∑–æ–¥: {total_training_time/episode:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"  ‚Ä¢ –≠–ø–∏–∑–æ–¥–æ–≤ –≤ –º–∏–Ω—É—Ç—É: {episode/(total_training_time/60):.1f}")
        
        stats_all = dqn_solver.print_trade_stats(all_trades)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if all_trades:
            total_profit = sum([t.get('roi', 0) for t in all_trades if t.get('roi', 0) > 0])
            total_loss = abs(sum([t.get('roi', 0) for t in all_trades if t.get('roi', 0) < 0]))
            avg_duration = np.mean([t.get('duration', 0) for t in all_trades])
            
            print(f"\nüí∞ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"  ‚Ä¢ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: {total_profit:.4f}")
            print(f"  ‚Ä¢ –û–±—â–∏–π —É–±—ã—Ç–æ–∫: {total_loss:.4f}")
            print(f"  ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–¥–µ–ª–∫–∏: {avg_duration:.1f} –º–∏–Ω—É—Ç")
            print(f"  ‚Ä¢ –ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ —ç–ø–∏–∑–æ–¥—ã: {episodes}")
            print(f"  ‚Ä¢ –†–µ–∞–ª—å–Ω—ã–µ —ç–ø–∏–∑–æ–¥—ã: {episode}")
            if episode < episodes:
                print(f"  ‚Ä¢ Early Stopping: –°—Ä–∞–±–æ—Ç–∞–ª –Ω–∞ {episode} —ç–ø–∏–∑–æ–¥–µ")
            else:
                print(f"  ‚Ä¢ Early Stopping: –ù–µ —Å—Ä–∞–±–æ—Ç–∞–ª")
            print(f"  ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π winrate: {np.mean(episode_winrates):.3f}")
        else:
            print(f"\n‚ö†Ô∏è –ù–µ—Ç —Å–¥–µ–ª–æ–∫ –∑–∞ –≤—Å–µ {episodes} —ç–ø–∏–∑–æ–¥–æ–≤!")
        
        if hasattr(cfg, 'use_wandb') and cfg.use_wandb:
            wandb.log({**stats_all, "scope": "cumulative", "episode": episodes})
        
        # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∏ replay buffer
        print("\nüíæ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∏ replay buffer")
        dqn_solver.save()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–ª–æ—Ö–∏—Ö —Å–¥–µ–ª–æ–∫ (—É–±—ã—Ç–æ—á–Ω—ã–µ —Å–¥–µ–ª–∫–∏)
        bad_trades_list = []
        try:
            if all_trades:
                bad_trades_list = [t for t in all_trades if t.get('roi', 0) < 0]
        except Exception:
            bad_trades_list = []

        bad_trades_count = len(bad_trades_list)
        total_trades_count = len(all_trades) if all_trades else 0
        bad_trades_percentage = (bad_trades_count / total_trades_count * 100.0) if total_trades_count > 0 else 0.0

        training_results = {
            'episodes': episodes,  # –ü–ª–∞–Ω–∏—Ä—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–∏–∑–æ–¥–æ–≤
            'actual_episodes': episode,  # –†–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —ç–ø–∏–∑–æ–¥–æ–≤ (—Ç–µ–∫—É—â–∏–π —ç–ø–∏–∑–æ–¥)
            'total_training_time': total_training_time,
            'episode_winrates': episode_winrates,
            'all_trades': all_trades,
            'bad_trades': bad_trades_list,
            'bad_trades_count': bad_trades_count,
            'bad_trades_percentage': bad_trades_percentage,
            'best_winrate': best_winrate,
            'final_stats': stats_all,
            'training_date': time.strftime('%Y-%m-%d %H:%M:%S'),
            'model_path': cfg.model_path,
            'buffer_path': cfg.buffer_path,
            'symbol': training_name,
            'model_id': short_id,
            'early_stopping_triggered': episode < episodes,  # True –µ—Å–ª–∏ early stopping —Å—Ä–∞–±–æ—Ç–∞–ª
            # --- –ù–æ–≤—ã–µ –∞–≥—Ä–µ–≥–∞—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è ---
            'action_counts_total': action_counts_total,
            'buy_attempts_total': buy_attempts_total,
            'buy_rejected_vol_total': buy_rejected_vol_total,
            'buy_rejected_roi_total': buy_rejected_roi_total,
            'buy_accept_rate': ( (action_counts_total.get(1, 0) or 0) / float(buy_attempts_total) ) if buy_attempts_total > 0 else 0.0,
            'episodes_with_trade_count': episodes_with_trade_count,
            'episodes_with_trade_ratio': (episodes_with_trade_count / float(episodes)) if episodes > 0 else 0.0,
            'avg_minutes_between_buys': ( (total_steps_processed * 5.0) / float(action_counts_total.get(1, 0) or 1) ) if (action_counts_total.get(1, 0) or 0) > 0 else None,
            'total_steps_processed': total_steps_processed,
        }
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–∏—Å–ø–æ–ª—å–∑—É–µ–º result/)
        results_dir = os.path.join("result")
        os.makedirs(results_dir, exist_ok=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª–µ c —Å–∏–º–≤–æ–ª–æ–º –∏ id + –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        results_file = os.path.join(results_dir, f'train_result_{symbol_code}_{short_id}.pkl')

        # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –∑–∞–ø—É—Å–∫–∞
        try:
            git_commit = None
            try:
                git_commit = subprocess.check_output(['git','rev-parse','--short','HEAD'], stderr=subprocess.DEVNULL).decode().strip()
            except Exception:
                pass
            train_metadata = {
                'created_at_utc': datetime.utcnow().strftime('%Y-%m-%dT%H:%M:%SZ'),
                'hostname': platform.node(),
                'platform': platform.platform(),
                'python_version': platform.python_version(),
                'pytorch_version': torch.__version__,
                'cuda_available': torch.cuda.is_available(),
                'gpu_name': (torch.cuda.get_device_name(0) if torch.cuda.is_available() else None),
                'omp_threads': os.environ.get('OMP_NUM_THREADS'),
                'mkl_threads': os.environ.get('MKL_NUM_THREADS'),
                'torch_threads': os.environ.get('TORCH_NUM_THREADS'),
                'train_cpu_fraction': os.environ.get('TRAIN_CPU_FRACTION'),
                'git_commit': git_commit,
                'script': os.path.basename(__file__),
            }
        except Exception:
            train_metadata = {}

        # –°–Ω–∏–º–æ–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
        try:
            cfg_snapshot = _safe_cfg_snapshot(cfg)
        except Exception:
            cfg_snapshot = {}
        try:
            arch_main = _architecture_summary(dqn_solver.model)
            arch_target = _architecture_summary(dqn_solver.target_model)
        except Exception:
            arch_main, arch_target = {}, {}

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Å–∞—Ö (–ø—É—Ç–∏ –∏ —Ö—ç—à–∏)
        weights_info = {
            'model_path': cfg.model_path,
            'buffer_path': cfg.buffer_path,
            'model_sha256': _sha256_of_file(cfg.model_path) if cfg and getattr(cfg, 'model_path', None) and os.path.exists(cfg.model_path) else None,
            'buffer_sha256': _sha256_of_file(cfg.buffer_path) if cfg and getattr(cfg, 'buffer_path', None) and os.path.exists(cfg.buffer_path) else None,
        }

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º
        enriched_results = {
            **training_results,
            'train_metadata': train_metadata,
            'cfg_snapshot': cfg_snapshot,
            'gym_snapshot': gym_snapshot,
            'adaptive_normalization': adaptive_snapshot,
            'architecture': {
                'main': arch_main,
                'target': arch_target,
            },
            'weights': weights_info,
        }

        with open(results_file, 'wb') as f:
            pickle.dump(enriched_results, f, protocol=HIGHEST_PROTOCOL)
        
        print(f"üìä –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {results_file}")
        
        # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤
        if len(episode_winrates) > 10:
            recent_winrate = np.mean(episode_winrates[-10:])
            overall_winrate = np.mean(episode_winrates)
            print(f"üìà Winrate —Ç—Ä–µ–Ω–¥: –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —ç–ø–∏–∑–æ–¥–æ–≤: {recent_winrate:.3f}, –æ–±—â–∏–π: {overall_winrate:.3f}")
            
            if recent_winrate > overall_winrate:
                print("‚úÖ –ú–æ–¥–µ–ª—å —É–ª—É—á—à–∞–µ—Ç—Å—è!")
            else:
                print("‚ö†Ô∏è –ú–æ–¥–µ–ª—å –º–æ–∂–µ—Ç –ø–µ—Ä–µ–æ–±—É—á–∞—Ç—å—Å—è")
        
        return "–û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"    
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º wandb
        if wandb_run is not None:
            wandb_run.finish()
