import torch
import numpy as np
import pandas as pd
from agents.vdqn.dqnsolver import DQNSolver
from envs.dqn_model.gym.crypto_trading_env_optimized import CryptoTradingEnvOptimized as CryptoTradingEnv
from envs.dqn_model.gym.crypto_trading_env_multi import MultiCryptoTradingEnv
import wandb
from agents.vdqn.cfg.vconfig import vDqnConfig
from envs.dqn_model.gym.gutils import get_nan_stats, log_csv, setup_logger, setup_wandb

cfg = vDqnConfig()



def prepare_multi_crypto_data(dfs: dict) -> dict:
    """
    –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è.
    
    Args:
        dfs (dict): –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
        
    Returns:
        dict: –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
    """
    import pandas as pd
    import numpy as np
    from utils.db_utils import db_get_or_fetch_ohlcv
    
    print("üìä –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    # –°–ø–∏—Å–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
    crypto_symbols = [
        'BTCUSDT',  # –ë–∏—Ç–∫–æ–∏–Ω
        'TONUSDT',  # TON
        'ETHUSDT',  # –≠—Ñ–∏—Ä–∏—É–º
        'SOLUSDT',  # Solana
        'ADAUSDT',  # Cardano
        'BNBUSDT'   # Binance Coin
    ]
    
    normalized_dfs = {}
    
    for symbol in crypto_symbols:
        try:
            print(f"  üì• –ó–∞–≥—Ä—É–∂–∞—é {symbol}...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
            df_5min = db_get_or_fetch_ohlcv(
                symbol_name=symbol, 
                timeframe='5m', 
                limit_candles=100000
            )
            
            if df_5min is not None and len(df_5min) > 0:
                print(f"    ‚úÖ {symbol}: {len(df_5min)} —Å–≤–µ—á–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
                
                # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
                df_normalized = normalize_crypto_data(df_5min, symbol)
                
                # –°–æ–∑–¥–∞–µ–º 15-–º–∏–Ω—É—Ç–Ω—ã–µ –∏ 1-—á–∞—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                df_15min = df_5min.resample('15min').agg({
                    'open': 'first',
                    'high': 'max',
                    'low': 'min',
                    'close': 'last',
                    'volume': 'sum',
                }).dropna().reset_index()
                
                df_1h = df_5min.resample('1h').agg({
                    'open': 'first',
                    'high': 'max',
                    'low': 'min',
                    'close': 'last',
                    'volume': 'sum',
                }).dropna().reset_index()
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
                normalized_dfs[symbol] = {
                    'df_5min': df_normalized,
                    'df_15min': df_15min,
                    'df_1h': df_1h,
                    'symbol': symbol,
                    'candle_count': len(df_normalized)
                }
                
            else:
                print(f"    ‚ö†Ô∏è {symbol}: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                
        except Exception as e:
            print(f"    ‚ùå {symbol}: –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ - {e}")
            continue
    
    print(f"üìà –í—Å–µ–≥–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ: {len(normalized_dfs)} –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π
    min_candles = min([data['candle_count'] for data in normalized_dfs.values()]) if normalized_dfs else 0
    print(f"üìä –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π: {min_candles}")
    
    if min_candles < 10000:
        print("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –∏–º–µ—é—Ç –º–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö")
    
    return normalized_dfs

def normalize_crypto_data(df: pd.DataFrame, symbol: str) -> pd.DataFrame:
    """
    –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è.
    
    Args:
        df (pd.DataFrame): –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        symbol (str): –°–∏–º–≤–æ–ª –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        
    Returns:
        pd.DataFrame: –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    """
    try:
        # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        df_norm = df.copy()
        
        # 1. –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ü–µ–Ω (–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∞—è)
        if 'close' in df_norm.columns:
            df_norm['close_norm'] = np.log(df_norm['close'] / df_norm['close'].iloc[0])
        
        # 2. –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–º–æ–≤
        if 'volume' in df_norm.columns:
            volume_mean = df_norm['volume'].mean()
            volume_std = df_norm['volume'].std()
            if volume_std > 0:
                df_norm['volume_norm'] = (df_norm['volume'] - volume_mean) / volume_std
            else:
                df_norm['volume_norm'] = 0
        
        # 3. –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ (High-Low)
        if 'high' in df_norm.columns and 'low' in df_norm.columns:
            df_norm['volatility'] = (df_norm['high'] - df_norm['low']) / df_norm['close']
            vol_mean = df_norm['volatility'].mean()
            vol_std = df_norm['volatility'].std()
            if vol_std > 0:
                df_norm['volatility_norm'] = (df_norm['volatility'] - vol_mean) / vol_std
            else:
                df_norm['volatility_norm'] = 0
        
        # 4. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        # RSI
        if 'close' in df_norm.columns:
            delta = df_norm['close'].diff()
            gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
            loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
            rs = gain / loss
            df_norm['rsi'] = 100 - (100 / (1 + rs))
            df_norm['rsi_norm'] = df_norm['rsi'] / 100  # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è 0-1
        
        # MACD
        if 'close' in df_norm.columns:
            exp1 = df_norm['close'].ewm(span=12).mean()
            exp2 = df_norm['close'].ewm(span=26).mean()
            df_norm['macd'] = exp1 - exp2
            df_norm['macd_signal'] = df_norm['macd'].ewm(span=9).mean()
            
            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è MACD
            macd_mean = df_norm['macd'].mean()
            macd_std = df_norm['macd'].std()
            if macd_std > 0:
                df_norm['macd_norm'] = (df_norm['macd'] - macd_mean) / macd_std
            else:
                df_norm['macd_norm'] = 0
        
        # 5. –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        df_norm['hour'] = pd.to_datetime(df_norm.index).hour
        df_norm['day_of_week'] = pd.to_datetime(df_norm.index).dayofweek
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏
        df_norm['hour_norm'] = df_norm['hour'] / 24
        df_norm['day_norm'] = df_norm['day_of_week'] / 7
        
        # 6. –ó–∞–ø–æ–ª–Ω—è–µ–º NaN –∑–Ω–∞—á–µ–Ω–∏—è
        df_norm = df_norm.ffill().fillna(0)
        
        print(f"    üîß {symbol}: –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return df_norm
        
    except Exception as e:
        print(f"    ‚ùå {symbol}: –æ—à–∏–±–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ - {e}")
        return df

def train_model(dfs: dict, load_previous: bool = False, episodes: int = 200, multi_crypto: bool = False):
    """
    –û–±—É—á–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å DQN –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π —Å GPU –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏.

    Args:
        dfs (dict): –°–ª–æ–≤–∞—Ä—å —Å Pandas DataFrames –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ (df_5min, df_15min, df_1h).
        load_previous (bool): –ó–∞–≥—Ä—É–∂–∞—Ç—å –ª–∏ —Ä–∞–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å.
        episodes (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–∏–∑–æ–¥–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è.
        multi_crypto (bool): –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ –º—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ.
    Returns:
        str: –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–±—É—á–µ–Ω–∏—è.
    """

    import time    
    training_start_time = time.time()  # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è

    all_trades = []
    best_winrate = 0.0
    patience_counter = 0
    patience_limit = 500  # Early stopping –ø–æ—Å–ª–µ 500 —ç–ø–∏–∑–æ–¥–æ–≤ –±–µ–∑ —É–ª—É—á—à–µ–Ω–∏–π (—É–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –±–æ–ª–µ–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è)

    wandb_run = None
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã)
    if multi_crypto and not dfs:
        print("üöÄ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        dfs = prepare_multi_crypto_data(dfs)
        print(f"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(dfs)} –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
    elif multi_crypto:
        print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {len(dfs)} –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç")

    try:
        device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')            
        
        if device.type == 'cuda':
            # GPU –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            torch.cuda.set_device(0)
            torch.backends.cudnn.benchmark = True
            torch.backends.cudnn.deterministic = False
            
            # –û—á–∏—â–∞–µ–º GPU –∫—ç—à
            torch.cuda.empty_cache()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é –ø–∞–º—è—Ç—å
            print(f"GPU Memory: {torch.cuda.get_device_properties(0).total_memory / 1e9:.1f} GB")
            print(f"Available Memory: {torch.cuda.memory_allocated(0) / 1e9:.1f} GB")
            
        cfg.device = device 
        
        # –°–æ–∑–¥–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
        if multi_crypto:
            # –î–ª—è –º—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è —Å–æ–∑–¥–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
            env = MultiCryptoTradingEnv(dfs=dfs, cfg=cfg)
            print(f"üåç –°–æ–∑–¥–∞–Ω–æ –º—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Å {len(dfs)} –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏")
        else:
            # –û–±—ã—á–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è –æ–¥–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
            env = CryptoTradingEnv(dfs=dfs)
            print("üåç –°–æ–∑–¥–∞–Ω–æ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è –æ–¥–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã") 

        observation_space_dim = env.observation_space.shape[0]
        action_space = env.action_space.n

        logger = setup_logger("rl")
        if getattr(cfg, "use_wandb", False):
            wandb_run, _ = setup_wandb(cfg)
                        
        global_step = 0
        last_time = time.perf_counter()
        _next_tick = {}

        def tick(label: str):
            nonlocal last_time, global_step, _next_tick
            now = time.perf_counter()
            dt_ms = (now - last_time) * 1e3
            last_time = now

            if (dt_ms >= cfg.tick_slow_ms) or (global_step >= _next_tick.get(label, -1)):
                logger.info("[T] %s: %.1f ms", label, dt_ms)
                _next_tick[label] = global_step + cfg.tick_every

        dqn_solver = DQNSolver(observation_space_dim, action_space, load=load_previous)
                
        logger.info("Training started: torch=%s cuda=%s device=%s",
            torch.__version__, torch.version.cuda, device)

        successful_episodes = 0        
        episode_rewards = []
        episode_profits = []
        episode_winrates = []

        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ GPU –ø–∞–º—è—Ç—å
        if device.type == 'cuda':
            # –°–æ–∑–¥–∞–µ–º dummy tensor –¥–ª—è —Ä–∞–∑–æ–≥—Ä–µ–≤–∞ GPU
            dummy_tensor = torch.randn(1000, observation_space_dim).to(device)
            _ = dqn_solver.model(dummy_tensor)
            del dummy_tensor
            torch.cuda.empty_cache()

        for episode in range(episodes):
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –º–æ–¥–µ–ª—å –≤ —Ä–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ
            state = env.reset()
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –º—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
            if multi_crypto and hasattr(env, 'get_current_symbol'):
                current_crypto = env.get_current_symbol()
                logger.info(f"[INFO] –≠–ø–∏–∑–æ–¥ {episode + 1}/{episodes}: –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ {current_crypto}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ NaN
            if np.isnan(state).any():
                state = np.nan_to_num(state, nan=0.0)
                logger.warning("NaN detected in initial state, replaced with zeros")
            
            grad_steps = 0
            episode_reward = 0
            tick(f"{episode} episode [{cfg.device}]")
            
            while True:                                                
                env.epsilon = dqn_solver.epsilon
                                  
                action = dqn_solver.act(state)
                state_next, reward, terminal, info = env.step(action)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º next_state –Ω–∞ NaN
                if np.isnan(state_next).any():
                    state_next = np.nan_to_num(state_next, nan=0.0)
                    logger.warning("NaN detected in next_state, replaced with zeros")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –≤ replay buffer
                dqn_solver.store_transition(state, action, reward, state_next, terminal)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                state = state_next
                episode_reward += reward
                global_step += 1
                
                # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å —á–∞—â–µ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
                if global_step % cfg.soft_update_every == 0 and len(dqn_solver.memory) >= cfg.batch_size:
                    success, loss, abs_q, q_gap = dqn_solver.experience_replay(need_metrics=True)
                    if success:
                        grad_steps += 1
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º target network —á–∞—â–µ
                        if global_step % cfg.target_update_freq == 0:
                            dqn_solver.update_target_model()
                
                if terminal:
                    break
            
            # –û–±–Ω–æ–≤–ª—è–µ–º epsilon
            dqn_solver.epsilon = max(cfg.eps_final, dqn_solver.epsilon * dqn_solver._eps_decay_rate)
            
            # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —ç–ø–∏–∑–æ–¥–∞
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º env.all_trades –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ winrate
            if hasattr(env, 'all_trades') and env.all_trades:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ —Å–¥–µ–ª–∫–∏ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ winrate
                all_profitable = [t for t in env.all_trades if t.get('roi', 0) > 0]
                episode_winrate = len(all_profitable) / len(env.all_trades) if env.all_trades else 0
                episode_winrates.append(episode_winrate)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —É–ª—É—á—à–µ–Ω–∏–µ
                if episode_winrate > best_winrate:
                    best_winrate = episode_winrate
                    patience_counter = 0
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª—É—á—à—É—é –º–æ–¥–µ–ª—å
                    dqn_solver.save_model()
                    logger.info("[INFO] New best winrate: %.3f, saving model", best_winrate)
                else:
                    patience_counter += 1
                    
                # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–¥–µ–ª–∫–∏
                if hasattr(env, 'trades') and env.trades:
                    all_trades.extend(env.trades)
            else:
                # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º env.trades –µ—Å–ª–∏ all_trades –Ω–µ—Ç
                if hasattr(env, 'trades') and env.trades:
                    all_trades.extend(env.trades)
                    
                    # –í—ã—á–∏—Å–ª—è–µ–º winrate –¥–ª—è —ç–ø–∏–∑–æ–¥–∞
                    profitable_trades = [t for t in env.trades if t.get('roi', 0) > 0]
                    episode_winrate = len(profitable_trades) / len(env.trades) if env.trades else 0
                    episode_winrates.append(episode_winrate)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —É–ª—É—á—à–µ–Ω–∏–µ
                    if episode_winrate > best_winrate:
                        best_winrate = episode_winrate
                        patience_counter = 0
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª—É—á—à—É—é –º–æ–¥–µ–ª—å
                        dqn_solver.save_model()
                        logger.info("[INFO] New best winrate: %.3f, saving model", best_winrate)
                    else:
                        patience_counter += 1
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç —Å–¥–µ–ª–æ–∫ –≤–æ–æ–±—â–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –∏–∑ all_trades
                    if all_trades:
                        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ winrate
                        recent_trades = all_trades[-min(10, len(all_trades)):]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–¥–µ–ª–æ–∫
                        profitable_trades = [t for t in recent_trades if t.get('roi', 0) > 0]
                        episode_winrate = len(profitable_trades) / len(recent_trades) if recent_trades else 0
                        episode_winrates.append(episode_winrate)
                        print(f"    üí∞ –≠–ø–∏–∑–æ–¥ {episode}: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ {len(recent_trades)} —Å–¥–µ–ª–æ–∫, winrate={episode_winrate:.3f}")
                    else:
                        # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ—Ç —Å–¥–µ–ª–æ–∫
                        episode_winrates.append(0.0)
                        print(f"    ‚ö†Ô∏è –≠–ø–∏–∑–æ–¥ {episode}: –ù–ï–¢ —Å–¥–µ–ª–æ–∫ –≤–æ–æ–±—â–µ!")
                    patience_counter += 1
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            if episode % 10 == 0:
                avg_winrate = np.mean(episode_winrates[-10:]) if episode_winrates else 0
                logger.info(f"[INFO] Episode {episode}/{episodes}, Avg Winrate: {avg_winrate:.3f}, Epsilon: {dqn_solver.epsilon:.4f}")
                
                # –û—á–∏—â–∞–µ–º GPU –ø–∞–º—è—Ç—å –∫–∞–∂–¥—ã–µ 10 —ç–ø–∏–∑–æ–¥–æ–≤
                if device.type == 'cuda':
                    torch.cuda.empty_cache()
            
            # Early stopping
            if patience_counter >= patience_limit:
                logger.info(f"[INFO] Early stopping triggered after {episode} episodes")
                break

        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_all = dqn_solver.print_trade_stats(all_trades)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
        import pickle
        import os
        from datetime import datetime
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs('temp/train_results', exist_ok=True)
        
        # –ò–º—è —Ñ–∞–π–ª–∞ —Å timestamp
        timestamp = int(datetime.now().timestamp())
        filename = f'temp/train_results/training_results_{timestamp}.pkl'
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–º
        stats_all['training_date'] = datetime.fromtimestamp(timestamp).strftime('%Y-%m-%d %H:%M:%S')
        stats_all['episodes'] = episodes
        stats_all['actual_episodes'] = episodes
        stats_all['early_stopping_triggered'] = False  # –î–ª—è –º—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –≤—Å–µ–≥–¥–∞ False
        stats_all['episode_winrates'] = episode_winrates  # –°–ø–∏—Å–æ–∫ winrate –ø–æ —ç–ø–∏–∑–æ–¥–∞–º
        stats_all['real_episodes'] = episodes  # –†–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —ç–ø–∏–∑–æ–¥–æ–≤
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –≤—Ä–µ–º–µ–Ω–∏ –æ–±—É—á–µ–Ω–∏—è
        training_end_time = time.time()
        stats_all['total_training_time'] = training_end_time - training_start_time
        
        # –î–æ–±–∞–≤–ª—è–µ–º best_winrate
        if episode_winrates:
            stats_all['best_winrate'] = max(episode_winrates)
        else:
            stats_all['best_winrate'] = 0.0
        
        # –î–æ–±–∞–≤–ª—è–µ–º all_trades (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if 'all_trades' not in stats_all:
            stats_all['all_trades'] = all_trades
        
        # –î–æ–±–∞–≤–ª—è–µ–º final_stats
        stats_all['final_stats'] = stats_all.copy()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º –¥–ª—è –º—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
        if multi_crypto and hasattr(env, 'get_episode_stats'):
            crypto_stats = env.get_episode_stats()
            stats_all['crypto_stats'] = crypto_stats
            stats_all['timestamp'] = timestamp
            stats_all['episode'] = episodes
            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        with open(filename, 'wb') as f:
            pickle.dump(stats_all, f)
        
        print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤ CSV
        log_csv(cfg.csv_metrics_path, {"scope":"cumulative", "episode": episodes, **stats_all})
        
        if cfg.use_wandb:
            wandb.log({**stats_all, "scope": "cumulative", "episode": episodes})
        
        dqn_solver.save()
        
        # –í—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –∞ –Ω–µ –≤–µ—Å—å —Å–ª–æ–≤–∞—Ä—å
        print("\n" + "="*60)
        print("üìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ë–£–ß–ï–ù–ò–Ø")
        print("="*60)
        print(f"üéØ –≠–ø–∏–∑–æ–¥—ã: {episodes}")
        print(f"üí∞ –°–¥–µ–ª–æ–∫: {stats_all.get('trades_count', 'N/A')}")
        print(f"üìà Winrate: {stats_all.get('winrate', 'N/A'):.3f}")
        print(f"üíµ P/L ratio: {stats_all.get('pl_ratio', 'N/A'):.3f}")
        print(f"‚è±Ô∏è –í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è: {stats_all.get('total_training_time', 'N/A'):.1f} —Å–µ–∫")
        
        if multi_crypto and hasattr(env, 'get_episode_stats'):
            crypto_stats = env.get_episode_stats()
            print(f"\nüåç –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢–ê–ú:")
            for symbol, stats in crypto_stats.items():
                episodes_count = stats.get('episodes', 0)
                percentage = stats.get('percentage', 0)
                print(f"  ‚Ä¢ {symbol}: {episodes_count} —ç–ø–∏–∑–æ–¥–æ–≤ ({percentage:.1f}%)")
        
        print("="*60)
        print("‚úÖ –§–∏–Ω–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
        
        # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤
        if len(episode_winrates) > 10:
            recent_winrate = np.mean(episode_winrates[-10:])
            overall_winrate = np.mean(episode_winrates)
            print(f"üìà Winrate —Ç—Ä–µ–Ω–¥: –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —ç–ø–∏–∑–æ–¥–æ–≤: {recent_winrate:.3f}, –æ–±—â–∏–π: {overall_winrate:.3f}")
            
            if recent_winrate > overall_winrate:
                print("‚úÖ –ú–æ–¥–µ–ª—å —É–ª—É—á—à–∞–µ—Ç—Å—è!")
            else:
                print("‚ö†Ô∏è –ú–æ–¥–µ–ª—å –º–æ–∂–µ—Ç –ø–µ—Ä–µ–æ–±—É—á–∞—Ç—å—Å—è")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º –¥–ª—è –º—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
        if multi_crypto and hasattr(env, 'print_episode_stats'):
            print("\n" + "="*60)
            print("üåç –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢–ê–ú")
            print("="*60)
            env.print_episode_stats()
            print("="*60)
        
        return "–û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"    
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º wandb
        if wandb_run is not None:
            wandb_run.finish()