#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è TON
"""

import os
import sys
import json

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
current_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.join(current_dir, '..', '..', '..')
sys.path.append(project_root)

from agents.vdqn.hyperparameter.ton_optimized_config import TON_OPTIMIZED_CONFIG, TON_RECOMMENDATIONS

def update_gym_config():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é gym –¥–ª—è TON"""
    gym_config_path = os.path.join(project_root, "envs", "dqn_model", "gym", "gconfig.py")
    
    if not os.path.exists(gym_config_path):
        print(f"‚ùå –§–∞–π–ª {gym_config_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    print("üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ gym...")
    
    # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª
    with open(gym_config_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    backup_path = gym_config_path + ".backup"
    with open(backup_path, 'w', encoding='utf-8') as f:
        f.write(content)
    print(f"üìã –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é TON
    ton_config = f"""
# –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è TON (–¥–æ–±–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
TON_OPTIMIZED_CONFIG = {json.dumps(TON_OPTIMIZED_CONFIG, indent=2, ensure_ascii=False)}

def get_ton_optimized_config():
    '''–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è TON'''
    return TON_OPTIMIZED_CONFIG
"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
    with open(gym_config_path, 'a', encoding='utf-8') as f:
        f.write(ton_config)
    
    print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è gym –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    return True

def create_ton_training_script():
    """–°–æ–∑–¥–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è TON —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    script_content = '''#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è TON —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
"""

import sys
import os
sys.path.append('/workspace')

from agents.vdqn.v_train_model_optimized import main as train_main
from envs.dqn_model.gym.gconfig import get_ton_optimized_config

def train_ton_optimized():
    """–û–±—É—á–∞–µ—Ç TON –º–æ–¥–µ–ª—å —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = get_ton_optimized_config()
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è TON —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")
    print("=" * 60)
    print(f"üìä –°–∏–º–≤–æ–ª: TONUSDT")
    print(f"üéØ –¶–µ–ª–µ–≤–æ–π winrate: 55-65%")
    print(f"üí∞ –¶–µ–ª–µ–≤–æ–π P&L ratio: 1.3-1.5")
    print(f"üìâ –¶–µ–ª–µ–≤—ã–µ –ø–ª–æ—Ö–∏–µ —Å–¥–µ–ª–∫–∏: <40%")
    print("=" * 60)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è
    args = {
        'symbol': 'TONUSDT',
        'episodes': 15000,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–∏–∑–æ–¥–æ–≤
        'timeframe': '5m',
        'config': config,
        'save_frequency': 100,
        'early_stopping': True,
        'verbose': True
    }
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ
        result = train_main(**args)
        
        if result:
            print("‚úÖ –û–±—É—á–µ–Ω–∏–µ TON –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            print("üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
        else:
            print("‚ùå –û–±—É—á–µ–Ω–∏–µ TON –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏: {e}")
        return False
    
    return True

if __name__ == "__main__":
    train_ton_optimized()
'''
    
    script_path = os.path.join(project_root, "train_ton_optimized.py")
    with open(script_path, 'w', encoding='utf-8') as f:
        f.write(script_content)
    
    # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
    os.chmod(script_path, 0o755)
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç –æ–±—É—á–µ–Ω–∏—è: {script_path}")
    return script_path

def print_optimization_summary():
    """–í—ã–≤–æ–¥–∏—Ç —Å–≤–æ–¥–∫—É –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    print("\n" + "="*60)
    print("üîß –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø TON - –°–í–û–î–ö–ê –ò–ó–ú–ï–ù–ï–ù–ò–ô")
    print("="*60)
    
    print("\nüìä –¢–ï–ö–£–©–ò–ï –ü–†–û–ë–õ–ï–ú–´:")
    print("‚Ä¢ Winrate: 45.7% (–Ω–∏–∑–∫–∏–π)")
    print("‚Ä¢ –£–±—ã—Ç–æ—á–Ω—ã–µ —Å–¥–µ–ª–∫–∏: 53.9% (–º–Ω–æ–≥–æ)")
    print("‚Ä¢ –°—Ä–µ–¥–Ω–∏–π ROI: -0.0007 (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π)")
    print("‚Ä¢ P&L ratio: 1.095 (–±–ª–∏–∑–∫–æ –∫ 1)")
    
    print("\nüéØ –¶–ï–õ–ï–í–´–ï –£–õ–£–ß–®–ï–ù–ò–Ø:")
    for key, value in TON_RECOMMENDATIONS['expected_improvements'].items():
        print(f"‚Ä¢ {key}: {value}")
    
    print("\nüîß –û–°–ù–û–í–ù–´–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø:")
    risk = TON_OPTIMIZED_CONFIG['risk_management']
    pos = TON_OPTIMIZED_CONFIG['position_sizing']
    train = TON_OPTIMIZED_CONFIG['training_params']
    
    print(f"‚Ä¢ STOP_LOSS: -4% ‚Üí {risk['STOP_LOSS_PCT']*100:.1f}%")
    print(f"‚Ä¢ TAKE_PROFIT: +6% ‚Üí {risk['TAKE_PROFIT_PCT']*100:.1f}%")
    print(f"‚Ä¢ min_hold_steps: 30 ‚Üí {risk['min_hold_steps']}")
    print(f"‚Ä¢ position_fraction: 0.3 ‚Üí {pos['base_position_fraction']}")
    print(f"‚Ä¢ confidence_threshold: 0.7 ‚Üí {pos['position_confidence_threshold']}")
    print(f"‚Ä¢ learning_rate: 0.001 ‚Üí {train['lr']}")
    print(f"‚Ä¢ lookback_window: 20 ‚Üí {TON_OPTIMIZED_CONFIG['gym_config']['lookback_window']}")
    
    print("\nüìà –ù–û–í–´–ï –ò–ù–î–ò–ö–ê–¢–û–†–´:")
    indicators = TON_OPTIMIZED_CONFIG['indicators_config']
    print(f"‚Ä¢ RSI: {indicators['rsi']['length']} (–±—ã–ª–æ 14)")
    print(f"‚Ä¢ EMA: {indicators['ema']['lengths']} (–¥–æ–±–∞–≤–ª–µ–Ω–∞ EMA 50)")
    print(f"‚Ä¢ Bollinger Bands: {indicators['bb']['length']}, std={indicators['bb']['std']}")
    print(f"‚Ä¢ MACD: fast={indicators['macd']['fast']}, slow={indicators['macd']['slow']}")
    
    print("\nüöÄ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    for step, desc in TON_RECOMMENDATIONS['optimization_strategy'].items():
        print(f"‚Ä¢ {step}: {desc}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è TON")
    print("=" * 50)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é gym
    if not update_gym_config():
        return False
    
    # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –æ–±—É—á–µ–Ω–∏—è
    script_path = create_ton_training_script()
    
    # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É
    print_optimization_summary()
    
    print(f"\n‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"üöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–±—É—á–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
    print(f"   python {script_path}")
    print(f"\nüìä –ü–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
    
    return True

if __name__ == "__main__":
    main()
