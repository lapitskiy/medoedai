#!/usr/bin/env python3
"""
–£–º–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è TON - –∫–æ–º–±–∏–Ω–∏—Ä—É–µ—Ç –±—ã—Å—Ç—Ä—ã–µ —É–ª—É—á—à–µ–Ω–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
"""

import sys
import os
import json

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
current_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.join(current_dir, '..', '..', '..')
sys.path.append(project_root)

from agents.vdqn.hyperparameter.ton_optimized_config import TON_OPTIMIZED_CONFIG
from agents.vdqn.hyperparameter_optimizer import HyperparameterOptimizer
from agents.vdqn.cfg.vconfig import vDqnConfig

class TONSmartOptimizer:
    """–£–º–Ω—ã–π –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –¥–ª—è TON, —Å–æ—á–µ—Ç–∞—é—â–∏–π –±—ã—Å—Ç—Ä—ã–µ —É–ª—É—á—à–µ–Ω–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π"""
    
    def __init__(self):
        self.ton_config = TON_OPTIMIZED_CONFIG
        self.base_config = vDqnConfig()
        
    def apply_quick_fixes(self):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –±—ã—Å—Ç—Ä—ã–µ —É–ª—É—á—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ TON"""
        print("üöÄ –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –ë–´–°–¢–†–´–• –£–õ–£–ß–®–ï–ù–ò–ô –î–õ–Ø TON")
        print("=" * 50)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        quick_fixes = {
            'risk_management': {
                'STOP_LOSS_PCT': -0.025,  # -2.5% –≤–º–µ—Å—Ç–æ -4%
                'TAKE_PROFIT_PCT': 0.04,  # +4% –≤–º–µ—Å—Ç–æ +6%
                'min_hold_steps': 20,     # 1.7 —á–∞—Å–∞ –≤–º–µ—Å—Ç–æ 2.5
                'volume_threshold': 0.005, # –ü–æ–≤—ã—à–∞–µ–º –ø–æ—Ä–æ–≥ –æ–±—ä–µ–º–∞
            },
            'position_sizing': {
                'base_position_fraction': 0.2,  # –ú–µ–Ω—å—à–∏–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
                'position_confidence_threshold': 0.8,  # –í—ã—à–µ –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            },
            'training_params': {
                'lr': 0.0005,  # –ú–µ–Ω—å—à–∏–π learning rate
                'gamma': 0.995,  # –ë–æ–ª—å—à–µ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                'eps_start': 0.8,  # –ú–µ–Ω—å—à–µ —ç–∫—Å–ø–ª–æ—Ä–∞—Ü–∏–∏
                'eps_final': 0.02,
            }
        }
        
        print("‚úÖ –ë—ã—Å—Ç—Ä—ã–µ —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã:")
        for category, params in quick_fixes.items():
            print(f"  üìä {category}:")
            for param, value in params.items():
                print(f"    ‚Ä¢ {param}: {value}")
        
        return quick_fixes
    
    def create_ton_specific_grid(self):
        """–°–æ–∑–¥–∞–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é —Å–µ—Ç–∫—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è TON"""
        
        # –ë–∞–∑–æ–≤—ã–µ —É–ª—É—á—à–µ–Ω–∏—è —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã, —Ç–µ–ø–µ—Ä—å —Ç–æ–Ω–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
        ton_specific_grid = [
            # Learning rate (–æ–∫–æ–ª–æ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ 0.0005)
            {'lr': 0.0003},
            {'lr': 0.0004},
            {'lr': 0.0005},
            {'lr': 0.0006},
            {'lr': 0.0007},
            
            # Gamma (–æ–∫–æ–ª–æ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ 0.995)
            {'gamma': 0.992},
            {'gamma': 0.994},
            {'gamma': 0.995},
            {'gamma': 0.996},
            {'gamma': 0.998},
            
            # Batch size (–¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏)
            {'batch_size': 256},
            {'batch_size': 512},
            {'batch_size': 1024},
            
            # Memory size (–±–æ–ª—å—à–µ –æ–ø—ã—Ç–∞)
            {'memory_size': 300000},
            {'memory_size': 500000},
            {'memory_size': 750000},
            
            # Epsilon decay (–±–æ–ª–µ–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è —ç–∫—Å–ø–ª–æ—Ä–∞—Ü–∏—è)
            {'eps_decay_steps': 1200000},
            {'eps_decay_steps': 1500000},
            {'eps_decay_steps': 1800000},
            
            # Target update frequency
            {'target_update_freq': 3000},
            {'target_update_freq': 4000},
            {'target_update_freq': 5000},
        ]
        
        return ton_specific_grid
    
    def run_smart_optimization(self, max_iterations=15, test_episodes=200):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —É–º–Ω—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –¥–ª—è TON"""
        
        print("üß† –£–ú–ù–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø TON")
        print("=" * 50)
        
        # –®–∞–≥ 1: –ü—Ä–∏–º–µ–Ω—è–µ–º –±—ã—Å—Ç—Ä—ã–µ —É–ª—É—á—à–µ–Ω–∏—è
        quick_fixes = self.apply_quick_fixes()
        
        # –®–∞–≥ 2: –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏
        base_config = vDqnConfig()
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –±—ã—Å—Ç—Ä—ã–µ —É–ª—É—á—à–µ–Ω–∏—è –∫ –±–∞–∑–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        for category, params in quick_fixes.items():
            for param, value in params.items():
                if hasattr(base_config, param):
                    setattr(base_config, param, value)
        
        print(f"\nüîß –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏ —Å–æ–∑–¥–∞–Ω–∞")
        
        # –®–∞–≥ 3: –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é —Å–µ—Ç–∫—É –¥–ª—è TON
        ton_grid = self.create_ton_specific_grid()
        print(f"üìä –°–æ–∑–¥–∞–Ω–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è —Å–µ—Ç–∫–∞: {len(ton_grid)} –∫–æ–º–±–∏–Ω–∞—Ü–∏–π")
        
        # –®–∞–≥ 4: –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
        print(f"\nüöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...")
        print(f"   ‚Ä¢ –ú–∞–∫—Å–∏–º—É–º –∏—Ç–µ—Ä–∞—Ü–∏–π: {max_iterations}")
        print(f"   ‚Ä¢ –≠–ø–∏–∑–æ–¥–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {test_episodes}")
        
        # –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä —Å TON-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ–π —Å–µ—Ç–∫–æ–π
        optimizer = TONHyperparameterOptimizer(
            dfs={},  # –ù—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
            base_config=base_config,
            custom_grid=ton_grid
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
        results = optimizer.optimize(
            max_iterations=max_iterations,
            test_episodes=test_episodes
        )
        
        return results

class TONHyperparameterOptimizer(HyperparameterOptimizer):
    """–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –¥–ª—è TON"""
    
    def __init__(self, dfs, base_config=None, custom_grid=None):
        super().__init__(dfs, base_config)
        self.custom_grid = custom_grid or []
    
    def define_parameter_grid(self):
        """–ò—Å–ø–æ–ª—å–∑—É–µ—Ç TON-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é —Å–µ—Ç–∫—É"""
        if self.custom_grid:
            return self.custom_grid
        return super().define_parameter_grid()
    
    def calculate_score(self, results):
        """–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ü–µ–Ω–∫–∏ –¥–ª—è TON"""
        
        if not results or 'final_stats' not in results:
            return -np.inf
        
        stats = results['final_stats']
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è TON
        winrate = stats.get('winrate', 0)
        pl_ratio = stats.get('pl_ratio', 0)
        trades_count = stats.get('trades_count', 0)
        bad_trades_count = stats.get('bad_trades_count', 0)
        avg_roi = stats.get('avg_roi', 0)
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–ª—è TON (—É—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–±–ª–µ–º—ã)
        score = 0
        
        # Winrate (–≤–µ—Å: 35%) - –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è TON
        if winrate > 0.5:  # –•–æ—Ä–æ—à–∏–π winrate
            score += (winrate - 0.5) * 2 * 0.35  # –ë–æ–Ω—É—Å –∑–∞ winrate > 50%
        else:
            score += winrate * 0.35
        
        # P/L ratio (–≤–µ—Å: 25%) - –≤–∞–∂–Ω–æ –¥–ª—è –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏
        if pl_ratio > 1.2:  # –•–æ—Ä–æ—à–∏–π P/L ratio
            score += (pl_ratio - 1.0) * 0.5 * 0.25
        else:
            score += max(0, pl_ratio - 1.0) * 0.25
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫ (–≤–µ—Å: 15%) - –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        if trades_count > 1000:
            score += min(trades_count / 2000.0, 1.0) * 0.15
        
        # –®—Ç—Ä–∞—Ñ –∑–∞ –ø–ª–æ—Ö–∏–µ —Å–¥–µ–ª–∫–∏ (–≤–µ—Å: 15%)
        bad_trades_ratio = bad_trades_count / max(trades_count, 1)
        if bad_trades_ratio < 0.4:  # –ú–µ–Ω—å—à–µ 40% –ø–ª–æ—Ö–∏—Ö —Å–¥–µ–ª–æ–∫
            score += (0.4 - bad_trades_ratio) * 2 * 0.15
        else:
            score -= (bad_trades_ratio - 0.4) * 0.15
        
        # ROI (–≤–µ—Å: 10%) - –æ–±—â–∞—è –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å
        if avg_roi > 0:
            score += min(avg_roi * 100, 1.0) * 0.10
        else:
            score += max(avg_roi * 50, -0.1) * 0.10
        
        return score

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß† –£–ú–ù–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø TON")
    print("=" * 60)
    print("üéØ –¶–µ–ª—å: –£–ª—É—á—à–∏—Ç—å winrate —Å 45.7% –¥–æ 55-65%")
    print("üí∞ –¶–µ–ª—å: –£–ª—É—á—à–∏—Ç—å P&L ratio —Å 1.095 –¥–æ 1.3-1.5")
    print("üìâ –¶–µ–ª—å: –°–Ω–∏–∑–∏—Ç—å –ø–ª–æ—Ö–∏–µ —Å–¥–µ–ª–∫–∏ —Å 53.9% –¥–æ <40%")
    print("=" * 60)
    
    optimizer = TONSmartOptimizer()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —É–º–Ω—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
    results = optimizer.run_smart_optimization(
        max_iterations=12,  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è TON
        test_episodes=150   # –ë–æ–ª—å—à–µ —ç–ø–∏–∑–æ–¥–æ–≤ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    )
    
    if results:
        print(f"\n‚úÖ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø TON –ó–ê–í–ï–†–®–ï–ù–ê!")
        print(f"üèÜ –õ—É—á—à–∏–π score: {results['best_score']:.4f}")
        print(f"üîß –õ—É—á—à–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {results['best_config']}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        with open('ton_optimization_results.json', 'w') as f:
            json.dump(results, f, indent=2)
        print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ ton_optimization_results.json")
    else:
        print(f"\n‚ùå –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ù–ï –î–ê–õ–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")

if __name__ == "__main__":
    main()
