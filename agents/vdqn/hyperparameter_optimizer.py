#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è DQN –º–æ–¥–µ–ª–∏
–ü–æ–º–æ–≥–∞–µ—Ç –Ω–∞–π—Ç–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è P/L
"""

import pickle
import numpy as np
import pandas as pd
from pathlib import Path
import matplotlib.pyplot as plt
import seaborn as sns
from typing import Dict, List, Any, Tuple
import sys
import os
import itertools
from datetime import datetime
import json

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append('.')
from agents.vdqn.cfg.vconfig import vDqnConfig
from agents.vdqn.v_train_model_optimized import train_model_optimized

class HyperparameterOptimizer:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ DQN –º–æ–¥–µ–ª–∏"""
    
    def __init__(self, dfs: Dict, base_config: vDqnConfig = None):
        self.dfs = dfs
        self.base_config = base_config or vDqnConfig()
        self.results = []
        self.best_config = None
        self.best_score = -np.inf
        
    def define_parameter_grid(self) -> List[Dict]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–µ—Ç–∫—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä–∞"""
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        parameter_grid = [
            # Learning rate
            {'learning_rate': 0.0001},
            {'learning_rate': 0.0005},
            {'learning_rate': 0.001},
            {'learning_rate': 0.002},
            
            # Epsilon decay
            {'eps_decay_rate': 0.995},
            {'eps_decay_rate': 0.997},
            {'eps_decay_rate': 0.999},
            {'eps_decay_rate': 0.9995},
            
            # Batch size
            {'batch_size': 32},
            {'batch_size': 64},
            {'batch_size': 128},
            {'batch_size': 256},
            
            # Memory size
            {'memory_size': 10000},
            {'memory_size': 20000},
            {'memory_size': 50000},
            {'memory_size': 100000},
            
            # Target update frequency
            {'target_update_freq': 100},
            {'target_update_freq': 200},
            {'target_update_freq': 500},
            {'target_update_freq': 1000},
        ]
        
        # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        combinations = []
        for i in range(1, min(5, len(parameter_grid) + 1)):  # –ú–∞–∫—Å–∏–º—É–º 4 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
            for combo in itertools.combinations(parameter_grid, i):
                combined_config = {}
                for param_dict in combo:
                    combined_config.update(param_dict)
                combinations.append(combined_config)
        
        return combinations[:20]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
    
    def evaluate_config(self, config_params: Dict, episodes: int = 100) -> Dict[str, Any]:
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –Ω–∞ –Ω–µ–±–æ–ª—å—à–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —ç–ø–∏–∑–æ–¥–æ–≤"""
        
        try:
            print(f"üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {config_params}")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            test_config = vDqnConfig()
            for param, value in config_params.items():
                if hasattr(test_config, param):
                    setattr(test_config, param, value)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ –Ω–µ–±–æ–ª—å—à–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —ç–ø–∏–∑–æ–¥–æ–≤
            results = train_model_optimized(
                dfs=self.dfs,
                cfg=test_config,
                episodes=episodes,
                patience_limit=episodes // 2,  # –ë—ã—Å—Ç—Ä–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                use_wandb=False
            )
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
            if isinstance(results, str) and 'dqn_model.pth' in results:
                # –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, –∑–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                try:
                    with open('temp/train_results/latest_results.pkl', 'rb') as f:
                        training_results = pickle.load(f)
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º score
                    score = self.calculate_score(training_results)
                    
                    return {
                        'config': config_params,
                        'score': score,
                        'results': training_results,
                        'status': 'success'
                    }
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
                    return {
                        'config': config_params,
                        'score': -np.inf,
                        'results': None,
                        'status': 'load_error'
                    }
            else:
                return {
                    'config': config_params,
                    'score': -np.inf,
                    'results': None,
                    'status': 'training_error'
                }
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return {
                'config': config_params,
                'score': -np.inf,
                'results': None,
                'status': 'error'
            }
    
    def calculate_score(self, results: Dict[str, Any]) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç score –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        
        if not results or 'final_stats' not in results:
            return -np.inf
        
        stats = results['final_stats']
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        winrate = stats.get('winrate', 0)
        pl_ratio = stats.get('pl_ratio', 0)
        trades_count = stats.get('trades_count', 0)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        avg_profit = stats.get('avg_profit', 0)
        avg_loss = abs(stats.get('avg_loss', 0))
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º score (—á–µ–º –≤—ã—à–µ, —Ç–µ–º –ª—É—á—à–µ)
        score = 0
        
        # Winrate (–≤–µ—Å: 40%)
        score += winrate * 0.4
        
        # P/L ratio (–≤–µ—Å: 30%)
        if pl_ratio > 0:
            score += min(pl_ratio / 3.0, 1.0) * 0.3  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–æ 1.0
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫ (–≤–µ—Å: 15%)
        if trades_count > 0:
            score += min(trades_count / 1000.0, 1.0) * 0.15
        
        # –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏/—É–±—ã—Ç–∫–∞ (–≤–µ—Å: 15%)
        if avg_loss > 0:
            profit_loss_ratio = avg_profit / avg_loss
            score += min(profit_loss_ratio / 5.0, 1.0) * 0.15
        
        return score
    
    def optimize(self, max_iterations: int = 20, test_episodes: int = 100) -> Dict[str, Any]:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        
        print(f"üöÄ –ó–ê–ü–£–°–ö –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò –ì–ò–ü–ï–†–ü–ê–†–ê–ú–ï–¢–†–û–í")
        print(f"=" * 60)
        print(f"üìä –ú–∞–∫—Å–∏–º—É–º –∏—Ç–µ—Ä–∞—Ü–∏–π: {max_iterations}")
        print(f"üéØ –≠–ø–∏–∑–æ–¥–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {test_episodes}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ç–∫—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        parameter_combinations = self.define_parameter_grid()
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {len(parameter_combinations)}")
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π
        parameter_combinations = parameter_combinations[:max_iterations]
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        for i, config_params in enumerate(parameter_combinations):
            print(f"\nüìã –ò—Ç–µ—Ä–∞—Ü–∏—è {i+1}/{len(parameter_combinations)}")
            
            # –û—Ü–µ–Ω–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            result = self.evaluate_config(config_params, test_episodes)
            self.results.append(result)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if result['status'] == 'success' and result['score'] > self.best_score:
                self.best_score = result['score']
                self.best_config = result['config']
                print(f"üèÜ –ù–æ–≤—ã–π –ª—É—á—à–∏–π score: {self.best_score:.4f}")
                print(f"   –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {self.best_config}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self.save_intermediate_results()
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        return self.analyze_results()
    
    def analyze_results(self) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        
        print(f"\nüìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò")
        print(f"=" * 60)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        successful_results = [r for r in self.results if r['status'] == 'success']
        
        if not successful_results:
            print("‚ùå –ù–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return {}
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ score
        successful_results.sort(key=lambda x: x['score'], reverse=True)
        
        # –¢–æ–ø-5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print(f"üèÜ –¢–û–ü-5 –õ–£–ß–®–ò–• –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ô:")
        for i, result in enumerate(successful_results[:5]):
            print(f"  {i+1}. Score: {result['score']:.4f}")
            print(f"     –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {result['config']}")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
        self.analyze_parameter_importance(successful_results)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.save_final_results()
        
        return {
            'best_config': self.best_config,
            'best_score': self.best_score,
            'top_results': successful_results[:5],
            'total_tested': len(self.results),
            'successful_tests': len(successful_results)
        }
    
    def analyze_parameter_importance(self, results: List[Dict[str, Any]]):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞–∂–Ω–æ—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        
        print(f"\nüîç –ê–ù–ê–õ–ò–ó –í–ê–ñ–ù–û–°–¢–ò –ü–ê–†–ê–ú–ï–¢–†–û–í:")
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        all_params = set()
        for result in results:
            all_params.update(result['config'].keys())
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
        for param in all_params:
            param_values = []
            param_scores = []
            
            for result in results:
                if param in result['config']:
                    param_values.append(result['config'][param])
                    param_scores.append(result['score'])
            
            if param_values:
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
                unique_values = list(set(param_values))
                avg_scores = []
                
                for value in unique_values:
                    value_scores = [score for val, score in zip(param_values, param_scores) if val == value]
                    avg_scores.append(np.mean(value_scores))
                
                # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                best_value_idx = np.argmax(avg_scores)
                best_value = unique_values[best_value_idx]
                best_avg_score = avg_scores[best_value_idx]
                
                print(f"  ‚Ä¢ {param}:")
                print(f"    –õ—É—á—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {best_value} (score: {best_avg_score:.4f})")
                print(f"    –í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è: {dict(zip(unique_values, [f'{s:.4f}' for s in avg_scores]))}")
    
    def save_intermediate_results(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"temp/hyperparameter_optimization_{timestamp}.json"
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        Path('temp').mkdir(exist_ok=True)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        save_data = {
            'timestamp': timestamp,
            'results': [
                {
                    'config': r['config'],
                    'score': r['score'],
                    'status': r['status']
                }
                for r in self.results
            ],
            'best_config': self.best_config,
            'best_score': self.best_score
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(save_data, f, indent=2, ensure_ascii=False)
        
        print(f"üíæ –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {filename}")
    
    def save_final_results(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"temp/final_hyperparameter_optimization_{timestamp}.json"
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        Path('temp').mkdir(exist_ok=True)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        save_data = {
            'timestamp': timestamp,
            'optimization_summary': {
                'total_tested': len(self.results),
                'successful_tests': len([r for r in self.results if r['status'] == 'success']),
                'best_score': self.best_score,
                'best_config': self.best_config
            },
            'all_results': [
                {
                    'config': r['config'],
                    'score': r['score'],
                    'status': r['status']
                }
                for r in self.results
            ],
            'recommendations': self.generate_recommendations()
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(save_data, f, indent=2, ensure_ascii=False)
        
        print(f"üíæ –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {filename}")
    
    def generate_recommendations(self) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        
        recommendations = []
        
        if self.best_score > 0.8:
            recommendations.append("üéØ –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ú–æ–¥–µ–ª—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã—Å–æ–∫—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
        elif self.best_score > 0.6:
            recommendations.append("‚úÖ –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ï—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è")
        else:
            recommendations.append("‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∏–∂–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è")
        
        if self.best_config:
            recommendations.append(f"üîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {self.best_config}")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
        successful_results = [r for r in self.results if r['status'] == 'success']
        if successful_results:
            avg_score = np.mean([r['score'] for r in successful_results])
            recommendations.append(f"üìä –°—Ä–µ–¥–Ω–∏–π score —É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {avg_score:.4f}")
        
        return recommendations

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    
    print("üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¢–û–† –ì–ò–ü–ï–†–ü–ê–†–ê–ú–ï–¢–†–û–í DQN –ú–û–î–ï–õ–ò")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
    if not Path('temp/binance_data').exists():
        print("‚ùå –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ temp/binance_data/")
        print("   –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ download.py –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ (–∑–¥–µ—Å—å –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ –≤–∞—à—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É)
    print("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    # TODO: –î–æ–±–∞–≤–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö
    
    # –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä
    optimizer = HyperparameterOptimizer(dfs={})  # –ü–µ—Ä–µ–¥–∞–π—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
    results = optimizer.optimize(max_iterations=10, test_episodes=50)
    
    if results:
        print(f"\n‚úÖ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
        print(f"üèÜ –õ—É—á—à–∏–π score: {results['best_score']:.4f}")
        print(f"üîß –õ—É—á—à–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {results['best_config']}")
    else:
        print(f"\n‚ùå –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ù–ï –î–ê–õ–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")

if __name__ == "__main__":
    main()
